
Final_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800e590  0800e590  0001e590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea30  0800ea30  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea30  0800ea30  0001ea30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea38  0800ea38  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea3c  0800ea3c  0001ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ea40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000513c  200001f0  0800ec30  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000532c  0800ec30  0002532c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020fa6  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e22  00000000  00000000  00041209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  00046030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001580  00000000  00000000  00047be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027350  00000000  00000000  00049160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d7c  00000000  00000000  000704b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cad  00000000  00000000  0009422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008750  00000000  00000000  00174edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017d62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e574 	.word	0x0800e574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800e574 	.word	0x0800e574

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <TASK_GPS>:
uint8_t Tx_ESP_Buffer[30];
uint8_t ESP_Status_Buffer[3];


void TASK_GPS(void *Parameters)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	uint8_t Decode_Error_Code;
	while(1)
	{
		/*Update the GPS Data*/
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 8000fcc:	f000 fc36 	bl	800183c <GPS_uint8DecodeGGAData>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
		if(Decode_Error_Code==Decode_Success)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1f8      	bne.n	8000fcc <TASK_GPS+0x8>
		{
			/*Update the completetion flag to activate the sendESP_Periodic task*/
			if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <TASK_GPS+0x4c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <TASK_GPS+0x26>
			{
				Global_GPS_Speed_Completetion=Half_Completed_GPS;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <TASK_GPS+0x4c>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e00d      	b.n	8001006 <TASK_GPS+0x42>

			}
			else if(Global_GPS_Speed_Completetion==Half_Completed_Speed)
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <TASK_GPS+0x4c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d109      	bne.n	8001006 <TASK_GPS+0x42>
			{
				Global_GPS_Speed_Completetion=Nothing_Completed;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <TASK_GPS+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
				/*Activate the ESPTask*/
				xTaskNotify(Handle_Esp_Periodic,0,eNoAction);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <TASK_GPS+0x50>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	f008 f9dd 	bl	80093c0 <xTaskGenericNotify>
			}
			/*Stopping the task for 400ms to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(1000));
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f007 fc5d 	bl	80088c8 <vTaskDelay>
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 800100e:	e7dd      	b.n	8000fcc <TASK_GPS+0x8>
 8001010:	2000020c 	.word	0x2000020c
 8001014:	2000078c 	.word	0x2000078c

08001018 <Task_ControlCar>:

}


void Task_ControlCar(void *Parameters)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/*Task will be in Blocked State Waiting for RxCallback Function to Notify it*/
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,0,portMAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2000      	movs	r0, #0
 800102a:	f008 f969 	bl	8009300 <xTaskNotifyWait>
		switch(Received_Char_Bluetooth)
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <Task_ControlCar+0xa0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b42      	subs	r3, #66	; 0x42
 8001036:	2b14      	cmp	r3, #20
 8001038:	d8f2      	bhi.n	8001020 <Task_ControlCar+0x8>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <Task_ControlCar+0x28>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	0800109b 	.word	0x0800109b
 8001044:	08001021 	.word	0x08001021
 8001048:	08001021 	.word	0x08001021
 800104c:	08001021 	.word	0x08001021
 8001050:	08001095 	.word	0x08001095
 8001054:	08001021 	.word	0x08001021
 8001058:	08001021 	.word	0x08001021
 800105c:	08001021 	.word	0x08001021
 8001060:	08001021 	.word	0x08001021
 8001064:	08001021 	.word	0x08001021
 8001068:	080010ad 	.word	0x080010ad
 800106c:	08001021 	.word	0x08001021
 8001070:	08001021 	.word	0x08001021
 8001074:	08001021 	.word	0x08001021
 8001078:	08001021 	.word	0x08001021
 800107c:	08001021 	.word	0x08001021
 8001080:	080010a7 	.word	0x080010a7
 8001084:	08001021 	.word	0x08001021
 8001088:	08001021 	.word	0x08001021
 800108c:	08001021 	.word	0x08001021
 8001090:	080010a1 	.word	0x080010a1
		{
		case 'F':
			Car_Move_Forward_High_Speed();
 8001094:	f000 fa36 	bl	8001504 <Car_Move_Forward_High_Speed>
			break;
 8001098:	e00c      	b.n	80010b4 <Task_ControlCar+0x9c>
		case 'B':
			Car_Move_Backward();
 800109a:	f000 fa61 	bl	8001560 <Car_Move_Backward>
			break;
 800109e:	e009      	b.n	80010b4 <Task_ControlCar+0x9c>
		case 'V':
			/*if char recieved 'S' then Notify The Task_Esp That There is Hard Brake*/
			Car_Stop();
 80010a0:	f000 fae8 	bl	8001674 <Car_Stop>
			//xTaskNotify(Handle_Send_ESP_Status,0,eNoAction);
			break;
 80010a4:	e006      	b.n	80010b4 <Task_ControlCar+0x9c>
		case 'R':
			Car_Rotate_Right();
 80010a6:	f000 fa89 	bl	80015bc <Car_Rotate_Right>
			break;
 80010aa:	e003      	b.n	80010b4 <Task_ControlCar+0x9c>
		case 'L':
			Car_Rotate_Left();
 80010ac:	f000 fab4 	bl	8001618 <Car_Rotate_Left>
			break;
 80010b0:	bf00      	nop
 80010b2:	e7b5      	b.n	8001020 <Task_ControlCar+0x8>
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,0,portMAX_DELAY);
 80010b4:	e7b4      	b.n	8001020 <Task_ControlCar+0x8>
 80010b6:	bf00      	nop
 80010b8:	20000784 	.word	0x20000784

080010bc <Task_SendEspPeriodic>:

}


void Task_SendEspPeriodic(void *Parameters)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	while(1)
	{
		/*Task will be in Blocked State Waiting for GPS_Task To Notify it*/
		Notify_Status = xTaskNotifyWait(NULL, NULL, &Local_uint32NotificationValue, portMAX_DELAY);
 80010c4:	f107 0208 	add.w	r2, r7, #8
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f008 f916 	bl	8009300 <xTaskNotifyWait>
 80010d4:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d1f3      	bne.n	80010c4 <Task_SendEspPeriodic+0x8>
		{
			/*Assign GPS and Speed Data to Transmission Buffer*/
			GPSSPEED_voidBuildMsg(&Tx_ESP_Buffer, GPS_Data.Longitude, GPS_Data.Latitude, Global_Speed);
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <Task_SendEspPeriodic+0x58>)
 80010de:	ed93 7b02 	vldr	d7, [r3, #8]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <Task_SendEspPeriodic+0x58>)
 80010e4:	ed93 6b00 	vldr	d6, [r3]
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <Task_SendEspPeriodic+0x5c>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	eeb0 1a46 	vmov.f32	s2, s12
 80010f2:	eef0 1a66 	vmov.f32	s3, s13
 80010f6:	eeb0 0a47 	vmov.f32	s0, s14
 80010fa:	eef0 0a67 	vmov.f32	s1, s15
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <Task_SendEspPeriodic+0x60>)
 8001100:	f000 f83c 	bl	800117c <GPSSPEED_voidBuildMsg>

			/*Transmit the Buffer*/
			HAL_UART_Transmit(&huart4, Tx_ESP_Buffer, sizeof(Tx_ESP_Buffer), 1500);
 8001104:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001108:	221e      	movs	r2, #30
 800110a:	4904      	ldr	r1, [pc, #16]	; (800111c <Task_SendEspPeriodic+0x60>)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <Task_SendEspPeriodic+0x64>)
 800110e:	f005 fc39 	bl	8006984 <HAL_UART_Transmit>
		Notify_Status = xTaskNotifyWait(NULL, NULL, &Local_uint32NotificationValue, portMAX_DELAY);
 8001112:	e7d7      	b.n	80010c4 <Task_SendEspPeriodic+0x8>
 8001114:	20000238 	.word	0x20000238
 8001118:	200007f0 	.word	0x200007f0
 800111c:	20000210 	.word	0x20000210
 8001120:	20000664 	.word	0x20000664

08001124 <Task_Recieve_Status_Esp>:
//
//}


void Task_Recieve_Status_Esp(void *Parameters)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint32NotificationValue;

	while(1)
	{
		/*Task will be in Blocked State Waiting for RxCallback Function to Notify it*/
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2100      	movs	r1, #0
 8001136:	2000      	movs	r0, #0
 8001138:	f008 f8e2 	bl	8009300 <xTaskNotifyWait>
 800113c:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1f3      	bne.n	800112c <Task_Recieve_Status_Esp+0x8>
		{

			switch(Received_Char_ESP)
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Task_Recieve_Status_Esp+0x50>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b42      	cmp	r3, #66	; 0x42
 800114c:	d1ee      	bne.n	800112c <Task_Recieve_Status_Esp+0x8>
			{
			case 'B':

				Car_Stop();
 800114e:	f000 fa91 	bl	8001674 <Car_Stop>

				/*Display The Warning Message on LCD to The Driver and the Alerting Sound of the Buzzer*/
				Hard_Brake_Warning();
 8001152:	f001 fad5 	bl	8002700 <Hard_Brake_Warning>

				/*Start the timer to stop the buzzer and clear LCD after period of specified time*/
				xTimerStart(Handle_Timer_LCDBuzzer,1000);
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <Task_Recieve_Status_Esp+0x54>)
 8001158:	681c      	ldr	r4, [r3, #0]
 800115a:	f007 fd05 	bl	8008b68 <xTaskGetTickCount>
 800115e:	4602      	mov	r2, r0
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2300      	movs	r3, #0
 8001168:	2101      	movs	r1, #1
 800116a:	4620      	mov	r0, r4
 800116c:	f008 fbc2 	bl	80098f4 <xTimerGenericCommand>

				break;
 8001170:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8001172:	e7db      	b.n	800112c <Task_Recieve_Status_Esp+0x8>
 8001174:	20000785 	.word	0x20000785
 8001178:	20000794 	.word	0x20000794

0800117c <GPSSPEED_voidBuildMsg>:
#include <stdio.h>
#include "Build_msg.h"


void GPSSPEED_voidBuildMsg(uint8_t* Msg_Array,double Copy_doubleGPS_Longitude,double Copy_doubleGPS_Latitude,uint16_t Copy_uint16Speed)
{
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	b092      	sub	sp, #72	; 0x48
 8001182:	af02      	add	r7, sp, #8
 8001184:	6178      	str	r0, [r7, #20]
 8001186:	ed87 0b02 	vstr	d0, [r7, #8]
 800118a:	ed87 1b00 	vstr	d1, [r7]
 800118e:	460b      	mov	r3, r1
 8001190:	827b      	strh	r3, [r7, #18]
 8001192:	466b      	mov	r3, sp
 8001194:	469a      	mov	sl, r3

uint8_t Local_uint8LatitudeArr[11];
uint8_t Local_uint8LongitudeArr[11];
uint8_t Local_uint8SpeedElements;

uint8_t Local_uint8Counter=0;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
if(Copy_uint16Speed<10)
 800119c:	8a7b      	ldrh	r3, [r7, #18]
 800119e:	2b09      	cmp	r3, #9
 80011a0:	d803      	bhi.n	80011aa <GPSSPEED_voidBuildMsg+0x2e>
{
	Local_uint8SpeedElements = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011a8:	e014      	b.n	80011d4 <GPSSPEED_voidBuildMsg+0x58>

}
else if(Copy_uint16Speed<100)
 80011aa:	8a7b      	ldrh	r3, [r7, #18]
 80011ac:	2b63      	cmp	r3, #99	; 0x63
 80011ae:	d803      	bhi.n	80011b8 <GPSSPEED_voidBuildMsg+0x3c>
{
	Local_uint8SpeedElements=2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011b6:	e00d      	b.n	80011d4 <GPSSPEED_voidBuildMsg+0x58>
}
else if((Copy_uint16Speed>100) && (Copy_uint16Speed<1000))
 80011b8:	8a7b      	ldrh	r3, [r7, #18]
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d907      	bls.n	80011ce <GPSSPEED_voidBuildMsg+0x52>
 80011be:	8a7b      	ldrh	r3, [r7, #18]
 80011c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c4:	d203      	bcs.n	80011ce <GPSSPEED_voidBuildMsg+0x52>
{
	Local_uint8SpeedElements=3;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011cc:	e002      	b.n	80011d4 <GPSSPEED_voidBuildMsg+0x58>
}
else
{
	Local_uint8SpeedElements=4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
}
uint8_t Local_uint8SpeedArr[Local_uint8SpeedElements+1];
 80011d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011d8:	1c5e      	adds	r6, r3, #1
 80011da:	1e73      	subs	r3, r6, #1
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011de:	4632      	mov	r2, r6
 80011e0:	2300      	movs	r3, #0
 80011e2:	4690      	mov	r8, r2
 80011e4:	4699      	mov	r9, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011fa:	4632      	mov	r2, r6
 80011fc:	2300      	movs	r3, #0
 80011fe:	4614      	mov	r4, r2
 8001200:	461d      	mov	r5, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	00eb      	lsls	r3, r5, #3
 800120c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001210:	00e2      	lsls	r2, r4, #3
 8001212:	4633      	mov	r3, r6
 8001214:	3307      	adds	r3, #7
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	ebad 0d03 	sub.w	sp, sp, r3
 800121e:	ab02      	add	r3, sp, #8
 8001220:	3300      	adds	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34

 /*Putting the lat and lon in a string form to be sent to the esp*/
 snprintf(&Local_uint8LongitudeArr,sizeof(Local_uint8LongitudeArr),"%.6f",Copy_doubleGPS_Longitude); // @suppress("Float formatting support")
 8001224:	f107 001c 	add.w	r0, r7, #28
 8001228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800122c:	e9cd 2300 	strd	r2, r3, [sp]
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <GPSSPEED_voidBuildMsg+0x1f8>)
 8001232:	210b      	movs	r1, #11
 8001234:	f00a f852 	bl	800b2dc <sniprintf>
 snprintf(&Local_uint8LatitudeArr,sizeof(Local_uint8LatitudeArr),"%.6f",Copy_doubleGPS_Latitude); // @suppress("Float formatting support")
 8001238:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800123c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001240:	e9cd 2300 	strd	r2, r3, [sp]
 8001244:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <GPSSPEED_voidBuildMsg+0x1f8>)
 8001246:	210b      	movs	r1, #11
 8001248:	f00a f848 	bl	800b2dc <sniprintf>

 snprintf(&Local_uint8SpeedArr,sizeof(Local_uint8SpeedArr),"%d",Copy_uint16Speed);
 800124c:	4631      	mov	r1, r6
 800124e:	8a7b      	ldrh	r3, [r7, #18]
 8001250:	4a49      	ldr	r2, [pc, #292]	; (8001378 <GPSSPEED_voidBuildMsg+0x1fc>)
 8001252:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001254:	f00a f842 	bl	800b2dc <sniprintf>

 Msg_Array[0]='#';
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2223      	movs	r2, #35	; 0x23
 800125c:	701a      	strb	r2, [r3, #0]
 Msg_Array[1]=Local_uint8LongitudeArr[0];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	7f3a      	ldrb	r2, [r7, #28]
 8001264:	701a      	strb	r2, [r3, #0]
 Msg_Array[2]=Local_uint8LongitudeArr[1];
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3302      	adds	r3, #2
 800126a:	7f7a      	ldrb	r2, [r7, #29]
 800126c:	701a      	strb	r2, [r3, #0]
 Msg_Array[3]=Local_uint8LongitudeArr[2];
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3303      	adds	r3, #3
 8001272:	7fba      	ldrb	r2, [r7, #30]
 8001274:	701a      	strb	r2, [r3, #0]
 Msg_Array[4]=Local_uint8LongitudeArr[3];
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3304      	adds	r3, #4
 800127a:	7ffa      	ldrb	r2, [r7, #31]
 800127c:	701a      	strb	r2, [r3, #0]

 Msg_Array[5]=Local_uint8LongitudeArr[4];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3305      	adds	r3, #5
 8001282:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001286:	701a      	strb	r2, [r3, #0]
 Msg_Array[6]=Local_uint8LongitudeArr[5];
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3306      	adds	r3, #6
 800128c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001290:	701a      	strb	r2, [r3, #0]
 Msg_Array[7]=Local_uint8LongitudeArr[6];
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3307      	adds	r3, #7
 8001296:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800129a:	701a      	strb	r2, [r3, #0]
 Msg_Array[8]=Local_uint8LongitudeArr[7];
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3308      	adds	r3, #8
 80012a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012a4:	701a      	strb	r2, [r3, #0]
 Msg_Array[9]=Local_uint8LongitudeArr[8];
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3309      	adds	r3, #9
 80012aa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012ae:	701a      	strb	r2, [r3, #0]

 Msg_Array[10]='*';
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	330a      	adds	r3, #10
 80012b4:	222a      	movs	r2, #42	; 0x2a
 80012b6:	701a      	strb	r2, [r3, #0]

 Msg_Array[11]= Local_uint8LatitudeArr[0];
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	330b      	adds	r3, #11
 80012bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012c0:	701a      	strb	r2, [r3, #0]
 Msg_Array[12]= Local_uint8LatitudeArr[1];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	330c      	adds	r3, #12
 80012c6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80012ca:	701a      	strb	r2, [r3, #0]
 Msg_Array[13]= Local_uint8LatitudeArr[2];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	330d      	adds	r3, #13
 80012d0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80012d4:	701a      	strb	r2, [r3, #0]
 Msg_Array[14]= Local_uint8LatitudeArr[3];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	330e      	adds	r3, #14
 80012da:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012de:	701a      	strb	r2, [r3, #0]
 Msg_Array[15]= Local_uint8LatitudeArr[4];
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	330f      	adds	r3, #15
 80012e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80012e8:	701a      	strb	r2, [r3, #0]
 Msg_Array[16]= Local_uint8LatitudeArr[5];
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3310      	adds	r3, #16
 80012ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80012f2:	701a      	strb	r2, [r3, #0]
 Msg_Array[17]= Local_uint8LatitudeArr[6];
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3311      	adds	r3, #17
 80012f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80012fc:	701a      	strb	r2, [r3, #0]
 Msg_Array[18]= Local_uint8LatitudeArr[7];
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3312      	adds	r3, #18
 8001302:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001306:	701a      	strb	r2, [r3, #0]
 Msg_Array[19]= Local_uint8LatitudeArr[8];
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3313      	adds	r3, #19
 800130c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001310:	701a      	strb	r2, [r3, #0]

 Msg_Array[20]= '&';
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3314      	adds	r3, #20
 8001316:	2226      	movs	r2, #38	; 0x26
 8001318:	701a      	strb	r2, [r3, #0]


 for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 800131a:	e00f      	b.n	800133c <GPSSPEED_voidBuildMsg+0x1c0>
 {
	 Msg_Array[21+Local_uint8Counter]=Local_uint8SpeedArr[Local_uint8Counter];
 800131c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001320:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001324:	3315      	adds	r3, #21
 8001326:	4619      	mov	r1, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	440b      	add	r3, r1
 800132c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800132e:	5c8a      	ldrb	r2, [r1, r2]
 8001330:	701a      	strb	r2, [r3, #0]
 for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 8001332:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001336:	3301      	adds	r3, #1
 8001338:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800133c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001340:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001344:	429a      	cmp	r2, r3
 8001346:	d3e9      	bcc.n	800131c <GPSSPEED_voidBuildMsg+0x1a0>
 }

Msg_Array[21+Local_uint8Counter]='^';
 8001348:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800134c:	3315      	adds	r3, #21
 800134e:	461a      	mov	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4413      	add	r3, r2
 8001354:	225e      	movs	r2, #94	; 0x5e
 8001356:	701a      	strb	r2, [r3, #0]
Msg_Array[22+Local_uint8Counter]= '!';
 8001358:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800135c:	3316      	adds	r3, #22
 800135e:	461a      	mov	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	4413      	add	r3, r2
 8001364:	2221      	movs	r2, #33	; 0x21
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	46d5      	mov	sp, sl

}
 800136a:	bf00      	nop
 800136c:	3740      	adds	r7, #64	; 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001374:	0800e590 	.word	0x0800e590
 8001378:	0800e598 	.word	0x0800e598

0800137c <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0



#elif Buzzer_Timer_Connected == TIMER3
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM3->CCR1=90;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <Buzzer_voidHighSound+0x18>)
 8001382:	225a      	movs	r2, #90	; 0x5a
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001386:	2100      	movs	r1, #0
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <Buzzer_voidHighSound+0x1c>)
 800138a:	f004 fabb 	bl	8005904 <HAL_TIM_PWM_Start>

#endif



}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40000400 	.word	0x40000400
 8001398:	2000061c 	.word	0x2000061c

0800139c <Buzzer_voidStop>:

void Buzzer_voidStop(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0


#elif Buzzer_Timer_Connected == TIMER3
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80013a0:	2100      	movs	r1, #0
 80013a2:	4802      	ldr	r0, [pc, #8]	; (80013ac <Buzzer_voidStop+0x10>)
 80013a4:	f004 fb76 	bl	8005a94 <HAL_TIM_PWM_Stop>




#endif
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000061c 	.word	0x2000061c

080013b0 <Calculate_Car_Speed>:


extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter * 360 /50) * 2 * 3.14 * 0.03;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <Calculate_Car_Speed+0x78>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <Calculate_Car_Speed+0x7c>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8b9 	bl	8000544 <__aeabi_ui2d>
 80013d2:	a311      	add	r3, pc, #68	; (adr r3, 8001418 <Calculate_Car_Speed+0x68>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f92e 	bl	8000638 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	a30e      	add	r3, pc, #56	; (adr r3, 8001420 <Calculate_Car_Speed+0x70>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f925 	bl	8000638 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fc17 	bl	8000c28 <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <Calculate_Car_Speed+0x78>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ee07 3a90 	vmov	s15, r3
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	51eb851f 	.word	0x51eb851f
 800141c:	40091eb8 	.word	0x40091eb8
 8001420:	eb851eb8 	.word	0xeb851eb8
 8001424:	3f9eb851 	.word	0x3f9eb851
 8001428:	20000230 	.word	0x20000230
 800142c:	51eb851f 	.word	0x51eb851f

08001430 <HAL_UART_RxCpltCallback>:


/*Func will Called if there is a char Recieved,Then give notf if it higher priority
 * than the task before the interrupt it will switch to the task control car */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
	//	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

	if(huart->Instance == USART3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_UART_RxCpltCallback+0x60>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10e      	bne.n	8001460 <HAL_UART_RxCpltCallback+0x30>
	{
		xTaskNotifyFromISR(Handle_Car_Control,NULL,eNoAction,NULL);
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_UART_RxCpltCallback+0x64>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	f008 f874 	bl	800953c <xTaskGenericNotifyFromISR>
		HAL_UART_Receive_IT(&huart3, (uint8_t *)&Received_Char_Bluetooth, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	4910      	ldr	r1, [pc, #64]	; (8001498 <HAL_UART_RxCpltCallback+0x68>)
 8001458:	4810      	ldr	r0, [pc, #64]	; (800149c <HAL_UART_RxCpltCallback+0x6c>)
 800145a:	f005 fb1e 	bl	8006a9a <HAL_UART_Receive_IT>
		//		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
		HAL_UART_Receive_IT(&huart4, (uint8_t *)&Received_Char_ESP, 2);


	}
}
 800145e:	e012      	b.n	8001486 <HAL_UART_RxCpltCallback+0x56>
	else if(huart->Instance == UART4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_UART_RxCpltCallback+0x70>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10d      	bne.n	8001486 <HAL_UART_RxCpltCallback+0x56>
		xTaskNotifyFromISR(Handle_Recieve_ESP_Status, NULL,eNoAction,NULL);
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_UART_RxCpltCallback+0x74>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2300      	movs	r3, #0
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	f008 f860 	bl	800953c <xTaskGenericNotifyFromISR>
		HAL_UART_Receive_IT(&huart4, (uint8_t *)&Received_Char_ESP, 2);
 800147c:	2202      	movs	r2, #2
 800147e:	490a      	ldr	r1, [pc, #40]	; (80014a8 <HAL_UART_RxCpltCallback+0x78>)
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <HAL_UART_RxCpltCallback+0x7c>)
 8001482:	f005 fb0a 	bl	8006a9a <HAL_UART_Receive_IT>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40004800 	.word	0x40004800
 8001494:	20000788 	.word	0x20000788
 8001498:	20000784 	.word	0x20000784
 800149c:	200006f4 	.word	0x200006f4
 80014a0:	40004c00 	.word	0x40004c00
 80014a4:	20000790 	.word	0x20000790
 80014a8:	20000785 	.word	0x20000785
 80014ac:	20000664 	.word	0x20000664

080014b0 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d10c      	bne.n	80014dc <HAL_TIM_IC_CaptureCallback+0x2c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7f1b      	ldrb	r3, [r3, #28]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <HAL_TIM_IC_CaptureCallback+0x22>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7f1b      	ldrb	r3, [r3, #28]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d104      	bne.n	80014dc <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80014da:	6013      	str	r3, [r2, #0]
	}
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20000230 	.word	0x20000230

080014ec <CallBack_TimerLCDBuzzer>:


void CallBack_TimerLCDBuzzer(TimerHandle_t xTimer)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	/*Stopping the buzzer*/
	Buzzer_voidStop();
 80014f4:	f7ff ff52 	bl	800139c <Buzzer_voidStop>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 80014f8:	f000 fb34 	bl	8001b64 <LCD_voidClearDisplay>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <Car_Move_Forward_High_Speed>:

void Motor4_Rotate_CW(void);
void Motor4_Rotate_CCW(void);


void Car_Move_Forward_High_Speed(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001508:	f000 f8cc 	bl	80016a4 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <Car_Move_Forward_High_Speed+0x54>)
 800150e:	2263      	movs	r2, #99	; 0x63
 8001510:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <Car_Move_Forward_High_Speed+0x54>)
 8001514:	2263      	movs	r2, #99	; 0x63
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Car_Move_Forward_High_Speed+0x54>)
 800151a:	2263      	movs	r2, #99	; 0x63
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <Car_Move_Forward_High_Speed+0x54>)
 8001520:	2263      	movs	r2, #99	; 0x63
 8001522:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001524:	2100      	movs	r1, #0
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <Car_Move_Forward_High_Speed+0x58>)
 8001528:	f004 f9ec 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 800152c:	2104      	movs	r1, #4
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <Car_Move_Forward_High_Speed+0x58>)
 8001530:	f004 f9e8 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001534:	2108      	movs	r1, #8
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <Car_Move_Forward_High_Speed+0x58>)
 8001538:	f004 f9e4 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 800153c:	210c      	movs	r1, #12
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <Car_Move_Forward_High_Speed+0x58>)
 8001540:	f004 f9e0 	bl	8005904 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same direction*/
	Motor1_Rotate_CW();
 8001544:	f000 f8e6 	bl	8001714 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 8001548:	f000 f90c 	bl	8001764 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 800154c:	f000 f92e 	bl	80017ac <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 8001550:	f000 f950 	bl	80017f4 <Motor4_Rotate_CW>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000
 800155c:	2000058c 	.word	0x2000058c

08001560 <Car_Move_Backward>:
	Motor2_Rotate_CW();
	Motor3_Rotate_CW();
	Motor4_Rotate_CW();
}
void Car_Move_Backward(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001564:	f000 f89e 	bl	80016a4 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <Car_Move_Backward+0x54>)
 800156a:	2263      	movs	r2, #99	; 0x63
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <Car_Move_Backward+0x54>)
 8001570:	2263      	movs	r2, #99	; 0x63
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <Car_Move_Backward+0x54>)
 8001576:	2263      	movs	r2, #99	; 0x63
 8001578:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <Car_Move_Backward+0x54>)
 800157c:	2263      	movs	r2, #99	; 0x63
 800157e:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001580:	2100      	movs	r1, #0
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <Car_Move_Backward+0x58>)
 8001584:	f004 f9be 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001588:	2104      	movs	r1, #4
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <Car_Move_Backward+0x58>)
 800158c:	f004 f9ba 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001590:	2108      	movs	r1, #8
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <Car_Move_Backward+0x58>)
 8001594:	f004 f9b6 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001598:	210c      	movs	r1, #12
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <Car_Move_Backward+0x58>)
 800159c:	f004 f9b2 	bl	8005904 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same  direction*/
	Motor1_Rotate_CCW();
 80015a0:	f000 f8cc 	bl	800173c <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 80015a4:	f000 f8f0 	bl	8001788 <Motor2_Rotate_CCW>
	Motor3_Rotate_CCW();
 80015a8:	f000 f912 	bl	80017d0 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 80015ac:	f000 f934 	bl	8001818 <Motor4_Rotate_CCW>
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40010000 	.word	0x40010000
 80015b8:	2000058c 	.word	0x2000058c

080015bc <Car_Rotate_Right>:

void Car_Rotate_Right(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80015c0:	f000 f870 	bl	80016a4 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <Car_Rotate_Right+0x54>)
 80015c6:	2263      	movs	r2, #99	; 0x63
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <Car_Rotate_Right+0x54>)
 80015cc:	2263      	movs	r2, #99	; 0x63
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <Car_Rotate_Right+0x54>)
 80015d2:	2263      	movs	r2, #99	; 0x63
 80015d4:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <Car_Rotate_Right+0x54>)
 80015d8:	2263      	movs	r2, #99	; 0x63
 80015da:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <Car_Rotate_Right+0x58>)
 80015e0:	f004 f990 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80015e4:	2104      	movs	r1, #4
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <Car_Rotate_Right+0x58>)
 80015e8:	f004 f98c 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80015ec:	2108      	movs	r1, #8
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <Car_Rotate_Right+0x58>)
 80015f0:	f004 f988 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80015f4:	210c      	movs	r1, #12
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <Car_Rotate_Right+0x58>)
 80015f8:	f004 f984 	bl	8005904 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CCW();
 80015fc:	f000 f89e 	bl	800173c <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 8001600:	f000 f8c2 	bl	8001788 <Motor2_Rotate_CCW>
	Motor3_Rotate_CW();
 8001604:	f000 f8d2 	bl	80017ac <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 8001608:	f000 f8f4 	bl	80017f4 <Motor4_Rotate_CW>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40010000 	.word	0x40010000
 8001614:	2000058c 	.word	0x2000058c

08001618 <Car_Rotate_Left>:
void Car_Rotate_Left(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 800161c:	f000 f842 	bl	80016a4 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <Car_Rotate_Left+0x54>)
 8001622:	2263      	movs	r2, #99	; 0x63
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <Car_Rotate_Left+0x54>)
 8001628:	2263      	movs	r2, #99	; 0x63
 800162a:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <Car_Rotate_Left+0x54>)
 800162e:	2263      	movs	r2, #99	; 0x63
 8001630:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <Car_Rotate_Left+0x54>)
 8001634:	2263      	movs	r2, #99	; 0x63
 8001636:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001638:	2100      	movs	r1, #0
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <Car_Rotate_Left+0x58>)
 800163c:	f004 f962 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001640:	2104      	movs	r1, #4
 8001642:	480b      	ldr	r0, [pc, #44]	; (8001670 <Car_Rotate_Left+0x58>)
 8001644:	f004 f95e 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001648:	2108      	movs	r1, #8
 800164a:	4809      	ldr	r0, [pc, #36]	; (8001670 <Car_Rotate_Left+0x58>)
 800164c:	f004 f95a 	bl	8005904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001650:	210c      	movs	r1, #12
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <Car_Rotate_Left+0x58>)
 8001654:	f004 f956 	bl	8005904 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 8001658:	f000 f85c 	bl	8001714 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 800165c:	f000 f882 	bl	8001764 <Motor2_Rotate_CW>
	Motor3_Rotate_CCW();
 8001660:	f000 f8b6 	bl	80017d0 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 8001664:	f000 f8d8 	bl	8001818 <Motor4_Rotate_CCW>

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010000 	.word	0x40010000
 8001670:	2000058c 	.word	0x2000058c

08001674 <Car_Stop>:



}
void Car_Stop(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    /*Stopping the PWM generation on both motors*/
	HAL_TIM_PWM_Stop(Motor1_Timer, Motor1_Channel);
 8001678:	2100      	movs	r1, #0
 800167a:	4809      	ldr	r0, [pc, #36]	; (80016a0 <Car_Stop+0x2c>)
 800167c:	f004 fa0a 	bl	8005a94 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor2_Timer, Motor2_Channel);
 8001680:	2104      	movs	r1, #4
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <Car_Stop+0x2c>)
 8001684:	f004 fa06 	bl	8005a94 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor3_Timer, Motor3_Channel);
 8001688:	2108      	movs	r1, #8
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <Car_Stop+0x2c>)
 800168c:	f004 fa02 	bl	8005a94 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor4_Timer, Motor4_Channel);
 8001690:	210c      	movs	r1, #12
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <Car_Stop+0x2c>)
 8001694:	f004 f9fe 	bl	8005a94 <HAL_TIM_PWM_Stop>
	/*Disabling both motors*/
	Motors_Disabling();
 8001698:	f000 f804 	bl	80016a4 <Motors_Disabling>

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000058c 	.word	0x2000058c

080016a4 <Motors_Disabling>:
static void Motors_Disabling(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port1, IN1, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2110      	movs	r1, #16
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <Motors_Disabling+0x68>)
 80016ae:	f002 fcef 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port2, IN2, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b8:	4815      	ldr	r0, [pc, #84]	; (8001710 <Motors_Disabling+0x6c>)
 80016ba:	f002 fce9 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN3, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <Motors_Disabling+0x68>)
 80016c6:	f002 fce3 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN4, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Motors_Disabling+0x68>)
 80016d2:	f002 fcdd 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN5, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <Motors_Disabling+0x68>)
 80016de:	f002 fcd7 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN6, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <Motors_Disabling+0x68>)
 80016ea:	f002 fcd1 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN7, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <Motors_Disabling+0x68>)
 80016f6:	f002 fccb 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN8, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <Motors_Disabling+0x68>)
 8001702:	f002 fcc5 	bl	8004090 <HAL_GPIO_WritePin>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020800 	.word	0x40020800
 8001710:	40020000 	.word	0x40020000

08001714 <Motor1_Rotate_CW>:

void Motor1_Rotate_CW(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port1,IN1, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2110      	movs	r1, #16
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <Motor1_Rotate_CW+0x20>)
 800171e:	f002 fcb7 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port2,IN2, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <Motor1_Rotate_CW+0x24>)
 800172a:	f002 fcb1 	bl	8004090 <HAL_GPIO_WritePin>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020800 	.word	0x40020800
 8001738:	40020000 	.word	0x40020000

0800173c <Motor1_Rotate_CCW>:
 void Motor1_Rotate_CCW(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port1,IN1, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2110      	movs	r1, #16
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <Motor1_Rotate_CCW+0x20>)
 8001746:	f002 fca3 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port2,IN2, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <Motor1_Rotate_CCW+0x24>)
 8001752:	f002 fc9d 	bl	8004090 <HAL_GPIO_WritePin>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40020800 	.word	0x40020800
 8001760:	40020000 	.word	0x40020000

08001764 <Motor2_Rotate_CW>:
void Motor2_Rotate_CW(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <Motor2_Rotate_CW+0x20>)
 8001770:	f002 fc8e 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <Motor2_Rotate_CW+0x20>)
 800177c:	f002 fc88 	bl	8004090 <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020800 	.word	0x40020800

08001788 <Motor2_Rotate_CCW>:
void Motor2_Rotate_CCW(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <Motor2_Rotate_CCW+0x20>)
 8001794:	f002 fc7c 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179e:	4802      	ldr	r0, [pc, #8]	; (80017a8 <Motor2_Rotate_CCW+0x20>)
 80017a0:	f002 fc76 	bl	8004090 <HAL_GPIO_WritePin>

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020800 	.word	0x40020800

080017ac <Motor3_Rotate_CW>:




 void Motor3_Rotate_CW(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <Motor3_Rotate_CW+0x20>)
 80017b8:	f002 fc6a 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <Motor3_Rotate_CW+0x20>)
 80017c4:	f002 fc64 	bl	8004090 <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020800 	.word	0x40020800

080017d0 <Motor3_Rotate_CCW>:
 void Motor3_Rotate_CCW(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <Motor3_Rotate_CCW+0x20>)
 80017dc:	f002 fc58 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e6:	4802      	ldr	r0, [pc, #8]	; (80017f0 <Motor3_Rotate_CCW+0x20>)
 80017e8:	f002 fc52 	bl	8004090 <HAL_GPIO_WritePin>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020800 	.word	0x40020800

080017f4 <Motor4_Rotate_CW>:



 void Motor4_Rotate_CW(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <Motor4_Rotate_CW+0x20>)
 8001800:	f002 fc46 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <Motor4_Rotate_CW+0x20>)
 800180c:	f002 fc40 	bl	8004090 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020800 	.word	0x40020800

08001818 <Motor4_Rotate_CCW>:
 void Motor4_Rotate_CCW(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <Motor4_Rotate_CCW+0x20>)
 8001824:	f002 fc34 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	4802      	ldr	r0, [pc, #8]	; (8001838 <Motor4_Rotate_CCW+0x20>)
 8001830:	f002 fc2e 	bl	8004090 <HAL_GPIO_WritePin>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020800 	.word	0x40020800

0800183c <GPS_uint8DecodeGGAData>:

/*
 *
 */
uint8_t GPS_uint8DecodeGGAData(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	uint8_t Local_uint8ErrorCode = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]


	if(Wait_for("GGA") == 1)
 8001846:	4827      	ldr	r0, [pc, #156]	; (80018e4 <GPS_uint8DecodeGGAData+0xa8>)
 8001848:	f000 fe74 	bl	8002534 <Wait_for>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d111      	bne.n	8001876 <GPS_uint8DecodeGGAData+0x3a>
	{
		Copy_upto("*", GGA);
 8001852:	4925      	ldr	r1, [pc, #148]	; (80018e8 <GPS_uint8DecodeGGAData+0xac>)
 8001854:	4825      	ldr	r0, [pc, #148]	; (80018ec <GPS_uint8DecodeGGAData+0xb0>)
 8001856:	f000 fded 	bl	8002434 <Copy_upto>
		if(decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0)
 800185a:	4925      	ldr	r1, [pc, #148]	; (80018f0 <GPS_uint8DecodeGGAData+0xb4>)
 800185c:	4822      	ldr	r0, [pc, #136]	; (80018e8 <GPS_uint8DecodeGGAData+0xac>)
 800185e:	f000 f9bf 	bl	8001be0 <decodeGGA>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <GPS_uint8DecodeGGAData+0x34>
		{
			flagGGA = Valid_Data;  //indicate the Data is Valid
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <GPS_uint8DecodeGGAData+0xb8>)
 800186a:	2202      	movs	r2, #2
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e002      	b.n	8001876 <GPS_uint8DecodeGGAData+0x3a>
		}
		else
		{
			flagGGA = unValid_Data; //indicate the Data is InValid
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <GPS_uint8DecodeGGAData+0xb8>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
		}
	}

	if(flagGGA == Valid_Data)
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <GPS_uint8DecodeGGAData+0xb8>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d12a      	bne.n	80018d4 <GPS_uint8DecodeGGAData+0x98>
	{
		Local_uint8ErrorCode = Decode_Success;
 800187e:	2301      	movs	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]

		GPS_Data.Latitude    =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.latitude);
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <GPS_uint8DecodeGGAData+0xb4>)
 8001884:	ed93 7b00 	vldr	d7, [r3]
 8001888:	eeb0 0a47 	vmov.f32	s0, s14
 800188c:	eef0 0a67 	vmov.f32	s1, s15
 8001890:	f000 f834 	bl	80018fc <GPS_doubleLongLat_Calculation>
 8001894:	eeb0 7a40 	vmov.f32	s14, s0
 8001898:	eef0 7a60 	vmov.f32	s15, s1
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <GPS_uint8DecodeGGAData+0xbc>)
 800189e:	ed83 7b00 	vstr	d7, [r3]
		GPS_Data.Longitude   =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.longitude);
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <GPS_uint8DecodeGGAData+0xb4>)
 80018a4:	ed93 7b04 	vldr	d7, [r3, #16]
 80018a8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ac:	eef0 0a67 	vmov.f32	s1, s15
 80018b0:	f000 f824 	bl	80018fc <GPS_doubleLongLat_Calculation>
 80018b4:	eeb0 7a40 	vmov.f32	s14, s0
 80018b8:	eef0 7a60 	vmov.f32	s15, s1
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <GPS_uint8DecodeGGAData+0xbc>)
 80018be:	ed83 7b02 	vstr	d7, [r3, #8]
		GPS_Data.East_West   =    GPS_NMEA_DATA.ggastruct.lcation.EW;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <GPS_uint8DecodeGGAData+0xb4>)
 80018c4:	7e1a      	ldrb	r2, [r3, #24]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <GPS_uint8DecodeGGAData+0xbc>)
 80018c8:	741a      	strb	r2, [r3, #16]
		GPS_Data.North_South =    GPS_NMEA_DATA.ggastruct.lcation.NS;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <GPS_uint8DecodeGGAData+0xb4>)
 80018cc:	7a1a      	ldrb	r2, [r3, #8]
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <GPS_uint8DecodeGGAData+0xbc>)
 80018d0:	745a      	strb	r2, [r3, #17]
 80018d2:	e001      	b.n	80018d8 <GPS_uint8DecodeGGAData+0x9c>

	}
	else
	{
		Local_uint8ErrorCode = Decode_Failed;
 80018d4:	2302      	movs	r3, #2
 80018d6:	71fb      	strb	r3, [r7, #7]


	}

return Local_uint8ErrorCode;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800e5ac 	.word	0x0800e5ac
 80018e8:	200002b0 	.word	0x200002b0
 80018ec:	0800e5b0 	.word	0x0800e5b0
 80018f0:	20000250 	.word	0x20000250
 80018f4:	20000314 	.word	0x20000314
 80018f8:	20000238 	.word	0x20000238

080018fc <GPS_doubleLongLat_Calculation>:


}

double GPS_doubleLongLat_Calculation(double lat)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	ed87 0b00 	vstr	d0, [r7]
	uint8_t intValue ;
	double fraction;
	intValue = lat; //intValue = 31 instead of 31.39049
 8001906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190a:	f7ff f96d 	bl	8000be8 <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
	fraction = lat - intValue; // fraction = 0.39049
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe25 	bl	8000564 <__aeabi_i2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001922:	f7fe fcd1 	bl	80002c8 <__aeabi_dsub>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	fraction = (double) ((fraction * 100.0) / 60.0) ; //fraction = (39.049)/60 = 0.6532
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <GPS_doubleLongLat_Calculation+0x80>)
 8001934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001938:	f7fe fe7e 	bl	8000638 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <GPS_doubleLongLat_Calculation+0x84>)
 800194a:	f7fe ff9f 	bl	800088c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (double) (intValue + fraction); // return value = 31 + 0.6532 = 31.6532
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe03 	bl	8000564 <__aeabi_i2d>
 800195e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001962:	f7fe fcb3 	bl	80002cc <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ec43 2b17 	vmov	d7, r2, r3
}
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	eef0 0a67 	vmov.f32	s1, s15
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40590000 	.word	0x40590000
 8001980:	404e0000 	.word	0x404e0000

08001984 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8001988:	2033      	movs	r0, #51	; 0x33
 800198a:	f000 f829 	bl	80019e0 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 800198e:	2032      	movs	r0, #50	; 0x32
 8001990:	f000 f826 	bl	80019e0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001994:	2032      	movs	r0, #50	; 0x32
 8001996:	f002 f84f 	bl	8003a38 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f000 f820 	bl	80019e0 <LCD_voidSendCommand>
	HAL_Delay(50);
 80019a0:	2032      	movs	r0, #50	; 0x32
 80019a2:	f002 f849 	bl	8003a38 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 f81a 	bl	80019e0 <LCD_voidSendCommand>
	HAL_Delay(50);
 80019ac:	2032      	movs	r0, #50	; 0x32
 80019ae:	f002 f843 	bl	8003a38 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 80019b2:	2006      	movs	r0, #6
 80019b4:	f000 f814 	bl	80019e0 <LCD_voidSendCommand>
	HAL_Delay(50);
 80019b8:	2032      	movs	r0, #50	; 0x32
 80019ba:	f002 f83d 	bl	8003a38 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 80019be:	200c      	movs	r0, #12
 80019c0:	f000 f80e 	bl	80019e0 <LCD_voidSendCommand>
	HAL_Delay(50);
 80019c4:	2032      	movs	r0, #50	; 0x32
 80019c6:	f002 f837 	bl	8003a38 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 80019ca:	2002      	movs	r0, #2
 80019cc:	f000 f808 	bl	80019e0 <LCD_voidSendCommand>
	HAL_Delay(50);
 80019d0:	2032      	movs	r0, #50	; 0x32
 80019d2:	f002 f831 	bl	8003a38 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 80019d6:	2080      	movs	r0, #128	; 0x80
 80019d8:	f000 f802 	bl	80019e0 <LCD_voidSendCommand>

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f023 030f 	bic.w	r3, r3, #15
 80019f0:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f043 030c 	orr.w	r3, r3, #12
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	f043 030c 	orr.w	r3, r3, #12
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001a20:	f107 0208 	add.w	r2, r7, #8
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2304      	movs	r3, #4
 8001a2a:	214e      	movs	r1, #78	; 0x4e
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <LCD_voidSendCommand+0x5c>)
 8001a2e:	f002 fc8d 	bl	800434c <HAL_I2C_Master_Transmit>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000538 	.word	0x20000538

08001a40 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f023 030f 	bic.w	r3, r3, #15
 8001a50:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	f043 030d 	orr.w	r3, r3, #13
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f043 0309 	orr.w	r3, r3, #9
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	f043 030d 	orr.w	r3, r3, #13
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	f043 0309 	orr.w	r3, r3, #9
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	2364      	movs	r3, #100	; 0x64
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2304      	movs	r3, #4
 8001a8a:	214e      	movs	r1, #78	; 0x4e
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <LCD_voidSendCharachter+0x5c>)
 8001a8e:	f002 fc5d 	bl	800434c <HAL_I2C_Master_Transmit>

}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000538 	.word	0x20000538

08001aa0 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001aac:	e009      	b.n	8001ac2 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ffc2 	bl	8001a40 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ef      	bne.n	8001aae <LCD_voidSendString+0xe>
	}


}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d82d      	bhi.n	8001b4e <LCD_voidSetPositionXY+0x76>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <LCD_voidSetPositionXY+0x20>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b13 	.word	0x08001b13
 8001b00:	08001b27 	.word	0x08001b27
 8001b04:	08001b3b 	.word	0x08001b3b
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b10:	e01d      	b.n	8001b4e <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	b25a      	sxtb	r2, r3
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	73fb      	strb	r3, [r7, #15]
		break;
 8001b24:	e013      	b.n	8001b4e <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	73fb      	strb	r3, [r7, #15]
		break;
 8001b38:	e009      	b.n	8001b4e <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	3354      	adds	r3, #84	; 0x54
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	73fb      	strb	r3, [r7, #15]
		break;
 8001b4c:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff45 	bl	80019e0 <LCD_voidSendCommand>
		HAL_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f001 ff6e 	bl	8003a38 <HAL_Delay>

}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	/*Clearing the display by command 0b00000001*/
	LCD_voidSendCommand(0b00000001);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff ff39 	bl	80019e0 <LCD_voidSendCommand>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	70fb      	strb	r3, [r7, #3]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70bb      	strb	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	3340      	adds	r3, #64	; 0x40
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff21 	bl	80019e0 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e009      	b.n	8001bb8 <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff47 	bl	8001a40 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b07      	cmp	r3, #7
 8001bbc:	d9f2      	bls.n	8001ba4 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001bbe:	787a      	ldrb	r2, [r7, #1]
 8001bc0:	78bb      	ldrb	r3, [r7, #2]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff87 	bl	8001ad8 <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff37 	bl	8001a40 <LCD_voidSendCharachter>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	0000      	movs	r0, r0
 8001bdc:	0000      	movs	r0, r0
	...

08001be0 <decodeGGA>:
 GGAbuffer is the buffer which stores the GGA Data
 GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 Returns 0 on success
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001be4:	b08e      	sub	sp, #56	; 0x38
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001bec:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <decodeGGA+0x17c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8001bf6:	e004      	b.n	8001c02 <decodeGGA+0x22>
		inx++;  // 1st ','
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <decodeGGA+0x17c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a57      	ldr	r2, [pc, #348]	; (8001d5c <decodeGGA+0x17c>)
 8001c00:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c02:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <decodeGGA+0x17c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c10:	d1f2      	bne.n	8001bf8 <decodeGGA+0x18>
	inx++;
 8001c12:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <decodeGGA+0x17c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <decodeGGA+0x17c>)
 8001c1a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c1c:	e004      	b.n	8001c28 <decodeGGA+0x48>
		inx++;  // After time ','
 8001c1e:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <decodeGGA+0x17c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <decodeGGA+0x17c>)
 8001c26:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c28:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <decodeGGA+0x17c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b2c      	cmp	r3, #44	; 0x2c
 8001c36:	d1f2      	bne.n	8001c1e <decodeGGA+0x3e>
	inx++;
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <decodeGGA+0x17c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <decodeGGA+0x17c>)
 8001c40:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c42:	e004      	b.n	8001c4e <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8001c44:	4b45      	ldr	r3, [pc, #276]	; (8001d5c <decodeGGA+0x17c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4a44      	ldr	r2, [pc, #272]	; (8001d5c <decodeGGA+0x17c>)
 8001c4c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <decodeGGA+0x17c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b2c      	cmp	r3, #44	; 0x2c
 8001c5c:	d1f2      	bne.n	8001c44 <decodeGGA+0x64>
	inx++;
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <decodeGGA+0x17c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	4a3d      	ldr	r2, [pc, #244]	; (8001d5c <decodeGGA+0x17c>)
 8001c66:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c68:	e004      	b.n	8001c74 <decodeGGA+0x94>
		inx++;  // after NS ','
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	; (8001d5c <decodeGGA+0x17c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <decodeGGA+0x17c>)
 8001c72:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <decodeGGA+0x17c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b2c      	cmp	r3, #44	; 0x2c
 8001c82:	d1f2      	bne.n	8001c6a <decodeGGA+0x8a>
	inx++;
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <decodeGGA+0x17c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a34      	ldr	r2, [pc, #208]	; (8001d5c <decodeGGA+0x17c>)
 8001c8c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c8e:	e004      	b.n	8001c9a <decodeGGA+0xba>
		inx++;  // after longitude ','
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <decodeGGA+0x17c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a31      	ldr	r2, [pc, #196]	; (8001d5c <decodeGGA+0x17c>)
 8001c98:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <decodeGGA+0x17c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca8:	d1f2      	bne.n	8001c90 <decodeGGA+0xb0>
	inx++;
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <decodeGGA+0x17c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <decodeGGA+0x17c>)
 8001cb2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cb4:	e004      	b.n	8001cc0 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <decodeGGA+0x17c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <decodeGGA+0x17c>)
 8001cbe:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <decodeGGA+0x17c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b2c      	cmp	r3, #44	; 0x2c
 8001cce:	d1f2      	bne.n	8001cb6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <decodeGGA+0x17c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <decodeGGA+0x17c>)
 8001cd8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <decodeGGA+0x17c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b31      	cmp	r3, #49	; 0x31
 8001ce8:	d00f      	beq.n	8001d0a <decodeGGA+0x12a>
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <decodeGGA+0x17c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b32      	cmp	r3, #50	; 0x32
 8001cf8:	d007      	beq.n	8001d0a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <decodeGGA+0x17c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b36      	cmp	r3, #54	; 0x36
 8001d08:	d106      	bne.n	8001d18 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <decodeGGA+0x17c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8001d16:	e009      	b.n	8001d2c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
		return 1;  // return error
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e2f3      	b.n	800230a <decodeGGA+0x72a>
		inx++;  // 1st ','
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <decodeGGA+0x17c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <decodeGGA+0x17c>)
 8001d2a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <decodeGGA+0x17c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b2c      	cmp	r3, #44	; 0x2c
 8001d3a:	d1f2      	bne.n	8001d22 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
	//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <decodeGGA+0x17c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <decodeGGA+0x17c>)
 8001d44:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f009 fb3b 	bl	800b3ca <memset>
	i = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001d58:	e016      	b.n	8001d88 <decodeGGA+0x1a8>
 8001d5a:	bf00      	nop
 8001d5c:	20000318 	.word	0x20000318
	{
		buffer[i] = GGAbuffer[inx];
 8001d60:	4ba9      	ldr	r3, [pc, #676]	; (8002008 <decodeGGA+0x428>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	7819      	ldrb	r1, [r3, #0]
 8001d6c:	f107 020c 	add.w	r2, r7, #12
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	4413      	add	r3, r2
 8001d74:	460a      	mov	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
		i++;
 8001d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001d7e:	4ba2      	ldr	r3, [pc, #648]	; (8002008 <decodeGGA+0x428>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	4aa0      	ldr	r2, [pc, #640]	; (8002008 <decodeGGA+0x428>)
 8001d86:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001d88:	4b9f      	ldr	r3, [pc, #636]	; (8002008 <decodeGGA+0x428>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b2c      	cmp	r3, #44	; 0x2c
 8001d96:	d1e3      	bne.n	8001d60 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f008 fce5 	bl	800a76c <atoi>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a99      	ldr	r2, [pc, #612]	; (800200c <decodeGGA+0x42c>)
 8001da6:	fb82 1203 	smull	r1, r2, r2, r3
 8001daa:	1312      	asrs	r2, r2, #12
 8001dac:	17db      	asrs	r3, r3, #31
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	4b97      	ldr	r3, [pc, #604]	; (8002010 <decodeGGA+0x430>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4997      	ldr	r1, [pc, #604]	; (8002014 <decodeGGA+0x434>)
 8001db6:	fb81 0103 	smull	r0, r1, r1, r3
 8001dba:	1149      	asrs	r1, r1, #5
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a95      	ldr	r2, [pc, #596]	; (8002018 <decodeGGA+0x438>)
 8001dc4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f008 fcce 	bl	800a76c <atoi>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a90      	ldr	r2, [pc, #576]	; (8002014 <decodeGGA+0x434>)
 8001dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd8:	1152      	asrs	r2, r2, #5
 8001dda:	17db      	asrs	r3, r3, #31
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	4a8d      	ldr	r2, [pc, #564]	; (8002014 <decodeGGA+0x434>)
 8001de0:	fb82 1203 	smull	r1, r2, r2, r3
 8001de4:	1151      	asrs	r1, r2, #5
 8001de6:	17da      	asrs	r2, r3, #31
 8001de8:	1a8a      	subs	r2, r1, r2
 8001dea:	2164      	movs	r1, #100	; 0x64
 8001dec:	fb01 f202 	mul.w	r2, r1, r2
 8001df0:	1a9a      	subs	r2, r3, r2
 8001df2:	4b87      	ldr	r3, [pc, #540]	; (8002010 <decodeGGA+0x430>)
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	4b87      	ldr	r3, [pc, #540]	; (8002014 <decodeGGA+0x434>)
 8001df8:	fb83 0301 	smull	r0, r3, r3, r1
 8001dfc:	1158      	asrs	r0, r3, #5
 8001dfe:	17cb      	asrs	r3, r1, #31
 8001e00:	1ac3      	subs	r3, r0, r3
 8001e02:	2064      	movs	r0, #100	; 0x64
 8001e04:	fb00 f303 	mul.w	r3, r0, r3
 8001e08:	1acb      	subs	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a83      	ldr	r2, [pc, #524]	; (800201c <decodeGGA+0x43c>)
 8001e0e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8001e10:	4b82      	ldr	r3, [pc, #520]	; (800201c <decodeGGA+0x43c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b3b      	cmp	r3, #59	; 0x3b
 8001e16:	dd09      	ble.n	8001e2c <decodeGGA+0x24c>
		min = min - 60;
 8001e18:	4b80      	ldr	r3, [pc, #512]	; (800201c <decodeGGA+0x43c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3b3c      	subs	r3, #60	; 0x3c
 8001e1e:	4a7f      	ldr	r2, [pc, #508]	; (800201c <decodeGGA+0x43c>)
 8001e20:	6013      	str	r3, [r2, #0]
		hr++;
 8001e22:	4b7d      	ldr	r3, [pc, #500]	; (8002018 <decodeGGA+0x438>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a7b      	ldr	r2, [pc, #492]	; (8002018 <decodeGGA+0x438>)
 8001e2a:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8001e2c:	4b7a      	ldr	r3, [pc, #488]	; (8002018 <decodeGGA+0x438>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da09      	bge.n	8001e48 <decodeGGA+0x268>
		hr = 24 + hr;
 8001e34:	4b78      	ldr	r3, [pc, #480]	; (8002018 <decodeGGA+0x438>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	4a77      	ldr	r2, [pc, #476]	; (8002018 <decodeGGA+0x438>)
 8001e3c:	6013      	str	r3, [r2, #0]
		daychange--;
 8001e3e:	4b78      	ldr	r3, [pc, #480]	; (8002020 <decodeGGA+0x440>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	4a76      	ldr	r2, [pc, #472]	; (8002020 <decodeGGA+0x440>)
 8001e46:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8001e48:	4b73      	ldr	r3, [pc, #460]	; (8002018 <decodeGGA+0x438>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b17      	cmp	r3, #23
 8001e4e:	dd09      	ble.n	8001e64 <decodeGGA+0x284>
		hr = hr - 24;
 8001e50:	4b71      	ldr	r3, [pc, #452]	; (8002018 <decodeGGA+0x438>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3b18      	subs	r3, #24
 8001e56:	4a70      	ldr	r2, [pc, #448]	; (8002018 <decodeGGA+0x438>)
 8001e58:	6013      	str	r3, [r2, #0]
		daychange++;
 8001e5a:	4b71      	ldr	r3, [pc, #452]	; (8002020 <decodeGGA+0x440>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a6f      	ldr	r2, [pc, #444]	; (8002020 <decodeGGA+0x440>)
 8001e62:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001e64:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <decodeGGA+0x438>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	621a      	str	r2, [r3, #32]
	gga->tim.min = min;
 8001e6c:	4b6b      	ldr	r3, [pc, #428]	; (800201c <decodeGGA+0x43c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
	gga->tim.sec = atoi(buffer) % 100;
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f008 fc77 	bl	800a76c <atoi>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <decodeGGA+0x434>)
 8001e82:	fb83 1302 	smull	r1, r3, r3, r2
 8001e86:	1159      	asrs	r1, r3, #5
 8001e88:	17d3      	asrs	r3, r2, #31
 8001e8a:	1acb      	subs	r3, r1, r3
 8001e8c:	2164      	movs	r1, #100	; 0x64
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6293      	str	r3, [r2, #40]	; 0x28

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001e98:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <decodeGGA+0x428>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a5a      	ldr	r2, [pc, #360]	; (8002008 <decodeGGA+0x428>)
 8001ea0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f009 fa8d 	bl	800b3ca <memset>
	i = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001eb4:	e013      	b.n	8001ede <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <decodeGGA+0x428>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	7819      	ldrb	r1, [r3, #0]
 8001ec2:	f107 020c 	add.w	r2, r7, #12
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	4413      	add	r3, r2
 8001eca:	460a      	mov	r2, r1
 8001ecc:	701a      	strb	r2, [r3, #0]
		i++;
 8001ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <decodeGGA+0x428>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <decodeGGA+0x428>)
 8001edc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001ede:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <decodeGGA+0x428>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b2c      	cmp	r3, #44	; 0x2c
 8001eec:	d1e3      	bne.n	8001eb6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe f9dc 	bl	80002b0 <strlen>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	d801      	bhi.n	8001f02 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 8001efe:	2302      	movs	r3, #2
 8001f00:	e203      	b.n	800230a <decodeGGA+0x72a>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	4618      	mov	r0, r3
 8001f08:	f008 fc30 	bl	800a76c <atoi>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001f14:	e002      	b.n	8001f1c <decodeGGA+0x33c>
		j++;   // Figure out how many digits before the decimal
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	3301      	adds	r3, #1
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001f1c:	f107 020c 	add.w	r2, r7, #12
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b2e      	cmp	r3, #46	; 0x2e
 8001f28:	d1f5      	bne.n	8001f16 <decodeGGA+0x336>
	j++;
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f9bb 	bl	80002b0 <strlen>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	f107 020c 	add.w	r2, r7, #12
 8001f48:	4413      	add	r3, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f008 fc0e 	bl	800a76c <atoi>
 8001f50:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8001f52:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fb04 	bl	8000564 <__aeabi_i2d>
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <decodeGGA+0x444>)
 8001f62:	f7fe fc93 	bl	800088c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f70:	f7fe faf8 	bl	8000564 <__aeabi_i2d>
 8001f74:	4604      	mov	r4, r0
 8001f76:	460d      	mov	r5, r1
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe faf1 	bl	8000564 <__aeabi_i2d>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	ec43 2b11 	vmov	d1, r2, r3
 8001f8a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002000 <decodeGGA+0x420>
 8001f8e:	f00b fb6f 	bl	800d670 <pow>
 8001f92:	ec53 2b10 	vmov	r2, r3, d0
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe fc77 	bl	800088c <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4640      	mov	r0, r8
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	f7fe f991 	bl	80002cc <__adddf3>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001fb2:	6839      	ldr	r1, [r7, #0]
 8001fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb8:	e9c1 2300 	strd	r2, r3, [r1]
	inx++;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <decodeGGA+0x428>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <decodeGGA+0x428>)
 8001fc4:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <decodeGGA+0x428>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <decodeGGA+0x428>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <decodeGGA+0x428>)
 8001fde:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <decodeGGA+0x428>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <decodeGGA+0x428>)
 8001fe8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	220c      	movs	r2, #12
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f009 f9e9 	bl	800b3ca <memset>
	i = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8001ffc:	e028      	b.n	8002050 <decodeGGA+0x470>
 8001ffe:	bf00      	nop
 8002000:	00000000 	.word	0x00000000
 8002004:	40240000 	.word	0x40240000
 8002008:	20000318 	.word	0x20000318
 800200c:	68db8bad 	.word	0x68db8bad
 8002010:	20000000 	.word	0x20000000
 8002014:	51eb851f 	.word	0x51eb851f
 8002018:	2000031c 	.word	0x2000031c
 800201c:	20000320 	.word	0x20000320
 8002020:	20000324 	.word	0x20000324
 8002024:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8002028:	4b89      	ldr	r3, [pc, #548]	; (8002250 <decodeGGA+0x670>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	7819      	ldrb	r1, [r3, #0]
 8002034:	f107 020c 	add.w	r2, r7, #12
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	4413      	add	r3, r2
 800203c:	460a      	mov	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
		i++;
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	3301      	adds	r3, #1
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8002046:	4b82      	ldr	r3, [pc, #520]	; (8002250 <decodeGGA+0x670>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	4a80      	ldr	r2, [pc, #512]	; (8002250 <decodeGGA+0x670>)
 800204e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8002050:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <decodeGGA+0x670>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2c      	cmp	r3, #44	; 0x2c
 800205e:	d1e3      	bne.n	8002028 <decodeGGA+0x448>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4618      	mov	r0, r3
 8002066:	f008 fb81 	bl	800a76c <atoi>
 800206a:	4603      	mov	r3, r0
 800206c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002072:	e002      	b.n	800207a <decodeGGA+0x49a>
		j++;  // Figure out how many digits before the decimal
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	3301      	adds	r3, #1
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800207a:	f107 020c 	add.w	r2, r7, #12
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b2e      	cmp	r3, #46	; 0x2e
 8002086:	d1f5      	bne.n	8002074 <decodeGGA+0x494>
	j++;
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	3301      	adds	r3, #1
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f90c 	bl	80002b0 <strlen>
 8002098:	4602      	mov	r2, r0
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	f107 020c 	add.w	r2, r7, #12
 80020a6:	4413      	add	r3, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f008 fb5f 	bl	800a76c <atoi>
 80020ae:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80020b0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa55 	bl	8000564 <__aeabi_i2d>
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <decodeGGA+0x674>)
 80020c0:	f7fe fbe4 	bl	800088c <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4690      	mov	r8, r2
 80020ca:	4699      	mov	r9, r3
 80020cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ce:	f7fe fa49 	bl	8000564 <__aeabi_i2d>
 80020d2:	4604      	mov	r4, r0
 80020d4:	460d      	mov	r5, r1
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	3302      	adds	r3, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa42 	bl	8000564 <__aeabi_i2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	ec43 2b11 	vmov	d1, r2, r3
 80020e8:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8002248 <decodeGGA+0x668>
 80020ec:	f00b fac0 	bl	800d670 <pow>
 80020f0:	ec53 2b10 	vmov	r2, r3, d0
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	f7fe fbc8 	bl	800088c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4640      	mov	r0, r8
 8002102:	4649      	mov	r1, r9
 8002104:	f7fe f8e2 	bl	80002cc <__adddf3>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002116:	e9c1 2304 	strd	r2, r3, [r1, #16]
	inx++;
 800211a:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <decodeGGA+0x670>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a4b      	ldr	r2, [pc, #300]	; (8002250 <decodeGGA+0x670>)
 8002122:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <decodeGGA+0x670>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	761a      	strb	r2, [r3, #24]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <decodeGGA+0x670>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a45      	ldr	r2, [pc, #276]	; (8002250 <decodeGGA+0x670>)
 800213c:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800213e:	4b44      	ldr	r3, [pc, #272]	; (8002250 <decodeGGA+0x670>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a42      	ldr	r2, [pc, #264]	; (8002250 <decodeGGA+0x670>)
 8002146:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8002148:	4b41      	ldr	r3, [pc, #260]	; (8002250 <decodeGGA+0x670>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	4a40      	ldr	r2, [pc, #256]	; (8002250 <decodeGGA+0x670>)
 8002150:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <decodeGGA+0x670>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a3d      	ldr	r2, [pc, #244]	; (8002250 <decodeGGA+0x670>)
 800215a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	220c      	movs	r2, #12
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f009 f930 	bl	800b3ca <memset>
	i = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 800216e:	e013      	b.n	8002198 <decodeGGA+0x5b8>
	{
		buffer[i] = GGAbuffer[inx];
 8002170:	4b37      	ldr	r3, [pc, #220]	; (8002250 <decodeGGA+0x670>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	f107 020c 	add.w	r2, r7, #12
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	4413      	add	r3, r2
 8002184:	460a      	mov	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
		i++;
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	3301      	adds	r3, #1
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <decodeGGA+0x670>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <decodeGGA+0x670>)
 8002196:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <decodeGGA+0x670>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b2c      	cmp	r3, #44	; 0x2c
 80021a6:	d1e3      	bne.n	8002170 <decodeGGA+0x590>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4618      	mov	r0, r3
 80021ae:	f008 fadd 	bl	800a76c <atoi>
 80021b2:	4602      	mov	r2, r0
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <decodeGGA+0x670>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a24      	ldr	r2, [pc, #144]	; (8002250 <decodeGGA+0x670>)
 80021c0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021c2:	e004      	b.n	80021ce <decodeGGA+0x5ee>
		inx++;
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <decodeGGA+0x670>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a21      	ldr	r2, [pc, #132]	; (8002250 <decodeGGA+0x670>)
 80021cc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <decodeGGA+0x670>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b2c      	cmp	r3, #44	; 0x2c
 80021dc:	d1f2      	bne.n	80021c4 <decodeGGA+0x5e4>

	/*************** Altitude calculation ********************/
	inx++;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <decodeGGA+0x670>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <decodeGGA+0x670>)
 80021e6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	220c      	movs	r2, #12
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f009 f8ea 	bl	800b3ca <memset>
	i = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 80021fa:	e013      	b.n	8002224 <decodeGGA+0x644>
		buffer[i] = GGAbuffer[inx];
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <decodeGGA+0x670>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	7819      	ldrb	r1, [r3, #0]
 8002208:	f107 020c 	add.w	r2, r7, #12
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	4413      	add	r3, r2
 8002210:	460a      	mov	r2, r1
 8002212:	701a      	strb	r2, [r3, #0]
		i++;
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3301      	adds	r3, #1
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <decodeGGA+0x670>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <decodeGGA+0x670>)
 8002222:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <decodeGGA+0x670>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b2c      	cmp	r3, #44	; 0x2c
 8002232:	d1e3      	bne.n	80021fc <decodeGGA+0x61c>
	}
	num = (atoi(buffer));
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4618      	mov	r0, r3
 800223a:	f008 fa97 	bl	800a76c <atoi>
 800223e:	4603      	mov	r3, r0
 8002240:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002246:	e00a      	b.n	800225e <decodeGGA+0x67e>
 8002248:	00000000 	.word	0x00000000
 800224c:	40240000 	.word	0x40240000
 8002250:	20000318 	.word	0x20000318
 8002254:	40590000 	.word	0x40590000
		j++;
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	3301      	adds	r3, #1
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b2e      	cmp	r3, #46	; 0x2e
 800226a:	d1f5      	bne.n	8002258 <decodeGGA+0x678>
	j++;
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	3301      	adds	r3, #1
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f81a 	bl	80002b0 <strlen>
 800227c:	4602      	mov	r2, r0
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	4413      	add	r3, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f008 fa6d 	bl	800a76c <atoi>
 8002292:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 8002294:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f963 	bl	8000564 <__aeabi_i2d>
 800229e:	4604      	mov	r4, r0
 80022a0:	460d      	mov	r5, r1
 80022a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022a4:	f7fe f95e 	bl	8000564 <__aeabi_i2d>
 80022a8:	4680      	mov	r8, r0
 80022aa:	4689      	mov	r9, r1
 80022ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ae:	f7fe f959 	bl	8000564 <__aeabi_i2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	ec43 2b11 	vmov	d1, r2, r3
 80022ba:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002318 <decodeGGA+0x738>
 80022be:	f00b f9d7 	bl	800d670 <pow>
 80022c2:	ec53 2b10 	vmov	r2, r3, d0
 80022c6:	4640      	mov	r0, r8
 80022c8:	4649      	mov	r1, r9
 80022ca:	f7fe fadf 	bl	800088c <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4620      	mov	r0, r4
 80022d4:	4629      	mov	r1, r5
 80022d6:	f7fd fff9 	bl	80002cc <__adddf3>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	inx++;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <decodeGGA+0x740>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <decodeGGA+0x740>)
 80022f4:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <decodeGGA+0x740>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return 0;
 8002308:	2300      	movs	r3, #0

}
 800230a:	4618      	mov	r0, r3
 800230c:	3738      	adds	r7, #56	; 0x38
 800230e:	46bd      	mov	sp, r7
 8002310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002314:	f3af 8000 	nop.w
 8002318:	00000000 	.word	0x00000000
 800231c:	40240000 	.word	0x40240000
 8002320:	20000318 	.word	0x20000318

08002324 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	d009      	beq.n	800235e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	79f9      	ldrb	r1, [r7, #7]
 8002354:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <Uart_read+0x54>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <Uart_read+0x54>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002382:	429a      	cmp	r2, r3
 8002384:	d102      	bne.n	800238c <Uart_read+0x20>
  {
    return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e013      	b.n	80023b4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <Uart_read+0x54>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <Uart_read+0x54>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <Uart_read+0x54>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <Uart_read+0x54>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	20000534 	.word	0x20000534

080023c4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <IsDataAvailable+0x30>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <IsDataAvailable+0x30>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023da:	b29b      	uxth	r3, r3
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20000534 	.word	0x20000534

080023f8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <Uart_peek+0x38>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <Uart_peek+0x38>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800240c:	429a      	cmp	r2, r3
 800240e:	d102      	bne.n	8002416 <Uart_peek+0x1e>
  {
    return -1;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
 8002414:	e006      	b.n	8002424 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <Uart_peek+0x38>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <Uart_peek+0x38>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002422:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000534 	.word	0x20000534

08002434 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fd ff34 	bl	80002b0 <strlen>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002450:	e01e      	b.n	8002490 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <Copy_upto+0xf8>)
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	4b35      	ldr	r3, [pc, #212]	; (800252c <Copy_upto+0xf8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6838      	ldr	r0, [r7, #0]
 8002462:	4403      	add	r3, r0
 8002464:	5c8a      	ldrb	r2, [r1, r2]
 8002466:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <Copy_upto+0xf8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <Copy_upto+0xf8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	3301      	adds	r3, #1
 8002482:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002484:	bf00      	nop
 8002486:	f7ff ff9d 	bl	80023c4 <IsDataAvailable>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0fa      	beq.n	8002486 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002490:	f7ff ffb2 	bl	80023f8 <Uart_peek>
 8002494:	4601      	mov	r1, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4299      	cmp	r1, r3
 80024a0:	d1d7      	bne.n	8002452 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80024a2:	e027      	b.n	80024f4 <Copy_upto+0xc0>
	{
		so_far++;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80024aa:	f7ff ff5f 	bl	800236c <Uart_read>
 80024ae:	4601      	mov	r1, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	613a      	str	r2, [r7, #16]
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d101      	bne.n	80024cc <Copy_upto+0x98>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e02a      	b.n	8002522 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <Copy_upto+0xfc>)
 80024ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024d2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80024d4:	bf00      	nop
 80024d6:	f7ff ff75 	bl	80023c4 <IsDataAvailable>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <Copy_upto+0xb4>
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <Copy_upto+0xfc>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f6      	bne.n	80024d6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <Copy_upto+0xfc>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <Copy_upto+0xc0>
 80024f0:	2300      	movs	r3, #0
 80024f2:	e016      	b.n	8002522 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80024f4:	f7ff ff80 	bl	80023f8 <Uart_peek>
 80024f8:	4601      	mov	r1, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4299      	cmp	r1, r3
 8002504:	d0ce      	beq.n	80024a4 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	429a      	cmp	r2, r3
 800250c:	d002      	beq.n	8002514 <Copy_upto+0xe0>
	{
		so_far = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
		goto again;
 8002512:	e79d      	b.n	8002450 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d101      	bne.n	8002520 <Copy_upto+0xec>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <Copy_upto+0xee>
	else return 0;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000534 	.word	0x20000534
 8002530:	20000328 	.word	0x20000328

08002534 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7fd feb5 	bl	80002b0 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800254a:	4b3c      	ldr	r3, [pc, #240]	; (800263c <Wait_for+0x108>)
 800254c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002550:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002552:	bf00      	nop
 8002554:	f7ff ff36 	bl	80023c4 <IsDataAvailable>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <Wait_for+0x32>
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <Wait_for+0x108>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f6      	bne.n	8002554 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002566:	4b35      	ldr	r3, [pc, #212]	; (800263c <Wait_for+0x108>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <Wait_for+0x6e>
 800256e:	2300      	movs	r3, #0
 8002570:	e060      	b.n	8002634 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <Wait_for+0x10c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <Wait_for+0x10c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002582:	429a      	cmp	r2, r3
 8002584:	d00b      	beq.n	800259e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <Wait_for+0x10c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <Wait_for+0x10c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800259c:	e001      	b.n	80025a2 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	e048      	b.n	8002634 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80025a2:	f7ff ff29 	bl	80023f8 <Uart_peek>
 80025a6:	4601      	mov	r1, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4299      	cmp	r1, r3
 80025b2:	d1de      	bne.n	8002572 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80025b4:	e027      	b.n	8002606 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <Wait_for+0x10c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <Wait_for+0x10c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d101      	bne.n	80025de <Wait_for+0xaa>
 80025da:	2301      	movs	r3, #1
 80025dc:	e02a      	b.n	8002634 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <Wait_for+0x108>)
 80025e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025e4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80025e6:	bf00      	nop
 80025e8:	f7ff feec 	bl	80023c4 <IsDataAvailable>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <Wait_for+0xc6>
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <Wait_for+0x108>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f6      	bne.n	80025e8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <Wait_for+0x108>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <Wait_for+0xd2>
 8002602:	2300      	movs	r3, #0
 8002604:	e016      	b.n	8002634 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002606:	f7ff fef7 	bl	80023f8 <Uart_peek>
 800260a:	4601      	mov	r1, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4299      	cmp	r1, r3
 8002616:	d0ce      	beq.n	80025b6 <Wait_for+0x82>
	}

	if (so_far != len)
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	d002      	beq.n	8002626 <Wait_for+0xf2>
	{
		so_far = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
		goto again;
 8002624:	e791      	b.n	800254a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d101      	bne.n	8002632 <Wait_for+0xfe>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <Wait_for+0x100>
	else return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000328 	.word	0x20000328
 8002640:	20000534 	.word	0x20000534

08002644 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d013      	beq.n	800268e <Uart_isr+0x4a>
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <Uart_isr+0xb4>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe4c 	bl	8002324 <store_char>
        return;
 800268c:	e031      	b.n	80026f2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02c      	beq.n	80026f2 <Uart_isr+0xae>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d027      	beq.n	80026f2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <Uart_isr+0xb8>)
 80026a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <Uart_isr+0xb8>)
 80026aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d108      	bne.n	80026c4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80026c2:	e015      	b.n	80026f0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <Uart_isr+0xb8>)
 80026c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <Uart_isr+0xb8>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <Uart_isr+0xb8>)
 80026d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <Uart_isr+0xb8>)
 80026de:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	7bba      	ldrb	r2, [r7, #14]
 80026ee:	605a      	str	r2, [r3, #4]
    	return;
 80026f0:	bf00      	nop
    }
}
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000534 	.word	0x20000534
 80026fc:	2000032c 	.word	0x2000032c

08002700 <Hard_Brake_Warning>:




void Hard_Brake_Warning(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	Buzzer_voidHighSound();
 8002704:	f7fe fe3a 	bl	800137c <Buzzer_voidHighSound>
	/*Show a Warning Sign to The Driver*/
	LCD_Print_WarningSign();
 8002708:	f000 f814 	bl	8002734 <LCD_Print_WarningSign>

	/*Show a Warning Message To The Driver*/
	LCD_voidSetPositionXY(1,0);
 800270c:	2100      	movs	r1, #0
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff f9e2 	bl	8001ad8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Brake");
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <Hard_Brake_Warning+0x2c>)
 8002716:	f7ff f9c3 	bl	8001aa0 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 800271a:	2100      	movs	r1, #0
 800271c:	2002      	movs	r0, #2
 800271e:	f7ff f9db 	bl	8001ad8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Fast!!!");
 8002722:	4803      	ldr	r0, [pc, #12]	; (8002730 <Hard_Brake_Warning+0x30>)
 8002724:	f7ff f9bc 	bl	8001aa0 <LCD_voidSendString>

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	0800e5f0 	.word	0x0800e5f0
 8002730:	0800e5f8 	.word	0x0800e5f8

08002734 <LCD_Print_WarningSign>:




static void LCD_Print_WarningSign(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	; 0x50
 8002738:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 800273a:	4a40      	ldr	r2, [pc, #256]	; (800283c <LCD_Print_WarningSign+0x108>)
 800273c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002744:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001110,
			0b00001110,
			0b00001110
	};

	uint8_t LCD_R1_C17_Array[8] =
 8002748:	4a3d      	ldr	r2, [pc, #244]	; (8002840 <LCD_Print_WarningSign+0x10c>)
 800274a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800274e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002752:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00000001
	};
	uint8_t LCD_R1_C15_Array[8] =
 8002756:	4a3b      	ldr	r2, [pc, #236]	; (8002844 <LCD_Print_WarningSign+0x110>)
 8002758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002760:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000100,
			0b00001000,
			0b00010000
	};

	uint8_t LCD_R2_C14_Array[8] =
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <LCD_Print_WarningSign+0x114>)
 8002766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <LCD_Print_WarningSign+0x118>)
 8002774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 8002780:	4a33      	ldr	r2, [pc, #204]	; (8002850 <LCD_Print_WarningSign+0x11c>)
 8002782:	f107 0320 	add.w	r3, r7, #32
 8002786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800278a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000001,
			0b00000010,
			0b00000100,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 800278e:	4a31      	ldr	r2, [pc, #196]	; (8002854 <LCD_Print_WarningSign+0x120>)
 8002790:	f107 0318 	add.w	r3, r7, #24
 8002794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002798:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 800279c:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <LCD_Print_WarningSign+0x124>)
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a6:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 80027aa:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <LCD_Print_WarningSign+0x124>)
 80027ac:	f107 0308 	add.w	r3, r7, #8
 80027b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 80027b8:	4a28      	ldr	r2, [pc, #160]	; (800285c <LCD_Print_WarningSign+0x128>)
 80027ba:	463b      	mov	r3, r7
 80027bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00011111
	};


	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 80027c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80027c8:	230f      	movs	r3, #15
 80027ca:	2201      	movs	r2, #1
 80027cc:	2100      	movs	r1, #0
 80027ce:	f7ff f9d0 	bl	8001b72 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 1, 1, 16);
 80027d2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80027d6:	2310      	movs	r3, #16
 80027d8:	2201      	movs	r2, #1
 80027da:	2101      	movs	r1, #1
 80027dc:	f7ff f9c9 	bl	8001b72 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C17_Array, 2, 1, 17);
 80027e0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80027e4:	2311      	movs	r3, #17
 80027e6:	2201      	movs	r2, #1
 80027e8:	2102      	movs	r1, #2
 80027ea:	f7ff f9c2 	bl	8001b72 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 3, 2, 14);
 80027ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80027f2:	230e      	movs	r3, #14
 80027f4:	2202      	movs	r2, #2
 80027f6:	2103      	movs	r1, #3
 80027f8:	f7ff f9bb 	bl	8001b72 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 4, 2, 15);
 80027fc:	f107 0010 	add.w	r0, r7, #16
 8002800:	230f      	movs	r3, #15
 8002802:	2202      	movs	r2, #2
 8002804:	2104      	movs	r1, #4
 8002806:	f7ff f9b4 	bl	8001b72 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 5, 2, 16);
 800280a:	4638      	mov	r0, r7
 800280c:	2310      	movs	r3, #16
 800280e:	2202      	movs	r2, #2
 8002810:	2105      	movs	r1, #5
 8002812:	f7ff f9ae 	bl	8001b72 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 6, 2, 17);
 8002816:	f107 0008 	add.w	r0, r7, #8
 800281a:	2311      	movs	r3, #17
 800281c:	2202      	movs	r2, #2
 800281e:	2106      	movs	r1, #6
 8002820:	f7ff f9a7 	bl	8001b72 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 7, 2, 18);
 8002824:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002828:	2312      	movs	r3, #18
 800282a:	2202      	movs	r2, #2
 800282c:	2107      	movs	r1, #7
 800282e:	f7ff f9a0 	bl	8001b72 <LCD_voidDrawSpecialCharachter>




}
 8002832:	bf00      	nop
 8002834:	3750      	adds	r7, #80	; 0x50
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	0800e600 	.word	0x0800e600
 8002840:	0800e608 	.word	0x0800e608
 8002844:	0800e610 	.word	0x0800e610
 8002848:	0800e618 	.word	0x0800e618
 800284c:	0800e620 	.word	0x0800e620
 8002850:	0800e628 	.word	0x0800e628
 8002854:	0800e630 	.word	0x0800e630
 8002858:	0800e638 	.word	0x0800e638
 800285c:	0800e640 	.word	0x0800e640

08002860 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002866:	f001 f8a5 	bl	80039b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800286a:	f000 f8d5 	bl	8002a18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800286e:	f000 fb6b 	bl	8002f48 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002872:	f000 f931 	bl	8002ad8 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002876:	f000 f95d 	bl	8002b34 <MX_TIM1_Init>
	MX_TIM2_Init();
 800287a:	f000 fa01 	bl	8002c80 <MX_TIM2_Init>
	MX_TIM3_Init();
 800287e:	f000 fa63 	bl	8002d48 <MX_TIM3_Init>
	MX_UART4_Init();
 8002882:	f000 fab9 	bl	8002df8 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8002886:	f000 fae1 	bl	8002e4c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800288a:	f000 fb33 	bl	8002ef4 <MX_USART6_UART_Init>
	MX_USART3_UART_Init();
 800288e:	f000 fb07 	bl	8002ea0 <MX_USART3_UART_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	/*****************************************Initializing***********************************************/
	//GPS_voidInit();
	LCD_voidInit();
 8002892:	f7ff f877 	bl	8001984 <LCD_voidInit>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&Received_Char_Bluetooth, 1);		//Bluetooth
 8002896:	2201      	movs	r2, #1
 8002898:	494b      	ldr	r1, [pc, #300]	; (80029c8 <main+0x168>)
 800289a:	484c      	ldr	r0, [pc, #304]	; (80029cc <main+0x16c>)
 800289c:	f004 f8fd 	bl	8006a9a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t *)&Received_Char_ESP, 2);				//ESP
 80028a0:	2202      	movs	r2, #2
 80028a2:	494b      	ldr	r1, [pc, #300]	; (80029d0 <main+0x170>)
 80028a4:	484b      	ldr	r0, [pc, #300]	; (80029d4 <main+0x174>)
 80028a6:	f004 f8f8 	bl	8006a9a <HAL_UART_Receive_IT>

	/*****************************************Speed_Sensor***********************************************/
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80028aa:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <main+0x178>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <main+0x178>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80028ba:	2100      	movs	r1, #0
 80028bc:	4846      	ldr	r0, [pc, #280]	; (80029d8 <main+0x178>)
 80028be:	f003 f959 	bl	8005b74 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80028c2:	2104      	movs	r1, #4
 80028c4:	4844      	ldr	r0, [pc, #272]	; (80029d8 <main+0x178>)
 80028c6:	f003 f955 	bl	8005b74 <HAL_TIM_IC_Start_IT>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* USER CODE BEGIN RTOS_THREADS */
	/*************************************Task Creation*********************************************/
	Handle_Timer_LCDBuzzer= xTimerCreate("Timer_LCDBuzzer", pdMS_TO_TICKS(10000), pdFALSE, &ID_TImer_LCDBuzzer, CallBack_TimerLCDBuzzer);
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <main+0x17c>)
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <main+0x180>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80028d6:	4843      	ldr	r0, [pc, #268]	; (80029e4 <main+0x184>)
 80028d8:	f006 ffb0 	bl	800983c <xTimerCreate>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <main+0x188>)
 80028e0:	6013      	str	r3, [r2, #0]

	Status_ControlCar = xTaskCreate(Task_ControlCar, NULL, 200, NULL, Task_Control_Car_Priority, &Handle_Car_Control);
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <main+0x18c>)
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2302      	movs	r3, #2
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2300      	movs	r3, #0
 80028ec:	22c8      	movs	r2, #200	; 0xc8
 80028ee:	2100      	movs	r1, #0
 80028f0:	483f      	ldr	r0, [pc, #252]	; (80029f0 <main+0x190>)
 80028f2:	f005 fe8e 	bl	8008612 <xTaskCreate>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4a3e      	ldr	r2, [pc, #248]	; (80029f4 <main+0x194>)
 80028fa:	6013      	str	r3, [r2, #0]
	configASSERT(Status_ControlCar == pdPASS);
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <main+0x194>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d00a      	beq.n	800291a <main+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <main+0xb8>

	Status_GPS = xTaskCreate(TASK_GPS, NULL, 200, NULL,Task_GPS_Priority , NULL);
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2302      	movs	r3, #2
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2300      	movs	r3, #0
 8002924:	22c8      	movs	r2, #200	; 0xc8
 8002926:	2100      	movs	r1, #0
 8002928:	4833      	ldr	r0, [pc, #204]	; (80029f8 <main+0x198>)
 800292a:	f005 fe72 	bl	8008612 <xTaskCreate>
 800292e:	4603      	mov	r3, r0
 8002930:	4a32      	ldr	r2, [pc, #200]	; (80029fc <main+0x19c>)
 8002932:	6013      	str	r3, [r2, #0]
	configASSERT(Status_GPS == pdPASS);
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <main+0x19c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d00a      	beq.n	8002952 <main+0xf2>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60bb      	str	r3, [r7, #8]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <main+0xf0>

	Status_SendEspPeriodic = xTaskCreate(Task_SendEspPeriodic, NULL, 200, NULL, Task_Send_ESP_Periodic_Priority, &Handle_Esp_Periodic);
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <main+0x1a0>)
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	2302      	movs	r3, #2
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	22c8      	movs	r2, #200	; 0xc8
 800295e:	2100      	movs	r1, #0
 8002960:	4828      	ldr	r0, [pc, #160]	; (8002a04 <main+0x1a4>)
 8002962:	f005 fe56 	bl	8008612 <xTaskCreate>
 8002966:	4603      	mov	r3, r0
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <main+0x1a8>)
 800296a:	6013      	str	r3, [r2, #0]
	configASSERT(Status_SendEspPeriodic == pdPASS);
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <main+0x1a8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d00a      	beq.n	800298a <main+0x12a>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	607b      	str	r3, [r7, #4]
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <main+0x128>

//	Status_SendEsp_Status = xTaskCreate(Task_SendEsp_Status, NULL, 200, NULL, Task_Send_ESP_Status_Priority, &Handle_Send_ESP_Status);
//	configASSERT(Status_SendEsp_Status == pdPASS);

	  	Status_Recieve_Status_Esp = xTaskCreate(Task_Recieve_Status_Esp, NULL, 200, NULL, Task_Recieve_ESP_Priority, &Handle_Recieve_ESP_Status);
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <main+0x1ac>)
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	2303      	movs	r3, #3
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2300      	movs	r3, #0
 8002994:	22c8      	movs	r2, #200	; 0xc8
 8002996:	2100      	movs	r1, #0
 8002998:	481d      	ldr	r0, [pc, #116]	; (8002a10 <main+0x1b0>)
 800299a:	f005 fe3a 	bl	8008612 <xTaskCreate>
 800299e:	4603      	mov	r3, r0
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <main+0x1b4>)
 80029a2:	6013      	str	r3, [r2, #0]
	  configASSERT(Status_Recieve_Status_Esp == pdPASS);
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <main+0x1b4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d00a      	beq.n	80029c2 <main+0x162>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	603b      	str	r3, [r7, #0]
}
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <main+0x160>


	/* Start scheduler */

	vTaskStartScheduler();
 80029c2:	f005 ffb5 	bl	8008930 <vTaskStartScheduler>


	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80029c6:	e7fe      	b.n	80029c6 <main+0x166>
 80029c8:	20000784 	.word	0x20000784
 80029cc:	200006f4 	.word	0x200006f4
 80029d0:	20000785 	.word	0x20000785
 80029d4:	20000664 	.word	0x20000664
 80029d8:	200005d4 	.word	0x200005d4
 80029dc:	080014ed 	.word	0x080014ed
 80029e0:	20000004 	.word	0x20000004
 80029e4:	0800e648 	.word	0x0800e648
 80029e8:	20000794 	.word	0x20000794
 80029ec:	20000788 	.word	0x20000788
 80029f0:	08001019 	.word	0x08001019
 80029f4:	20000798 	.word	0x20000798
 80029f8:	08000fc5 	.word	0x08000fc5
 80029fc:	2000079c 	.word	0x2000079c
 8002a00:	2000078c 	.word	0x2000078c
 8002a04:	080010bd 	.word	0x080010bd
 8002a08:	200007a0 	.word	0x200007a0
 8002a0c:	20000790 	.word	0x20000790
 8002a10:	08001125 	.word	0x08001125
 8002a14:	200007a4 	.word	0x200007a4

08002a18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b094      	sub	sp, #80	; 0x50
 8002a1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	2234      	movs	r2, #52	; 0x34
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f008 fccf 	bl	800b3ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <SystemClock_Config+0xb8>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <SystemClock_Config+0xb8>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <SystemClock_Config+0xb8>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <SystemClock_Config+0xbc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <SystemClock_Config+0xbc>)
 8002a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <SystemClock_Config+0xbc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a80:	2310      	movs	r3, #16
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fb33 	bl	80050f8 <HAL_RCC_OscConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <SystemClock_Config+0x84>
	{
		Error_Handler();
 8002a98:	f000 fad2 	bl	8003040 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 ffa2 	bl	8004a00 <HAL_RCC_ClockConfig>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8002ac2:	f000 fabd 	bl	8003040 <Error_Handler>
	}
}
 8002ac6:	bf00      	nop
 8002ac8:	3750      	adds	r7, #80	; 0x50
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000

08002ad8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <MX_I2C1_Init+0x58>)
 8002ae0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae8:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002afc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <MX_I2C1_Init+0x54>)
 8002b18:	f001 fad4 	bl	80040c4 <HAL_I2C_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8002b22:	f000 fa8d 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000538 	.word	0x20000538
 8002b30:	40005400 	.word	0x40005400

08002b34 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b092      	sub	sp, #72	; 0x48
 8002b38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
 8002b54:	615a      	str	r2, [r3, #20]
 8002b56:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f008 fc33 	bl	800b3ca <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002b64:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b66:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <MX_TIM1_Init+0x148>)
 8002b68:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160-1;
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b6c:	229f      	movs	r2, #159	; 0x9f
 8002b6e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100-1;
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b78:	2263      	movs	r2, #99	; 0x63
 8002b7a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b8e:	483a      	ldr	r0, [pc, #232]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002b90:	f002 fe69 	bl	8005866 <HAL_TIM_PWM_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM1_Init+0x6a>
	{
		Error_Handler();
 8002b9a:	f000 fa51 	bl	8003040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ba6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002baa:	4619      	mov	r1, r3
 8002bac:	4832      	ldr	r0, [pc, #200]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002bae:	f003 fdb7 	bl	8006720 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM1_Init+0x88>
	{
		Error_Handler();
 8002bb8:	f000 fa42 	bl	8003040 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbc:	2360      	movs	r3, #96	; 0x60
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4619      	mov	r1, r3
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002be2:	f003 fa3b 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM1_Init+0xbc>
	{
		Error_Handler();
 8002bec:	f000 fa28 	bl	8003040 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481f      	ldr	r0, [pc, #124]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002bfa:	f003 fa2f 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM1_Init+0xd4>
	{
		Error_Handler();
 8002c04:	f000 fa1c 	bl	8003040 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4819      	ldr	r0, [pc, #100]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002c12:	f003 fa23 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM1_Init+0xec>
	{
		Error_Handler();
 8002c1c:	f000 fa10 	bl	8003040 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	220c      	movs	r2, #12
 8002c26:	4619      	mov	r1, r3
 8002c28:	4813      	ldr	r0, [pc, #76]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002c2a:	f003 fa17 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM1_Init+0x104>
	{
		Error_Handler();
 8002c34:	f000 fa04 	bl	8003040 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c50:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002c5c:	f003 fddc 	bl	8006818 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM1_Init+0x136>
	{
		Error_Handler();
 8002c66:	f000 f9eb 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002c6a:	4803      	ldr	r0, [pc, #12]	; (8002c78 <MX_TIM1_Init+0x144>)
 8002c6c:	f000 fac0 	bl	80031f0 <HAL_TIM_MspPostInit>

}
 8002c70:	bf00      	nop
 8002c72:	3748      	adds	r7, #72	; 0x48
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000058c 	.word	0x2000058c
 8002c7c:	40010000 	.word	0x40010000

08002c80 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c86:	f107 0320 	add.w	r3, r7, #32
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
 8002c9e:	615a      	str	r2, [r3, #20]
 8002ca0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ca8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cac:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002cb0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cbe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002ccc:	481d      	ldr	r0, [pc, #116]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cce:	f002 fd7b 	bl	80057c8 <HAL_TIM_OC_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8002cd8:	f000 f9b2 	bl	8003040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4816      	ldr	r0, [pc, #88]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002cec:	f003 fd18 	bl	8006720 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8002cf6:	f000 f9a3 	bl	8003040 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002d12:	f003 f947 	bl	8005fa4 <HAL_TIM_OC_ConfigChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8002d1c:	f000 f990 	bl	8003040 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	2204      	movs	r2, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4807      	ldr	r0, [pc, #28]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002d28:	f003 f93c 	bl	8005fa4 <HAL_TIM_OC_ConfigChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8002d32:	f000 f985 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002d36:	4803      	ldr	r0, [pc, #12]	; (8002d44 <MX_TIM2_Init+0xc4>)
 8002d38:	f000 fa5a 	bl	80031f0 <HAL_TIM_MspPostInit>

}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200005d4 	.word	0x200005d4

08002d48 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4e:	f107 0320 	add.w	r3, r7, #32
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	615a      	str	r2, [r3, #20]
 8002d68:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <MX_TIM3_Init+0xac>)
 8002d6e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80-1;
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d72:	224f      	movs	r2, #79	; 0x4f
 8002d74:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d7e:	2263      	movs	r2, #99	; 0x63
 8002d80:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d8e:	4818      	ldr	r0, [pc, #96]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002d90:	f002 fd69 	bl	8005866 <HAL_TIM_PWM_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM3_Init+0x56>
	{
		Error_Handler();
 8002d9a:	f000 f951 	bl	8003040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da6:	f107 0320 	add.w	r3, r7, #32
 8002daa:	4619      	mov	r1, r3
 8002dac:	4810      	ldr	r0, [pc, #64]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002dae:	f003 fcb7 	bl	8006720 <HAL_TIMEx_MasterConfigSynchronization>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0x74>
	{
		Error_Handler();
 8002db8:	f000 f942 	bl	8003040 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dbc:	2360      	movs	r3, #96	; 0x60
 8002dbe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4807      	ldr	r0, [pc, #28]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002dd4:	f003 f942 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8002dde:	f000 f92f 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002de2:	4803      	ldr	r0, [pc, #12]	; (8002df0 <MX_TIM3_Init+0xa8>)
 8002de4:	f000 fa04 	bl	80031f0 <HAL_TIM_MspPostInit>

}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000061c 	.word	0x2000061c
 8002df4:	40000400 	.word	0x40000400

08002df8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <MX_UART4_Init+0x50>)
 8002e00:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e08:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_UART4_Init+0x4c>)
 8002e30:	f003 fd58 	bl	80068e4 <HAL_UART_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8002e3a:	f000 f901 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000664 	.word	0x20000664
 8002e48:	40004c00 	.word	0x40004c00

08002e4c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <MX_USART1_UART_Init+0x50>)
 8002e54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e82:	4805      	ldr	r0, [pc, #20]	; (8002e98 <MX_USART1_UART_Init+0x4c>)
 8002e84:	f003 fd2e 	bl	80068e4 <HAL_UART_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002e8e:	f000 f8d7 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200006ac 	.word	0x200006ac
 8002e9c:	40011000 	.word	0x40011000

08002ea0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <MX_USART3_UART_Init+0x50>)
 8002ea8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002eac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002eb0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <MX_USART3_UART_Init+0x4c>)
 8002ed8:	f003 fd04 	bl	80068e4 <HAL_UART_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8002ee2:	f000 f8ad 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200006f4 	.word	0x200006f4
 8002ef0:	40004800 	.word	0x40004800

08002ef4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <MX_USART6_UART_Init+0x50>)
 8002efc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f04:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_USART6_UART_Init+0x4c>)
 8002f2c:	f003 fcda 	bl	80068e4 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8002f36:	f000 f883 	bl	8003040 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000073c 	.word	0x2000073c
 8002f44:	40011400 	.word	0x40011400

08002f48 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <MX_GPIO_Init+0xc8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f643 7110 	movw	r1, #16144	; 0x3f10
 8002fb8:	4816      	ldr	r0, [pc, #88]	; (8003014 <MX_GPIO_Init+0xcc>)
 8002fba:	f001 f869 	bl	8004090 <HAL_GPIO_WritePin>
			|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc4:	4814      	ldr	r0, [pc, #80]	; (8003018 <MX_GPIO_Init+0xd0>)
 8002fc6:	f001 f863 	bl	8004090 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC4 PC8 PC9
                           PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8002fca:	f643 7310 	movw	r3, #16144	; 0x3f10
 8002fce:	60fb      	str	r3, [r7, #12]
			|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480c      	ldr	r0, [pc, #48]	; (8003014 <MX_GPIO_Init+0xcc>)
 8002fe4:	f000 fec0 	bl	8003d68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4619      	mov	r1, r3
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_GPIO_Init+0xd0>)
 8003002:	f000 feb1 	bl	8003d68 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003006:	bf00      	nop
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40020800 	.word	0x40020800
 8003018:	40020000 	.word	0x40020000

0800301c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800302e:	f000 fce3 	bl	80039f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40001000 	.word	0x40001000

08003040 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003044:	b672      	cpsid	i
}
 8003046:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003048:	e7fe      	b.n	8003048 <Error_Handler+0x8>
	...

0800304c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_MspInit+0x54>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_MspInit+0x54>)
 800305c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003060:	6453      	str	r3, [r2, #68]	; 0x44
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_MspInit+0x54>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_MspInit+0x54>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_MspInit+0x54>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_MspInit+0x54>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	210f      	movs	r1, #15
 800308e:	f06f 0001 	mvn.w	r0, #1
 8003092:	f000 fdad 	bl	8003bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_I2C_MspInit+0x84>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d12c      	bne.n	8003120 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <HAL_I2C_MspInit+0x88>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_I2C_MspInit+0x88>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_I2C_MspInit+0x88>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e8:	2312      	movs	r3, #18
 80030ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030f4:	2304      	movs	r3, #4
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4619      	mov	r1, r3
 80030fe:	480c      	ldr	r0, [pc, #48]	; (8003130 <HAL_I2C_MspInit+0x8c>)
 8003100:	f000 fe32 	bl	8003d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_I2C_MspInit+0x88>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <HAL_I2C_MspInit+0x88>)
 800310e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003112:	6413      	str	r3, [r2, #64]	; 0x40
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_I2C_MspInit+0x88>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003120:	bf00      	nop
 8003122:	3728      	adds	r7, #40	; 0x28
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40005400 	.word	0x40005400
 800312c:	40023800 	.word	0x40023800
 8003130:	40020400 	.word	0x40020400

08003134 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a15      	ldr	r2, [pc, #84]	; (8003198 <HAL_TIM_PWM_MspInit+0x64>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_TIM_PWM_MspInit+0x68>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_TIM_PWM_MspInit+0x68>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6453      	str	r3, [r2, #68]	; 0x44
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_TIM_PWM_MspInit+0x68>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003162:	e012      	b.n	800318a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_TIM_PWM_MspInit+0x6c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10d      	bne.n	800318a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_TIM_PWM_MspInit+0x68>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_TIM_PWM_MspInit+0x68>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_TIM_PWM_MspInit+0x68>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40023800 	.word	0x40023800
 80031a0:	40000400 	.word	0x40000400

080031a4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d115      	bne.n	80031e2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_TIM_OC_MspInit+0x48>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_TIM_OC_MspInit+0x48>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_TIM_OC_MspInit+0x48>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2105      	movs	r1, #5
 80031d6:	201c      	movs	r0, #28
 80031d8:	f000 fd0a 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031dc:	201c      	movs	r0, #28
 80031de:	f000 fd23 	bl	8003c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	; 0x30
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 031c 	add.w	r3, r7, #28
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a45      	ldr	r2, [pc, #276]	; (8003324 <HAL_TIM_MspPostInit+0x134>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d11f      	bne.n	8003252 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	4b44      	ldr	r3, [pc, #272]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a43      	ldr	r2, [pc, #268]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800322e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003240:	2301      	movs	r3, #1
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	4838      	ldr	r0, [pc, #224]	; (800332c <HAL_TIM_MspPostInit+0x13c>)
 800324c:	f000 fd8c 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003250:	e064      	b.n	800331c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d13c      	bne.n	80032d6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a30      	ldr	r2, [pc, #192]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
 8003288:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003294:	2320      	movs	r3, #32
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032a4:	2301      	movs	r3, #1
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	4619      	mov	r1, r3
 80032ae:	481f      	ldr	r0, [pc, #124]	; (800332c <HAL_TIM_MspPostInit+0x13c>)
 80032b0:	f000 fd5a 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032b4:	2308      	movs	r3, #8
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032c4:	2301      	movs	r3, #1
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	4619      	mov	r1, r3
 80032ce:	4818      	ldr	r0, [pc, #96]	; (8003330 <HAL_TIM_MspPostInit+0x140>)
 80032d0:	f000 fd4a 	bl	8003d68 <HAL_GPIO_Init>
}
 80032d4:	e022      	b.n	800331c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_TIM_MspPostInit+0x144>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d11d      	bne.n	800331c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6313      	str	r3, [r2, #48]	; 0x30
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_TIM_MspPostInit+0x138>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032fc:	2340      	movs	r3, #64	; 0x40
 80032fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800330c:	2302      	movs	r3, #2
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	4805      	ldr	r0, [pc, #20]	; (800332c <HAL_TIM_MspPostInit+0x13c>)
 8003318:	f000 fd26 	bl	8003d68 <HAL_GPIO_Init>
}
 800331c:	bf00      	nop
 800331e:	3730      	adds	r7, #48	; 0x30
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40010000 	.word	0x40010000
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020400 	.word	0x40020400
 8003334:	40000400 	.word	0x40000400

08003338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b090      	sub	sp, #64	; 0x40
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a83      	ldr	r2, [pc, #524]	; (8003564 <HAL_UART_MspInit+0x22c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d134      	bne.n	80033c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
 800335e:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a81      	ldr	r2, [pc, #516]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b7f      	ldr	r3, [pc, #508]	; (8003568 <HAL_UART_MspInit+0x230>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	4b7b      	ldr	r3, [pc, #492]	; (8003568 <HAL_UART_MspInit+0x230>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a7a      	ldr	r2, [pc, #488]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b78      	ldr	r3, [pc, #480]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003392:	2303      	movs	r3, #3
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033a2:	2308      	movs	r3, #8
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033aa:	4619      	mov	r1, r3
 80033ac:	486f      	ldr	r0, [pc, #444]	; (800356c <HAL_UART_MspInit+0x234>)
 80033ae:	f000 fcdb 	bl	8003d68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2105      	movs	r1, #5
 80033b6:	2034      	movs	r0, #52	; 0x34
 80033b8:	f000 fc1a 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033bc:	2034      	movs	r0, #52	; 0x34
 80033be:	f000 fc33 	bl	8003c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80033c2:	e0cb      	b.n	800355c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_UART_MspInit+0x238>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d134      	bne.n	8003438 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_UART_MspInit+0x230>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	4a64      	ldr	r2, [pc, #400]	; (8003568 <HAL_UART_MspInit+0x230>)
 80033d8:	f043 0310 	orr.w	r3, r3, #16
 80033dc:	6453      	str	r3, [r2, #68]	; 0x44
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <HAL_UART_MspInit+0x230>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <HAL_UART_MspInit+0x230>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_UART_MspInit+0x230>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_UART_MspInit+0x230>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003416:	2307      	movs	r3, #7
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341e:	4619      	mov	r1, r3
 8003420:	4854      	ldr	r0, [pc, #336]	; (8003574 <HAL_UART_MspInit+0x23c>)
 8003422:	f000 fca1 	bl	8003d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2105      	movs	r1, #5
 800342a:	2025      	movs	r0, #37	; 0x25
 800342c:	f000 fbe0 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003430:	2025      	movs	r0, #37	; 0x25
 8003432:	f000 fbf9 	bl	8003c28 <HAL_NVIC_EnableIRQ>
}
 8003436:	e091      	b.n	800355c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4e      	ldr	r2, [pc, #312]	; (8003578 <HAL_UART_MspInit+0x240>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d153      	bne.n	80034ea <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	4b48      	ldr	r3, [pc, #288]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_UART_MspInit+0x230>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b45      	ldr	r3, [pc, #276]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a39      	ldr	r2, [pc, #228]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_UART_MspInit+0x230>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003496:	2320      	movs	r3, #32
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2302      	movs	r3, #2
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a2:	2303      	movs	r3, #3
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034a6:	2307      	movs	r3, #7
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ae:	4619      	mov	r1, r3
 80034b0:	4832      	ldr	r0, [pc, #200]	; (800357c <HAL_UART_MspInit+0x244>)
 80034b2:	f000 fc59 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034c8:	2307      	movs	r3, #7
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d0:	4619      	mov	r1, r3
 80034d2:	4828      	ldr	r0, [pc, #160]	; (8003574 <HAL_UART_MspInit+0x23c>)
 80034d4:	f000 fc48 	bl	8003d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	2027      	movs	r0, #39	; 0x27
 80034de:	f000 fb87 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034e2:	2027      	movs	r0, #39	; 0x27
 80034e4:	f000 fba0 	bl	8003c28 <HAL_NVIC_EnableIRQ>
}
 80034e8:	e038      	b.n	800355c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART6)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <HAL_UART_MspInit+0x248>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d133      	bne.n	800355c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_UART_MspInit+0x230>)
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_UART_MspInit+0x230>)
 80034fe:	f043 0320 	orr.w	r3, r3, #32
 8003502:	6453      	str	r3, [r2, #68]	; 0x44
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_UART_MspInit+0x230>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_UART_MspInit+0x230>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800352c:	23c0      	movs	r3, #192	; 0xc0
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800353c:	2308      	movs	r3, #8
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003544:	4619      	mov	r1, r3
 8003546:	480d      	ldr	r0, [pc, #52]	; (800357c <HAL_UART_MspInit+0x244>)
 8003548:	f000 fc0e 	bl	8003d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2105      	movs	r1, #5
 8003550:	2047      	movs	r0, #71	; 0x47
 8003552:	f000 fb4d 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003556:	2047      	movs	r0, #71	; 0x47
 8003558:	f000 fb66 	bl	8003c28 <HAL_NVIC_EnableIRQ>
}
 800355c:	bf00      	nop
 800355e:	3740      	adds	r7, #64	; 0x40
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40004c00 	.word	0x40004c00
 8003568:	40023800 	.word	0x40023800
 800356c:	40020000 	.word	0x40020000
 8003570:	40011000 	.word	0x40011000
 8003574:	40020400 	.word	0x40020400
 8003578:	40004800 	.word	0x40004800
 800357c:	40020800 	.word	0x40020800
 8003580:	40011400 	.word	0x40011400

08003584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	; 0x38
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_InitTick+0xe4>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_InitTick+0xe4>)
 800359e:	f043 0310 	orr.w	r3, r3, #16
 80035a2:	6413      	str	r3, [r2, #64]	; 0x40
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_InitTick+0xe4>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035b0:	f107 0210 	add.w	r2, r7, #16
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 fb3a 	bl	8004c34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035ca:	f001 fb0b 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 80035ce:	6378      	str	r0, [r7, #52]	; 0x34
 80035d0:	e004      	b.n	80035dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035d2:	f001 fb07 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 80035d6:	4603      	mov	r3, r0
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_InitTick+0xe8>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	0c9b      	lsrs	r3, r3, #18
 80035e6:	3b01      	subs	r3, #1
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_InitTick+0xec>)
 80035ec:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_InitTick+0xf0>)
 80035ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_InitTick+0xec>)
 80035f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_InitTick+0xec>)
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_InitTick+0xec>)
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_InitTick+0xec>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_InitTick+0xec>)
 800360c:	2200      	movs	r2, #0
 800360e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003610:	4817      	ldr	r0, [pc, #92]	; (8003670 <HAL_InitTick+0xec>)
 8003612:	f002 f80f 	bl	8005634 <HAL_TIM_Base_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800361c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11b      	bne.n	800365c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003624:	4812      	ldr	r0, [pc, #72]	; (8003670 <HAL_InitTick+0xec>)
 8003626:	f002 f85f 	bl	80056e8 <HAL_TIM_Base_Start_IT>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003634:	2b00      	cmp	r3, #0
 8003636:	d111      	bne.n	800365c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003638:	2036      	movs	r0, #54	; 0x36
 800363a:	f000 faf5 	bl	8003c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b0f      	cmp	r3, #15
 8003642:	d808      	bhi.n	8003656 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003644:	2200      	movs	r2, #0
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	2036      	movs	r0, #54	; 0x36
 800364a:	f000 fad1 	bl	8003bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_InitTick+0xf4>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e002      	b.n	800365c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800365c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003660:	4618      	mov	r0, r3
 8003662:	3738      	adds	r7, #56	; 0x38
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	431bde83 	.word	0x431bde83
 8003670:	200007a8 	.word	0x200007a8
 8003674:	40001000 	.word	0x40001000
 8003678:	2000000c 	.word	0x2000000c

0800367c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003680:	e7fe      	b.n	8003680 <NMI_Handler+0x4>

08003682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003686:	e7fe      	b.n	8003686 <HardFault_Handler+0x4>

08003688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800368c:	e7fe      	b.n	800368c <MemManage_Handler+0x4>

0800368e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003692:	e7fe      	b.n	8003692 <BusFault_Handler+0x4>

08003694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003698:	e7fe      	b.n	8003698 <UsageFault_Handler+0x4>

0800369a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80036ae:	4b21      	ldr	r3, [pc, #132]	; (8003734 <TIM2_IRQHandler+0x8c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d12f      	bne.n	800371c <TIM2_IRQHandler+0x74>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 80036bc:	f7fd fe78 	bl	80013b0 <Calculate_Car_Speed>
 80036c0:	ee10 3a10 	vmov	r3, s0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ff5f 	bl	8000588 <__aeabi_f2d>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	ec43 2b10 	vmov	d0, r2, r3
 80036d2:	f00a f923 	bl	800d91c <round>
 80036d6:	ec53 2b10 	vmov	r2, r3, d0
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd fa83 	bl	8000be8 <__aeabi_d2uiz>
 80036e2:	4603      	mov	r3, r0
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <TIM2_IRQHandler+0x90>)
 80036e8:	801a      	strh	r2, [r3, #0]
        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <TIM2_IRQHandler+0x94>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <TIM2_IRQHandler+0x94>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e015      	b.n	8003726 <TIM2_IRQHandler+0x7e>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <TIM2_IRQHandler+0x94>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d111      	bne.n	8003726 <TIM2_IRQHandler+0x7e>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <TIM2_IRQHandler+0x94>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_Esp_Periodic, 0, eNoAction,NULL);
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <TIM2_IRQHandler+0x98>)
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	f005 ff11 	bl	800953c <xTaskGenericNotifyFromISR>
 800371a:	e004      	b.n	8003726 <TIM2_IRQHandler+0x7e>
        }

	}else {
		edges_counter++;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <TIM2_IRQHandler+0x9c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <TIM2_IRQHandler+0x9c>)
 8003724:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003726:	4803      	ldr	r0, [pc, #12]	; (8003734 <TIM2_IRQHandler+0x8c>)
 8003728:	f002 fb4c 	bl	8005dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200005d4 	.word	0x200005d4
 8003738:	200007f0 	.word	0x200007f0
 800373c:	2000020c 	.word	0x2000020c
 8003740:	2000078c 	.word	0x2000078c
 8003744:	20000230 	.word	0x20000230

08003748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <USART1_IRQHandler+0x14>)
 800374e:	f003 f9c9 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	Uart_isr(&huart1);
 8003752:	4802      	ldr	r0, [pc, #8]	; (800375c <USART1_IRQHandler+0x14>)
 8003754:	f7fe ff76 	bl	8002644 <Uart_isr>

  /* USER CODE END USART1_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200006ac 	.word	0x200006ac

08003760 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003764:	4802      	ldr	r0, [pc, #8]	; (8003770 <USART3_IRQHandler+0x10>)
 8003766:	f003 f9bd 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200006f4 	.word	0x200006f4

08003774 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <UART4_IRQHandler+0x10>)
 800377a:	f003 f9b3 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000664 	.word	0x20000664

08003788 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <TIM6_DAC_IRQHandler+0x10>)
 800378e:	f002 fb19 	bl	8005dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200007a8 	.word	0x200007a8

0800379c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80037a0:	4802      	ldr	r0, [pc, #8]	; (80037ac <USART6_IRQHandler+0x10>)
 80037a2:	f003 f99f 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2000073c 	.word	0x2000073c

080037b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return 1;
 80037b4:	2301      	movs	r3, #1
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_kill>:

int _kill(int pid, int sig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037ca:	f007 fea7 	bl	800b51c <__errno>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2216      	movs	r2, #22
 80037d2:	601a      	str	r2, [r3, #0]
  return -1;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <_exit>:

void _exit (int status)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ffe7 	bl	80037c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037f2:	e7fe      	b.n	80037f2 <_exit+0x12>

080037f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e00a      	b.n	800381c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003806:	f3af 8000 	nop.w
 800380a:	4601      	mov	r1, r0
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	60ba      	str	r2, [r7, #8]
 8003812:	b2ca      	uxtb	r2, r1
 8003814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3301      	adds	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	dbf0      	blt.n	8003806 <_read+0x12>
  }

  return len;
 8003824:	687b      	ldr	r3, [r7, #4]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e009      	b.n	8003854 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	60ba      	str	r2, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3301      	adds	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	dbf1      	blt.n	8003840 <_write+0x12>
  }
  return len;
 800385c:	687b      	ldr	r3, [r7, #4]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_close>:

int _close(int file)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800388e:	605a      	str	r2, [r3, #4]
  return 0;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_isatty>:

int _isatty(int file)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038a6:	2301      	movs	r3, #1
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <_sbrk+0x5c>)
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <_sbrk+0x60>)
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <_sbrk+0x64>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <_sbrk+0x64>)
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <_sbrk+0x68>)
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <_sbrk+0x64>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d207      	bcs.n	8003910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003900:	f007 fe0c 	bl	800b51c <__errno>
 8003904:	4603      	mov	r3, r0
 8003906:	220c      	movs	r2, #12
 8003908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	e009      	b.n	8003924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <_sbrk+0x64>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <_sbrk+0x64>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <_sbrk+0x64>)
 8003920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20020000 	.word	0x20020000
 8003930:	00000400 	.word	0x00000400
 8003934:	200007f4 	.word	0x200007f4
 8003938:	20005330 	.word	0x20005330

0800393c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <SystemInit+0x20>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	4a05      	ldr	r2, [pc, #20]	; (800395c <SystemInit+0x20>)
 8003948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800394c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003998 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003964:	f7ff ffea 	bl	800393c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003968:	480c      	ldr	r0, [pc, #48]	; (800399c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800396a:	490d      	ldr	r1, [pc, #52]	; (80039a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800396c:	4a0d      	ldr	r2, [pc, #52]	; (80039a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800396e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003970:	e002      	b.n	8003978 <LoopCopyDataInit>

08003972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003976:	3304      	adds	r3, #4

08003978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800397c:	d3f9      	bcc.n	8003972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003980:	4c0a      	ldr	r4, [pc, #40]	; (80039ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003984:	e001      	b.n	800398a <LoopFillZerobss>

08003986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003988:	3204      	adds	r2, #4

0800398a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800398c:	d3fb      	bcc.n	8003986 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800398e:	f007 fdcb 	bl	800b528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003992:	f7fe ff65 	bl	8002860 <main>
  bx  lr    
 8003996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800399c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80039a4:	0800ea40 	.word	0x0800ea40
  ldr r2, =_sbss
 80039a8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80039ac:	2000532c 	.word	0x2000532c

080039b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b0:	e7fe      	b.n	80039b0 <ADC_IRQHandler>
	...

080039b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_Init+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <HAL_Init+0x40>)
 80039be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_Init+0x40>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <HAL_Init+0x40>)
 80039ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_Init+0x40>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <HAL_Init+0x40>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039dc:	2003      	movs	r0, #3
 80039de:	f000 f8fc 	bl	8003bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039e2:	200f      	movs	r0, #15
 80039e4:	f7ff fdce 	bl	8003584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e8:	f7ff fb30 	bl	800304c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023c00 	.word	0x40023c00

080039f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_IncTick+0x20>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_IncTick+0x24>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <HAL_IncTick+0x24>)
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000010 	.word	0x20000010
 8003a1c:	200007f8 	.word	0x200007f8

08003a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return uwTick;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_GetTick+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	200007f8 	.word	0x200007f8

08003a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a40:	f7ff ffee 	bl	8003a20 <HAL_GetTick>
 8003a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d005      	beq.n	8003a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_Delay+0x44>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a5e:	bf00      	nop
 8003a60:	f7ff ffde 	bl	8003a20 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d8f7      	bhi.n	8003a60 <HAL_Delay+0x28>
  {
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000010 	.word	0x20000010

08003a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	60d3      	str	r3, [r2, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0307 	and.w	r3, r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	db0b      	blt.n	8003b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4907      	ldr	r1, [pc, #28]	; (8003b1c <__NVIC_EnableIRQ+0x38>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2001      	movs	r0, #1
 8003b06:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db0a      	blt.n	8003b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	490c      	ldr	r1, [pc, #48]	; (8003b6c <__NVIC_SetPriority+0x4c>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b48:	e00a      	b.n	8003b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <__NVIC_SetPriority+0x50>)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	3b04      	subs	r3, #4
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	761a      	strb	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e100 	.word	0xe000e100
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f1c3 0307 	rsb	r3, r3, #7
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	bf28      	it	cs
 8003b92:	2304      	movcs	r3, #4
 8003b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d902      	bls.n	8003ba4 <NVIC_EncodePriority+0x30>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3b03      	subs	r3, #3
 8003ba2:	e000      	b.n	8003ba6 <NVIC_EncodePriority+0x32>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43d9      	mvns	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	4313      	orrs	r3, r2
         );
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ff4c 	bl	8003a80 <__NVIC_SetPriorityGrouping>
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c02:	f7ff ff61 	bl	8003ac8 <__NVIC_GetPriorityGrouping>
 8003c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f7ff ffb1 	bl	8003b74 <NVIC_EncodePriority>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff80 	bl	8003b20 <__NVIC_SetPriority>
}
 8003c20:	bf00      	nop
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff54 	bl	8003ae4 <__NVIC_EnableIRQ>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c52:	f7ff fee5 	bl	8003a20 <HAL_GetTick>
 8003c56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d008      	beq.n	8003c76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e052      	b.n	8003d1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0216 	bic.w	r2, r2, #22
 8003c84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_DMA_Abort+0x62>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0208 	bic.w	r2, r2, #8
 8003cb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc6:	e013      	b.n	8003cf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc8:	f7ff feaa 	bl	8003a20 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d90c      	bls.n	8003cf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e015      	b.n	8003d1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e4      	bne.n	8003cc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	223f      	movs	r2, #63	; 0x3f
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e00c      	b.n	8003d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2205      	movs	r2, #5
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e165      	b.n	8004050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d84:	2201      	movs	r2, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f040 8154 	bne.w	800404a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d005      	beq.n	8003dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d130      	bne.n	8003e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003df0:	2201      	movs	r2, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 0201 	and.w	r2, r3, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d017      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d123      	bne.n	8003eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	08da      	lsrs	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3208      	adds	r2, #8
 8003e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	08da      	lsrs	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	69b9      	ldr	r1, [r7, #24]
 8003ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0203 	and.w	r2, r3, #3
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80ae 	beq.w	800404a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <HAL_GPIO_Init+0x300>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <HAL_GPIO_Init+0x300>)
 8003ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efc:	6453      	str	r3, [r2, #68]	; 0x44
 8003efe:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <HAL_GPIO_Init+0x300>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f0a:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_GPIO_Init+0x304>)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	3302      	adds	r3, #2
 8003f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	220f      	movs	r2, #15
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4f      	ldr	r2, [pc, #316]	; (8004070 <HAL_GPIO_Init+0x308>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d025      	beq.n	8003f82 <HAL_GPIO_Init+0x21a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_GPIO_Init+0x30c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01f      	beq.n	8003f7e <HAL_GPIO_Init+0x216>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d019      	beq.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_GPIO_Init+0x314>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_GPIO_Init+0x20e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a4b      	ldr	r2, [pc, #300]	; (8004080 <HAL_GPIO_Init+0x318>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00d      	beq.n	8003f72 <HAL_GPIO_Init+0x20a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <HAL_GPIO_Init+0x31c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a49      	ldr	r2, [pc, #292]	; (8004088 <HAL_GPIO_Init+0x320>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <HAL_GPIO_Init+0x202>
 8003f66:	2306      	movs	r3, #6
 8003f68:	e00c      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f6a:	2307      	movs	r3, #7
 8003f6c:	e00a      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f6e:	2305      	movs	r3, #5
 8003f70:	e008      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f72:	2304      	movs	r3, #4
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f76:	2303      	movs	r3, #3
 8003f78:	e004      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_GPIO_Init+0x21c>
 8003f82:	2300      	movs	r3, #0
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	f002 0203 	and.w	r2, r2, #3
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	4093      	lsls	r3, r2
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f94:	4935      	ldr	r1, [pc, #212]	; (800406c <HAL_GPIO_Init+0x304>)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_GPIO_Init+0x324>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc6:	4a31      	ldr	r2, [pc, #196]	; (800408c <HAL_GPIO_Init+0x324>)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	; (800408c <HAL_GPIO_Init+0x324>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff0:	4a26      	ldr	r2, [pc, #152]	; (800408c <HAL_GPIO_Init+0x324>)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff6:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_GPIO_Init+0x324>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800401a:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_GPIO_Init+0x324>)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_GPIO_Init+0x324>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004044:	4a11      	ldr	r2, [pc, #68]	; (800408c <HAL_GPIO_Init+0x324>)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3301      	adds	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	f67f ae96 	bls.w	8003d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3724      	adds	r7, #36	; 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	40013800 	.word	0x40013800
 8004070:	40020000 	.word	0x40020000
 8004074:	40020400 	.word	0x40020400
 8004078:	40020800 	.word	0x40020800
 800407c:	40020c00 	.word	0x40020c00
 8004080:	40021000 	.word	0x40021000
 8004084:	40021400 	.word	0x40021400
 8004088:	40021800 	.word	0x40021800
 800408c:	40013c00 	.word	0x40013c00

08004090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
 800409c:	4613      	mov	r3, r2
 800409e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040ac:	e003      	b.n	80040b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ae:	887b      	ldrh	r3, [r7, #2]
 80040b0:	041a      	lsls	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	619a      	str	r2, [r3, #24]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e12b      	b.n	800432e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe ffda 	bl	80030a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004128:	f000 fd5c 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a81      	ldr	r2, [pc, #516]	; (8004338 <HAL_I2C_Init+0x274>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d807      	bhi.n	8004148 <HAL_I2C_Init+0x84>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a80      	ldr	r2, [pc, #512]	; (800433c <HAL_I2C_Init+0x278>)
 800413c:	4293      	cmp	r3, r2
 800413e:	bf94      	ite	ls
 8004140:	2301      	movls	r3, #1
 8004142:	2300      	movhi	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e006      	b.n	8004156 <HAL_I2C_Init+0x92>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a7d      	ldr	r2, [pc, #500]	; (8004340 <HAL_I2C_Init+0x27c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	bf94      	ite	ls
 8004150:	2301      	movls	r3, #1
 8004152:	2300      	movhi	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0e7      	b.n	800432e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a78      	ldr	r2, [pc, #480]	; (8004344 <HAL_I2C_Init+0x280>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0c9b      	lsrs	r3, r3, #18
 8004168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a6a      	ldr	r2, [pc, #424]	; (8004338 <HAL_I2C_Init+0x274>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d802      	bhi.n	8004198 <HAL_I2C_Init+0xd4>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3301      	adds	r3, #1
 8004196:	e009      	b.n	80041ac <HAL_I2C_Init+0xe8>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <HAL_I2C_Init+0x284>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	3301      	adds	r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	495c      	ldr	r1, [pc, #368]	; (8004338 <HAL_I2C_Init+0x274>)
 80041c8:	428b      	cmp	r3, r1
 80041ca:	d819      	bhi.n	8004200 <HAL_I2C_Init+0x13c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e59      	subs	r1, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041e0:	400b      	ands	r3, r1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_I2C_Init+0x138>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1e59      	subs	r1, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fa:	e051      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 80041fc:	2304      	movs	r3, #4
 80041fe:	e04f      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d111      	bne.n	800422c <HAL_I2C_Init+0x168>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1e58      	subs	r0, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e012      	b.n	8004252 <HAL_I2C_Init+0x18e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	0099      	lsls	r1, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004242:	3301      	adds	r3, #1
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Init+0x196>
 8004256:	2301      	movs	r3, #1
 8004258:	e022      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <HAL_I2C_Init+0x1bc>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1e58      	subs	r0, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	440b      	add	r3, r1
 8004270:	fbb0 f3f3 	udiv	r3, r0, r3
 8004274:	3301      	adds	r3, #1
 8004276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	e00f      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	0099      	lsls	r1, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	fbb0 f3f3 	udiv	r3, r0, r3
 8004296:	3301      	adds	r3, #1
 8004298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	6809      	ldr	r1, [r1, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6911      	ldr	r1, [r2, #16]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68d2      	ldr	r2, [r2, #12]
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	000186a0 	.word	0x000186a0
 800433c:	001e847f 	.word	0x001e847f
 8004340:	003d08ff 	.word	0x003d08ff
 8004344:	431bde83 	.word	0x431bde83
 8004348:	10624dd3 	.word	0x10624dd3

0800434c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	461a      	mov	r2, r3
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
 800435c:	4613      	mov	r3, r2
 800435e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7ff fb5e 	bl	8003a20 <HAL_GetTick>
 8004364:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	f040 80e0 	bne.w	8004534 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2319      	movs	r3, #25
 800437a:	2201      	movs	r2, #1
 800437c:	4970      	ldr	r1, [pc, #448]	; (8004540 <HAL_I2C_Master_Transmit+0x1f4>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f964 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	e0d3      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_I2C_Master_Transmit+0x50>
 8004398:	2302      	movs	r3, #2
 800439a:	e0cc      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d007      	beq.n	80043c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2221      	movs	r2, #33	; 0x21
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2210      	movs	r2, #16
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a50      	ldr	r2, [pc, #320]	; (8004544 <HAL_I2C_Master_Transmit+0x1f8>)
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f89c 	bl	8004548 <I2C_MasterRequestWrite>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e08d      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004430:	e066      	b.n	8004500 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	6a39      	ldr	r1, [r7, #32]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa22 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b04      	cmp	r3, #4
 8004448:	d107      	bne.n	800445a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e06b      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11b      	bne.n	80044d4 <HAL_I2C_Master_Transmit+0x188>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d017      	beq.n	80044d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	6a39      	ldr	r1, [r7, #32]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fa19 	bl	8004910 <I2C_WaitOnBTFFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d107      	bne.n	80044fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e01a      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d194      	bne.n	8004432 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	00100002 	.word	0x00100002
 8004544:	ffff0000 	.word	0xffff0000

08004548 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	460b      	mov	r3, r1
 8004556:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d006      	beq.n	8004572 <I2C_MasterRequestWrite+0x2a>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d003      	beq.n	8004572 <I2C_MasterRequestWrite+0x2a>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004570:	d108      	bne.n	8004584 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e00b      	b.n	800459c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	2b12      	cmp	r3, #18
 800458a:	d107      	bne.n	800459c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f84f 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d103      	bne.n	80045cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e035      	b.n	800463c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d8:	d108      	bne.n	80045ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045e8:	611a      	str	r2, [r3, #16]
 80045ea:	e01b      	b.n	8004624 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	11db      	asrs	r3, r3, #7
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0306 	and.w	r3, r3, #6
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f063 030f 	orn	r3, r3, #15
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <I2C_MasterRequestWrite+0xfc>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f898 	bl	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e010      	b.n	800463c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4907      	ldr	r1, [pc, #28]	; (8004648 <I2C_MasterRequestWrite+0x100>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f888 	bl	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	00010008 	.word	0x00010008
 8004648:	00010002 	.word	0x00010002

0800464c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800465c:	e048      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d044      	beq.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004666:	f7ff f9db 	bl	8003a20 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d139      	bne.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d10d      	bne.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	43da      	mvns	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	e00c      	b.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	43da      	mvns	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d116      	bne.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e023      	b.n	8004738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	43da      	mvns	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	e00c      	b.n	8004730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	43da      	mvns	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	429a      	cmp	r2, r3
 8004734:	d093      	beq.n	800465e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474e:	e071      	b.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d123      	bne.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e067      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d041      	beq.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b0:	f7ff f936 	bl	8003a20 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d302      	bcc.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d136      	bne.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10c      	bne.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	43da      	mvns	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e00b      	b.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	43da      	mvns	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e021      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10c      	bne.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e00b      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f af6d 	bne.w	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800488c:	e034      	b.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f886 	bl	80049a0 <I2C_IsAcknowledgeFailed>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e034      	b.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d028      	beq.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7ff f8bb 	bl	8003a20 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11d      	bne.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d016      	beq.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e007      	b.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d1c3      	bne.n	800488e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491c:	e034      	b.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f83e 	bl	80049a0 <I2C_IsAcknowledgeFailed>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e034      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d028      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7ff f873 	bl	8003a20 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11d      	bne.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d016      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d1c3      	bne.n	800491e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b6:	d11b      	bne.n	80049f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	f043 0204 	orr.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0cc      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d90c      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b63      	ldr	r3, [pc, #396]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0b8      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d020      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a54:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a58      	ldr	r2, [pc, #352]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a6c:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	494d      	ldr	r1, [pc, #308]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d044      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d119      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e07f      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06f      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ace:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e067      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4934      	ldr	r1, [pc, #208]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af0:	f7fe ff96 	bl	8003a20 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fe ff92 	bl	8003a20 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e04f      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d20c      	bcs.n	8004b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e032      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b54:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4916      	ldr	r1, [pc, #88]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	490e      	ldr	r1, [pc, #56]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b86:	f000 f887 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	490a      	ldr	r1, [pc, #40]	; (8004bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b98:	5ccb      	ldrb	r3, [r1, r3]
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fcec 	bl	8003584 <HAL_InitTick>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023c00 	.word	0x40023c00
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800e670 	.word	0x0800e670
 8004bc4:	20000008 	.word	0x20000008
 8004bc8:	2000000c 	.word	0x2000000c

08004bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000008 	.word	0x20000008

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004be8:	f7ff fff0 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0a9b      	lsrs	r3, r3, #10
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4903      	ldr	r1, [pc, #12]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	0800e680 	.word	0x0800e680

08004c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c10:	f7ff ffdc 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0b5b      	lsrs	r3, r3, #13
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4903      	ldr	r1, [pc, #12]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	0800e680 	.word	0x0800e680

08004c34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	220f      	movs	r2, #15
 8004c42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0203 	and.w	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_RCC_GetClockConfig+0x5c>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <HAL_RCC_GetClockConfig+0x60>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 020f 	and.w	r2, r3, #15
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	601a      	str	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40023c00 	.word	0x40023c00

08004c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c9c:	b0ae      	sub	sp, #184	; 0xb8
 8004c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cbe:	4bcb      	ldr	r3, [pc, #812]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	f200 8206 	bhi.w	80050d8 <HAL_RCC_GetSysClockFreq+0x440>
 8004ccc:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	080050d9 	.word	0x080050d9
 8004cdc:	080050d9 	.word	0x080050d9
 8004ce0:	080050d9 	.word	0x080050d9
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	080050d9 	.word	0x080050d9
 8004cec:	080050d9 	.word	0x080050d9
 8004cf0:	080050d9 	.word	0x080050d9
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	080050d9 	.word	0x080050d9
 8004cfc:	080050d9 	.word	0x080050d9
 8004d00:	080050d9 	.word	0x080050d9
 8004d04:	08004f09 	.word	0x08004f09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d08:	4bb9      	ldr	r3, [pc, #740]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004d0e:	e1e7      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d10:	4bb8      	ldr	r3, [pc, #736]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d16:	e1e3      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d18:	4bb4      	ldr	r3, [pc, #720]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d24:	4bb1      	ldr	r3, [pc, #708]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d071      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d30:	4bae      	ldr	r3, [pc, #696]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	099b      	lsrs	r3, r3, #6
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d3c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f04f 0000 	mov.w	r0, #0
 8004d5e:	f04f 0100 	mov.w	r1, #0
 8004d62:	0159      	lsls	r1, r3, #5
 8004d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d68:	0150      	lsls	r0, r2, #5
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4621      	mov	r1, r4
 8004d70:	1a51      	subs	r1, r2, r1
 8004d72:	6439      	str	r1, [r7, #64]	; 0x40
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb63 0301 	sbc.w	r3, r3, r1
 8004d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004d88:	4649      	mov	r1, r9
 8004d8a:	018b      	lsls	r3, r1, #6
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d92:	4641      	mov	r1, r8
 8004d94:	018a      	lsls	r2, r1, #6
 8004d96:	4641      	mov	r1, r8
 8004d98:	1a51      	subs	r1, r2, r1
 8004d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004db0:	4649      	mov	r1, r9
 8004db2:	00cb      	lsls	r3, r1, #3
 8004db4:	4641      	mov	r1, r8
 8004db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dba:	4641      	mov	r1, r8
 8004dbc:	00ca      	lsls	r2, r1, #3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dca:	462b      	mov	r3, r5
 8004dcc:	460a      	mov	r2, r1
 8004dce:	eb42 0303 	adc.w	r3, r2, r3
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004de0:	4629      	mov	r1, r5
 8004de2:	024b      	lsls	r3, r1, #9
 8004de4:	4621      	mov	r1, r4
 8004de6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dea:	4621      	mov	r1, r4
 8004dec:	024a      	lsls	r2, r1, #9
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e00:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004e04:	f7fb ff60 	bl	8000cc8 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e12:	e067      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e14:	4b75      	ldr	r3, [pc, #468]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	099b      	lsrs	r3, r3, #6
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e20:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e2e:	2300      	movs	r3, #0
 8004e30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e32:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	f04f 0000 	mov.w	r0, #0
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	0159      	lsls	r1, r3, #5
 8004e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e48:	0150      	lsls	r0, r2, #5
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4621      	mov	r1, r4
 8004e50:	1a51      	subs	r1, r2, r1
 8004e52:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e54:	4629      	mov	r1, r5
 8004e56:	eb63 0301 	sbc.w	r3, r3, r1
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004e68:	4649      	mov	r1, r9
 8004e6a:	018b      	lsls	r3, r1, #6
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e72:	4641      	mov	r1, r8
 8004e74:	018a      	lsls	r2, r1, #6
 8004e76:	4641      	mov	r1, r8
 8004e78:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e8e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e96:	4692      	mov	sl, r2
 8004e98:	469b      	mov	fp, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	eb1a 0303 	adds.w	r3, sl, r3
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	028b      	lsls	r3, r1, #10
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	028a      	lsls	r2, r1, #10
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ecc:	2200      	movs	r2, #0
 8004ece:	673b      	str	r3, [r7, #112]	; 0x70
 8004ed0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ed2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004ed6:	f7fb fef7 	bl	8000cc8 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4613      	mov	r3, r2
 8004ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee4:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f06:	e0eb      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f08:	4b38      	ldr	r3, [pc, #224]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d06b      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f20:	4b32      	ldr	r3, [pc, #200]	; (8004fec <HAL_RCC_GetSysClockFreq+0x354>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	2200      	movs	r2, #0
 8004f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	663b      	str	r3, [r7, #96]	; 0x60
 8004f34:	2300      	movs	r3, #0
 8004f36:	667b      	str	r3, [r7, #100]	; 0x64
 8004f38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	462b      	mov	r3, r5
 8004f40:	f04f 0000 	mov.w	r0, #0
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	0159      	lsls	r1, r3, #5
 8004f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f4e:	0150      	lsls	r0, r2, #5
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4621      	mov	r1, r4
 8004f56:	1a51      	subs	r1, r2, r1
 8004f58:	61b9      	str	r1, [r7, #24]
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004f6e:	4659      	mov	r1, fp
 8004f70:	018b      	lsls	r3, r1, #6
 8004f72:	4651      	mov	r1, sl
 8004f74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f78:	4651      	mov	r1, sl
 8004f7a:	018a      	lsls	r2, r1, #6
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ebb2 0801 	subs.w	r8, r2, r1
 8004f82:	4659      	mov	r1, fp
 8004f84:	eb63 0901 	sbc.w	r9, r3, r1
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9c:	4690      	mov	r8, r2
 8004f9e:	4699      	mov	r9, r3
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	eb18 0303 	adds.w	r3, r8, r3
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	462b      	mov	r3, r5
 8004faa:	eb49 0303 	adc.w	r3, r9, r3
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	024b      	lsls	r3, r1, #9
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	024a      	lsls	r2, r1, #9
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fd6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004fd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fdc:	f7fb fe74 	bl	8000cc8 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fea:	e065      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x420>
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	099b      	lsrs	r3, r3, #6
 8004ffe:	2200      	movs	r2, #0
 8005000:	4618      	mov	r0, r3
 8005002:	4611      	mov	r1, r2
 8005004:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005008:	653b      	str	r3, [r7, #80]	; 0x50
 800500a:	2300      	movs	r3, #0
 800500c:	657b      	str	r3, [r7, #84]	; 0x54
 800500e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005012:	4642      	mov	r2, r8
 8005014:	464b      	mov	r3, r9
 8005016:	f04f 0000 	mov.w	r0, #0
 800501a:	f04f 0100 	mov.w	r1, #0
 800501e:	0159      	lsls	r1, r3, #5
 8005020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005024:	0150      	lsls	r0, r2, #5
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4641      	mov	r1, r8
 800502c:	1a51      	subs	r1, r2, r1
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	4649      	mov	r1, r9
 8005032:	eb63 0301 	sbc.w	r3, r3, r1
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005044:	4659      	mov	r1, fp
 8005046:	018b      	lsls	r3, r1, #6
 8005048:	4651      	mov	r1, sl
 800504a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800504e:	4651      	mov	r1, sl
 8005050:	018a      	lsls	r2, r1, #6
 8005052:	4651      	mov	r1, sl
 8005054:	1a54      	subs	r4, r2, r1
 8005056:	4659      	mov	r1, fp
 8005058:	eb63 0501 	sbc.w	r5, r3, r1
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	00eb      	lsls	r3, r5, #3
 8005066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506a:	00e2      	lsls	r2, r4, #3
 800506c:	4614      	mov	r4, r2
 800506e:	461d      	mov	r5, r3
 8005070:	4643      	mov	r3, r8
 8005072:	18e3      	adds	r3, r4, r3
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	464b      	mov	r3, r9
 8005078:	eb45 0303 	adc.w	r3, r5, r3
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800508a:	4629      	mov	r1, r5
 800508c:	028b      	lsls	r3, r1, #10
 800508e:	4621      	mov	r1, r4
 8005090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005094:	4621      	mov	r1, r4
 8005096:	028a      	lsls	r2, r1, #10
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050a0:	2200      	movs	r2, #0
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80050a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050aa:	f7fb fe0d 	bl	8000cc8 <__aeabi_uldivmod>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4613      	mov	r3, r2
 80050b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	0f1b      	lsrs	r3, r3, #28
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80050c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80050da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80050de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	37b8      	adds	r7, #184	; 0xb8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	00f42400 	.word	0x00f42400

080050f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e28d      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8083 	beq.w	800521e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005118:	4b94      	ldr	r3, [pc, #592]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b04      	cmp	r3, #4
 8005122:	d019      	beq.n	8005158 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005124:	4b91      	ldr	r3, [pc, #580]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800512c:	2b08      	cmp	r3, #8
 800512e:	d106      	bne.n	800513e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005130:	4b8e      	ldr	r3, [pc, #568]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800513c:	d00c      	beq.n	8005158 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513e:	4b8b      	ldr	r3, [pc, #556]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d112      	bne.n	8005170 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800514a:	4b88      	ldr	r3, [pc, #544]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005156:	d10b      	bne.n	8005170 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	4b84      	ldr	r3, [pc, #528]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d05b      	beq.n	800521c <HAL_RCC_OscConfig+0x124>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d157      	bne.n	800521c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e25a      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x90>
 800517a:	4b7c      	ldr	r3, [pc, #496]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7b      	ldr	r2, [pc, #492]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e01d      	b.n	80051c4 <HAL_RCC_OscConfig+0xcc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0xb4>
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a75      	ldr	r2, [pc, #468]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b73      	ldr	r3, [pc, #460]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a72      	ldr	r2, [pc, #456]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0xcc>
 80051ac:	4b6f      	ldr	r3, [pc, #444]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6e      	ldr	r2, [pc, #440]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b6c      	ldr	r3, [pc, #432]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a6b      	ldr	r2, [pc, #428]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fe fc28 	bl	8003a20 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fe fc24 	bl	8003a20 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e21f      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e6:	4b61      	ldr	r3, [pc, #388]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0xdc>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fe fc14 	bl	8003a20 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fe fc10 	bl	8003a20 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e20b      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520e:	4b57      	ldr	r3, [pc, #348]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x104>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d06f      	beq.n	800530a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800522a:	4b50      	ldr	r3, [pc, #320]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b00      	cmp	r3, #0
 8005234:	d017      	beq.n	8005266 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800523e:	2b08      	cmp	r3, #8
 8005240:	d105      	bne.n	800524e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d11c      	bne.n	8005294 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800525a:	4b44      	ldr	r3, [pc, #272]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d116      	bne.n	8005294 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_RCC_OscConfig+0x186>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e1d3      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527e:	4b3b      	ldr	r3, [pc, #236]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4937      	ldr	r1, [pc, #220]	; (800536c <HAL_RCC_OscConfig+0x274>)
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	e03a      	b.n	800530a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800529c:	4b34      	ldr	r3, [pc, #208]	; (8005370 <HAL_RCC_OscConfig+0x278>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fe fbbd 	bl	8003a20 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052aa:	f7fe fbb9 	bl	8003a20 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1b4      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4925      	ldr	r1, [pc, #148]	; (800536c <HAL_RCC_OscConfig+0x274>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	e015      	b.n	800530a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052de:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCC_OscConfig+0x278>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe fb9c 	bl	8003a20 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ec:	f7fe fb98 	bl	8003a20 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e193      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fe:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d036      	beq.n	8005384 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <HAL_RCC_OscConfig+0x27c>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fe fb7c 	bl	8003a20 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532c:	f7fe fb78 	bl	8003a20 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e173      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_OscConfig+0x274>)
 8005340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x234>
 800534a:	e01b      	b.n	8005384 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_OscConfig+0x27c>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fe fb65 	bl	8003a20 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005358:	e00e      	b.n	8005378 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535a:	f7fe fb61 	bl	8003a20 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d907      	bls.n	8005378 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e15c      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
 800536c:	40023800 	.word	0x40023800
 8005370:	42470000 	.word	0x42470000
 8005374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005378:	4b8a      	ldr	r3, [pc, #552]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800537a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ea      	bne.n	800535a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8097 	beq.w	80054c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005396:	4b83      	ldr	r3, [pc, #524]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	4b7f      	ldr	r3, [pc, #508]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	4a7e      	ldr	r2, [pc, #504]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b7c      	ldr	r3, [pc, #496]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c2:	4b79      	ldr	r3, [pc, #484]	; (80055a8 <HAL_RCC_OscConfig+0x4b0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d118      	bne.n	8005400 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ce:	4b76      	ldr	r3, [pc, #472]	; (80055a8 <HAL_RCC_OscConfig+0x4b0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <HAL_RCC_OscConfig+0x4b0>)
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053da:	f7fe fb21 	bl	8003a20 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fe fb1d 	bl	8003a20 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e118      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f4:	4b6c      	ldr	r3, [pc, #432]	; (80055a8 <HAL_RCC_OscConfig+0x4b0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x31e>
 8005408:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	4a65      	ldr	r2, [pc, #404]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e01c      	b.n	8005450 <HAL_RCC_OscConfig+0x358>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b05      	cmp	r3, #5
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x340>
 800541e:	4b61      	ldr	r3, [pc, #388]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a60      	ldr	r2, [pc, #384]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005424:	f043 0304 	orr.w	r3, r3, #4
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4b5e      	ldr	r3, [pc, #376]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	4a5d      	ldr	r2, [pc, #372]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
 8005436:	e00b      	b.n	8005450 <HAL_RCC_OscConfig+0x358>
 8005438:	4b5a      	ldr	r3, [pc, #360]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	4a59      	ldr	r2, [pc, #356]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	6713      	str	r3, [r2, #112]	; 0x70
 8005444:	4b57      	ldr	r3, [pc, #348]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	4a56      	ldr	r2, [pc, #344]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800544a:	f023 0304 	bic.w	r3, r3, #4
 800544e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d015      	beq.n	8005484 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fe fae2 	bl	8003a20 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005460:	f7fe fade 	bl	8003a20 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	; 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0d7      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005476:	4b4b      	ldr	r3, [pc, #300]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0ee      	beq.n	8005460 <HAL_RCC_OscConfig+0x368>
 8005482:	e014      	b.n	80054ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fe facc 	bl	8003a20 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548a:	e00a      	b.n	80054a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548c:	f7fe fac8 	bl	8003a20 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	; 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0c1      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a2:	4b40      	ldr	r3, [pc, #256]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ee      	bne.n	800548c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b4:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	4a3a      	ldr	r2, [pc, #232]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80054ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80ad 	beq.w	8005624 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d060      	beq.n	8005598 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d145      	bne.n	800556a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b33      	ldr	r3, [pc, #204]	; (80055ac <HAL_RCC_OscConfig+0x4b4>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fe fa9c 	bl	8003a20 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fe fa98 	bl	8003a20 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e093      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	019b      	lsls	r3, r3, #6
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	491b      	ldr	r1, [pc, #108]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <HAL_RCC_OscConfig+0x4b4>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fe fa6d 	bl	8003a20 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800554a:	f7fe fa69 	bl	8003a20 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e064      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555c:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x452>
 8005568:	e05c      	b.n	8005624 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_RCC_OscConfig+0x4b4>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fe fa56 	bl	8003a20 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005578:	f7fe fa52 	bl	8003a20 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04d      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_OscConfig+0x4ac>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x480>
 8005596:	e045      	b.n	8005624 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e040      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	40007000 	.word	0x40007000
 80055ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055b0:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <HAL_RCC_OscConfig+0x538>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d030      	beq.n	8005620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d129      	bne.n	8005620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d122      	bne.n	8005620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d119      	bne.n	8005620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d10f      	bne.n	8005620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800560c:	429a      	cmp	r2, r3
 800560e:	d107      	bne.n	8005620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800

08005634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e041      	b.n	80056ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f839 	bl	80056d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f000 fdd2 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d001      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e04e      	b.n	800579e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a23      	ldr	r2, [pc, #140]	; (80057ac <HAL_TIM_Base_Start_IT+0xc4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d022      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d01d      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d018      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00e      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x80>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d111      	bne.n	800578c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b06      	cmp	r3, #6
 8005778:	d010      	beq.n	800579c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578a:	e007      	b.n	800579c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40010400 	.word	0x40010400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40001800 	.word	0x40001800

080057c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e041      	b.n	800585e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fcd8 	bl	80031a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fd08 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e041      	b.n	80058fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fd fc51 	bl	8003134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f000 fcb9 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_TIM_PWM_Start+0x24>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e022      	b.n	800596e <HAL_TIM_PWM_Start+0x6a>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b04      	cmp	r3, #4
 800592c:	d109      	bne.n	8005942 <HAL_TIM_PWM_Start+0x3e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	e015      	b.n	800596e <HAL_TIM_PWM_Start+0x6a>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d109      	bne.n	800595c <HAL_TIM_PWM_Start+0x58>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e008      	b.n	800596e <HAL_TIM_PWM_Start+0x6a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e07c      	b.n	8005a70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <HAL_TIM_PWM_Start+0x82>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005984:	e013      	b.n	80059ae <HAL_TIM_PWM_Start+0xaa>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Start+0x92>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005994:	e00b      	b.n	80059ae <HAL_TIM_PWM_Start+0xaa>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b08      	cmp	r3, #8
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Start+0xa2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a4:	e003      	b.n	80059ae <HAL_TIM_PWM_Start+0xaa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2201      	movs	r2, #1
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fe8c 	bl	80066d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <HAL_TIM_PWM_Start+0x174>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d004      	beq.n	80059d0 <HAL_TIM_PWM_Start+0xcc>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <HAL_TIM_PWM_Start+0x178>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_PWM_Start+0xd0>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_TIM_PWM_Start+0xd2>
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <HAL_TIM_PWM_Start+0x174>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <HAL_TIM_PWM_Start+0x17c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_TIM_PWM_Start+0x180>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_TIM_PWM_Start+0x184>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <HAL_TIM_PWM_Start+0x178>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <HAL_TIM_PWM_Start+0x188>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x136>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <HAL_TIM_PWM_Start+0x18c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d111      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d010      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5c:	e007      	b.n	8005a6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40001800 	.word	0x40001800

08005a94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fe14 	bl	80066d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2e      	ldr	r2, [pc, #184]	; (8005b6c <HAL_TIM_PWM_Stop+0xd8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_TIM_PWM_Stop+0x2c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2d      	ldr	r2, [pc, #180]	; (8005b70 <HAL_TIM_PWM_Stop+0xdc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <HAL_TIM_PWM_Stop+0x30>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_TIM_PWM_Stop+0x32>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10f      	bne.n	8005afa <HAL_TIM_PWM_Stop+0x66>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_PWM_Stop+0x66>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10f      	bne.n	8005b2a <HAL_TIM_PWM_Stop+0x96>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	f240 4344 	movw	r3, #1092	; 0x444
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d107      	bne.n	8005b2a <HAL_TIM_PWM_Stop+0x96>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Stop+0xa6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b38:	e013      	b.n	8005b62 <HAL_TIM_PWM_Stop+0xce>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_PWM_Stop+0xb6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b48:	e00b      	b.n	8005b62 <HAL_TIM_PWM_Stop+0xce>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_PWM_Stop+0xc6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b58:	e003      	b.n	8005b62 <HAL_TIM_PWM_Stop+0xce>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400

08005b74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <HAL_TIM_IC_Start_IT+0x1e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e013      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x46>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d104      	bne.n	8005ba2 <HAL_TIM_IC_Start_IT+0x2e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	e00b      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x46>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d104      	bne.n	8005bb2 <HAL_TIM_IC_Start_IT+0x3e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e003      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x46>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <HAL_TIM_IC_Start_IT+0x58>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e013      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x80>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d104      	bne.n	8005bdc <HAL_TIM_IC_Start_IT+0x68>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e00b      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x80>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d104      	bne.n	8005bec <HAL_TIM_IC_Start_IT+0x78>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e003      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x80>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d102      	bne.n	8005c02 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bfc:	7b7b      	ldrb	r3, [r7, #13]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0cc      	b.n	8005da0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_IC_Start_IT+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c14:	e013      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0xca>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_IC_Start_IT+0xb2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	e00b      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0xca>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_IC_Start_IT+0xc2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c34:	e003      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0xca>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_IC_Start_IT+0xda>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c4c:	e013      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x102>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IC_Start_IT+0xea>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c5c:	e00b      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x102>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_IC_Start_IT+0xfa>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c6c:	e003      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x102>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d841      	bhi.n	8005d00 <HAL_TIM_IC_Start_IT+0x18c>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <HAL_TIM_IC_Start_IT+0x110>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005d01 	.word	0x08005d01
 8005c8c:	08005d01 	.word	0x08005d01
 8005c90:	08005d01 	.word	0x08005d01
 8005c94:	08005ccb 	.word	0x08005ccb
 8005c98:	08005d01 	.word	0x08005d01
 8005c9c:	08005d01 	.word	0x08005d01
 8005ca0:	08005d01 	.word	0x08005d01
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005d01 	.word	0x08005d01
 8005cac:	08005d01 	.word	0x08005d01
 8005cb0:	08005d01 	.word	0x08005d01
 8005cb4:	08005cef 	.word	0x08005cef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0202 	orr.w	r2, r2, #2
 8005cc6:	60da      	str	r2, [r3, #12]
      break;
 8005cc8:	e01d      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0204 	orr.w	r2, r2, #4
 8005cd8:	60da      	str	r2, [r3, #12]
      break;
 8005cda:	e014      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0208 	orr.w	r2, r2, #8
 8005cea:	60da      	str	r2, [r3, #12]
      break;
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0210 	orr.w	r2, r2, #16
 8005cfc:	60da      	str	r2, [r3, #12]
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d148      	bne.n	8005d9e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fcdd 	bl	80066d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <HAL_TIM_IC_Start_IT+0x234>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d022      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d01d      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <HAL_TIM_IC_Start_IT+0x238>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_TIM_IC_Start_IT+0x240>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a19      	ldr	r2, [pc, #100]	; (8005db8 <HAL_TIM_IC_Start_IT+0x244>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_TIM_IC_Start_IT+0x248>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_TIM_IC_Start_IT+0x1f6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d111      	bne.n	8005d8e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b06      	cmp	r3, #6
 8005d7a:	d010      	beq.n	8005d9e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8c:	e007      	b.n	8005d9e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0201 	orr.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40010400 	.word	0x40010400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40001800 	.word	0x40001800

08005dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d020      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01b      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0202 	mvn.w	r2, #2
 8005df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fb fb4e 	bl	80014b0 <HAL_TIM_IC_CaptureCallback>
 8005e14:	e005      	b.n	8005e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f9e2 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f9e9 	bl	80061f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0204 	mvn.w	r2, #4
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fb28 	bl	80014b0 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9bc 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f9c3 	bl	80061f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0208 	mvn.w	r2, #8
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2204      	movs	r2, #4
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb fb02 	bl	80014b0 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f996 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f99d 	bl	80061f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0210 	mvn.w	r2, #16
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb fadc 	bl	80014b0 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f970 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f977 	bl	80061f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0201 	mvn.w	r2, #1
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fd f876 	bl	800301c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00c      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fcbe 	bl	80068d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f948 	bl	8006208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00c      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0220 	mvn.w	r2, #32
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fc90 	bl	80068bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e048      	b.n	8006054 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b0c      	cmp	r3, #12
 8005fce:	d839      	bhi.n	8006044 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	0800600d 	.word	0x0800600d
 8005fdc:	08006045 	.word	0x08006045
 8005fe0:	08006045 	.word	0x08006045
 8005fe4:	08006045 	.word	0x08006045
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	08006045 	.word	0x08006045
 8005ff0:	08006045 	.word	0x08006045
 8005ff4:	08006045 	.word	0x08006045
 8005ff8:	08006029 	.word	0x08006029
 8005ffc:	08006045 	.word	0x08006045
 8006000:	08006045 	.word	0x08006045
 8006004:	08006045 	.word	0x08006045
 8006008:	08006037 	.word	0x08006037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f9ae 	bl	8006374 <TIM_OC1_SetConfig>
      break;
 8006018:	e017      	b.n	800604a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fa17 	bl	8006454 <TIM_OC2_SetConfig>
      break;
 8006026:	e010      	b.n	800604a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fa86 	bl	8006540 <TIM_OC3_SetConfig>
      break;
 8006034:	e009      	b.n	800604a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 faf3 	bl	8006628 <TIM_OC4_SetConfig>
      break;
 8006042:	e002      	b.n	800604a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]
      break;
 8006048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006076:	2302      	movs	r3, #2
 8006078:	e0ae      	b.n	80061d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b0c      	cmp	r3, #12
 8006086:	f200 809f 	bhi.w	80061c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080061c9 	.word	0x080061c9
 8006098:	080061c9 	.word	0x080061c9
 800609c:	080061c9 	.word	0x080061c9
 80060a0:	08006105 	.word	0x08006105
 80060a4:	080061c9 	.word	0x080061c9
 80060a8:	080061c9 	.word	0x080061c9
 80060ac:	080061c9 	.word	0x080061c9
 80060b0:	08006147 	.word	0x08006147
 80060b4:	080061c9 	.word	0x080061c9
 80060b8:	080061c9 	.word	0x080061c9
 80060bc:	080061c9 	.word	0x080061c9
 80060c0:	08006187 	.word	0x08006187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f952 	bl	8006374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0208 	orr.w	r2, r2, #8
 80060de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0204 	bic.w	r2, r2, #4
 80060ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	619a      	str	r2, [r3, #24]
      break;
 8006102:	e064      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f9a2 	bl	8006454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6999      	ldr	r1, [r3, #24]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	619a      	str	r2, [r3, #24]
      break;
 8006144:	e043      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f9f7 	bl	8006540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0208 	orr.w	r2, r2, #8
 8006160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0204 	bic.w	r2, r2, #4
 8006170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	61da      	str	r2, [r3, #28]
      break;
 8006184:	e023      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fa4b 	bl	8006628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69d9      	ldr	r1, [r3, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	021a      	lsls	r2, r3, #8
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	61da      	str	r2, [r3, #28]
      break;
 80061c6:	e002      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a46      	ldr	r2, [pc, #280]	; (8006348 <TIM_Base_SetConfig+0x12c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a43      	ldr	r2, [pc, #268]	; (800634c <TIM_Base_SetConfig+0x130>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a42      	ldr	r2, [pc, #264]	; (8006350 <TIM_Base_SetConfig+0x134>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a41      	ldr	r2, [pc, #260]	; (8006354 <TIM_Base_SetConfig+0x138>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <TIM_Base_SetConfig+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a35      	ldr	r2, [pc, #212]	; (8006348 <TIM_Base_SetConfig+0x12c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d027      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a32      	ldr	r2, [pc, #200]	; (800634c <TIM_Base_SetConfig+0x130>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d023      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a31      	ldr	r2, [pc, #196]	; (8006350 <TIM_Base_SetConfig+0x134>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a30      	ldr	r2, [pc, #192]	; (8006354 <TIM_Base_SetConfig+0x138>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0x13c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d017      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2e      	ldr	r2, [pc, #184]	; (800635c <TIM_Base_SetConfig+0x140>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2d      	ldr	r2, [pc, #180]	; (8006360 <TIM_Base_SetConfig+0x144>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <TIM_Base_SetConfig+0x148>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	; (8006368 <TIM_Base_SetConfig+0x14c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	; (800636c <TIM_Base_SetConfig+0x150>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a29      	ldr	r2, [pc, #164]	; (8006370 <TIM_Base_SetConfig+0x154>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <TIM_Base_SetConfig+0x12c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0xf8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a12      	ldr	r2, [pc, #72]	; (8006358 <TIM_Base_SetConfig+0x13c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d105      	bne.n	800633a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]
  }
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40010000 	.word	0x40010000
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	40010400 	.word	0x40010400
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400
 8006364:	40014800 	.word	0x40014800
 8006368:	40001800 	.word	0x40001800
 800636c:	40001c00 	.word	0x40001c00
 8006370:	40002000 	.word	0x40002000

08006374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 0201 	bic.w	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f023 0302 	bic.w	r3, r3, #2
 80063bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a20      	ldr	r2, [pc, #128]	; (800644c <TIM_OC1_SetConfig+0xd8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_OC1_SetConfig+0x64>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <TIM_OC1_SetConfig+0xdc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d10c      	bne.n	80063f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0308 	bic.w	r3, r3, #8
 80063de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0304 	bic.w	r3, r3, #4
 80063f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a15      	ldr	r2, [pc, #84]	; (800644c <TIM_OC1_SetConfig+0xd8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC1_SetConfig+0x8e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a14      	ldr	r2, [pc, #80]	; (8006450 <TIM_OC1_SetConfig+0xdc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d111      	bne.n	8006426 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40010000 	.word	0x40010000
 8006450:	40010400 	.word	0x40010400

08006454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f023 0210 	bic.w	r2, r3, #16
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0320 	bic.w	r3, r3, #32
 800649e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a22      	ldr	r2, [pc, #136]	; (8006538 <TIM_OC2_SetConfig+0xe4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC2_SetConfig+0x68>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a21      	ldr	r2, [pc, #132]	; (800653c <TIM_OC2_SetConfig+0xe8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10d      	bne.n	80064d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <TIM_OC2_SetConfig+0xe4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC2_SetConfig+0x94>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a16      	ldr	r2, [pc, #88]	; (800653c <TIM_OC2_SetConfig+0xe8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d113      	bne.n	8006510 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400

08006540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a21      	ldr	r2, [pc, #132]	; (8006620 <TIM_OC3_SetConfig+0xe0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_OC3_SetConfig+0x66>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a20      	ldr	r2, [pc, #128]	; (8006624 <TIM_OC3_SetConfig+0xe4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10d      	bne.n	80065c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a16      	ldr	r2, [pc, #88]	; (8006620 <TIM_OC3_SetConfig+0xe0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC3_SetConfig+0x92>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a15      	ldr	r2, [pc, #84]	; (8006624 <TIM_OC3_SetConfig+0xe4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d113      	bne.n	80065fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	621a      	str	r2, [r3, #32]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a12      	ldr	r2, [pc, #72]	; (80066cc <TIM_OC4_SetConfig+0xa4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC4_SetConfig+0x68>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <TIM_OC4_SetConfig+0xa8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	019b      	lsls	r3, r3, #6
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40010400 	.word	0x40010400

080066d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	2201      	movs	r2, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1a      	ldr	r2, [r3, #32]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a1a      	ldr	r2, [r3, #32]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	431a      	orrs	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006734:	2302      	movs	r3, #2
 8006736:	e05a      	b.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006784:	d01d      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1b      	ldr	r2, [pc, #108]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1a      	ldr	r2, [pc, #104]	; (8006808 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a18      	ldr	r2, [pc, #96]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a17      	ldr	r2, [pc, #92]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d10c      	bne.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40001800 	.word	0x40001800

08006818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006830:	2302      	movs	r3, #2
 8006832:	e03d      	b.n	80068b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e042      	b.n	800697c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fc fd14 	bl	8003338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2224      	movs	r2, #36	; 0x24
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fdbd 	bl	80074a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800693c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695a      	ldr	r2, [r3, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800694c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800695c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d175      	bne.n	8006a90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_UART_Transmit+0x2c>
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e06e      	b.n	8006a92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2221      	movs	r2, #33	; 0x21
 80069be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069c2:	f7fd f82d 	bl	8003a20 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	88fa      	ldrh	r2, [r7, #6]
 80069cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	88fa      	ldrh	r2, [r7, #6]
 80069d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069dc:	d108      	bne.n	80069f0 <HAL_UART_Transmit+0x6c>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e003      	b.n	80069f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069f8:	e02e      	b.n	8006a58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fb1f 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e03a      	b.n	8006a92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	3302      	adds	r3, #2
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	e007      	b.n	8006a4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	3301      	adds	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1cb      	bne.n	80069fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2140      	movs	r1, #64	; 0x40
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 faeb 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d005      	beq.n	8006a84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e006      	b.n	8006a92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e000      	b.n	8006a92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a90:	2302      	movs	r3, #2
  }
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d112      	bne.n	8006ada <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_UART_Receive_IT+0x26>
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e00b      	b.n	8006adc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fb12 	bl	80070fa <UART_Start_Receive_IT>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	e000      	b.n	8006adc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
  }
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b0ba      	sub	sp, #232	; 0xe8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_UART_IRQHandler+0x66>
 8006b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fbf2 	bl	800732c <UART_Receive_IT>
      return;
 8006b48:	e25b      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80de 	beq.w	8006d10 <HAL_UART_IRQHandler+0x22c>
 8006b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80d1 	beq.w	8006d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0xae>
 8006b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	f043 0201 	orr.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xd2>
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <HAL_UART_IRQHandler+0xf6>
 8006bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	f043 0204 	orr.w	r2, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d011      	beq.n	8006c0a <HAL_UART_IRQHandler+0x126>
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d105      	bne.n	8006bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	f043 0208 	orr.w	r2, r3, #8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 81f2 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_UART_IRQHandler+0x14e>
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fb7d 	bl	800732c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <HAL_UART_IRQHandler+0x17a>
 8006c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d04f      	beq.n	8006cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa85 	bl	800716e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d141      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3314      	adds	r3, #20
 8006c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1d9      	bne.n	8006c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d013      	beq.n	8006cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	4a7e      	ldr	r2, [pc, #504]	; (8006ec4 <HAL_UART_IRQHandler+0x3e0>)
 8006ccc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fd f826 	bl	8003d24 <HAL_DMA_Abort_IT>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d016      	beq.n	8006d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	e00e      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f994 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e00a      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f990 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e006      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f98c 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006d0a:	e175      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	bf00      	nop
    return;
 8006d0e:	e173      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 814f 	bne.w	8006fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8148 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8141 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	f040 80b6 	bne.w	8006ec8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8145 	beq.w	8006ffc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f080 813e 	bcs.w	8006ffc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d92:	f000 8088 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1d9      	bne.n	8006d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e1      	bne.n	8006de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e3      	bne.n	8006e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e76:	f023 0310 	bic.w	r3, r3, #16
 8006e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e3      	bne.n	8006e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fc fecf 	bl	8003c44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f8b7 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ec2:	e09b      	b.n	8006ffc <HAL_UART_IRQHandler+0x518>
 8006ec4:	08007235 	.word	0x08007235
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 808e 	beq.w	8007000 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 8089 	beq.w	8007000 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f12:	647a      	str	r2, [r7, #68]	; 0x44
 8006f14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e3      	bne.n	8006eee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	623b      	str	r3, [r7, #32]
   return(result);
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3314      	adds	r3, #20
 8006f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f4a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e3      	bne.n	8006f26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f90:	61fa      	str	r2, [r7, #28]
 8006f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	69b9      	ldr	r1, [r7, #24]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e3      	bne.n	8006f6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f83d 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fb6:	e023      	b.n	8007000 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x4f4>
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f943 	bl	800725c <UART_Transmit_IT>
    return;
 8006fd6:	e014      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <HAL_UART_IRQHandler+0x51e>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f983 	bl	80072fc <UART_EndTransmit_IT>
    return;
 8006ff6:	e004      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
    return;
 8006ff8:	bf00      	nop
 8006ffa:	e002      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ffc:	bf00      	nop
 8006ffe:	e000      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
      return;
 8007000:	bf00      	nop
  }
}
 8007002:	37e8      	adds	r7, #232	; 0xe8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007058:	e03b      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d037      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007062:	f7fc fcdd 	bl	8003a20 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	6a3a      	ldr	r2, [r7, #32]
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <UART_WaitOnFlagUntilTimeout+0x30>
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e03a      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d023      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b80      	cmp	r3, #128	; 0x80
 800708e:	d020      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d01d      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d116      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f857 	bl	800716e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2208      	movs	r2, #8
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e00f      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d0b4      	beq.n	800705a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	4613      	mov	r3, r2
 8007106:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2222      	movs	r2, #34	; 0x22
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800713e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695a      	ldr	r2, [r3, #20]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0220 	orr.w	r2, r2, #32
 800715e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800716e:	b480      	push	{r7}
 8007170:	b095      	sub	sp, #84	; 0x54
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800718c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	330c      	adds	r3, #12
 8007194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007196:	643a      	str	r2, [r7, #64]	; 0x40
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800719c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e5      	bne.n	8007176 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3314      	adds	r3, #20
 80071b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e5      	bne.n	80071aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d119      	bne.n	800721a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f023 0310 	bic.w	r3, r3, #16
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007206:	61ba      	str	r2, [r7, #24]
 8007208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6979      	ldr	r1, [r7, #20]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	613b      	str	r3, [r7, #16]
   return(result);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007228:	bf00      	nop
 800722a:	3754      	adds	r7, #84	; 0x54
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff fee4 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b21      	cmp	r3, #33	; 0x21
 800726e:	d13e      	bne.n	80072ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	d114      	bne.n	80072a4 <UART_Transmit_IT+0x48>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d110      	bne.n	80072a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007296:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	1c9a      	adds	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]
 80072a2:	e008      	b.n	80072b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	1c59      	adds	r1, r3, #1
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6211      	str	r1, [r2, #32]
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29b      	uxth	r3, r3
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	4619      	mov	r1, r3
 80072c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10f      	bne.n	80072ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e000      	b.n	80072f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007312:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff fe73 	bl	8007008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08c      	sub	sp, #48	; 0x30
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b22      	cmp	r3, #34	; 0x22
 800733e:	f040 80ae 	bne.w	800749e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d117      	bne.n	800737c <UART_Receive_IT+0x50>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d113      	bne.n	800737c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	b29a      	uxth	r2, r3
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	1c9a      	adds	r2, r3, #2
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	629a      	str	r2, [r3, #40]	; 0x28
 800737a:	e026      	b.n	80073ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738e:	d007      	beq.n	80073a0 <UART_Receive_IT+0x74>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <UART_Receive_IT+0x82>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e008      	b.n	80073c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4619      	mov	r1, r3
 80073d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d15d      	bne.n	800749a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0220 	bic.w	r2, r2, #32
 80073ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695a      	ldr	r2, [r3, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	2b01      	cmp	r3, #1
 8007422:	d135      	bne.n	8007490 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	613b      	str	r3, [r7, #16]
   return(result);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	623a      	str	r2, [r7, #32]
 800744c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	69f9      	ldr	r1, [r7, #28]
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	61bb      	str	r3, [r7, #24]
   return(result);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b10      	cmp	r3, #16
 800746a:	d10a      	bne.n	8007482 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff fdd1 	bl	8007030 <HAL_UARTEx_RxEventCallback>
 800748e:	e002      	b.n	8007496 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7f9 ffcd 	bl	8001430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	e002      	b.n	80074a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e000      	b.n	80074a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800749e:	2302      	movs	r3, #2
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3730      	adds	r7, #48	; 0x30
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074ac:	b0c0      	sub	sp, #256	; 0x100
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	68d9      	ldr	r1, [r3, #12]
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	ea40 0301 	orr.w	r3, r0, r1
 80074d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007500:	f021 010c 	bic.w	r1, r1, #12
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800750e:	430b      	orrs	r3, r1
 8007510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	6999      	ldr	r1, [r3, #24]
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	ea40 0301 	orr.w	r3, r0, r1
 800752e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b8f      	ldr	r3, [pc, #572]	; (8007774 <UART_SetConfig+0x2cc>)
 8007538:	429a      	cmp	r2, r3
 800753a:	d005      	beq.n	8007548 <UART_SetConfig+0xa0>
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4b8d      	ldr	r3, [pc, #564]	; (8007778 <UART_SetConfig+0x2d0>)
 8007544:	429a      	cmp	r2, r3
 8007546:	d104      	bne.n	8007552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007548:	f7fd fb60 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 800754c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007550:	e003      	b.n	800755a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007552:	f7fd fb47 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8007556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800755a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007564:	f040 810c 	bne.w	8007780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756c:	2200      	movs	r2, #0
 800756e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	1891      	adds	r1, r2, r2
 8007580:	65b9      	str	r1, [r7, #88]	; 0x58
 8007582:	415b      	adcs	r3, r3
 8007584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800758a:	4621      	mov	r1, r4
 800758c:	eb12 0801 	adds.w	r8, r2, r1
 8007590:	4629      	mov	r1, r5
 8007592:	eb43 0901 	adc.w	r9, r3, r1
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075aa:	4690      	mov	r8, r2
 80075ac:	4699      	mov	r9, r3
 80075ae:	4623      	mov	r3, r4
 80075b0:	eb18 0303 	adds.w	r3, r8, r3
 80075b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075b8:	462b      	mov	r3, r5
 80075ba:	eb49 0303 	adc.w	r3, r9, r3
 80075be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075d6:	460b      	mov	r3, r1
 80075d8:	18db      	adds	r3, r3, r3
 80075da:	653b      	str	r3, [r7, #80]	; 0x50
 80075dc:	4613      	mov	r3, r2
 80075de:	eb42 0303 	adc.w	r3, r2, r3
 80075e2:	657b      	str	r3, [r7, #84]	; 0x54
 80075e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075ec:	f7f9 fb6c 	bl	8000cc8 <__aeabi_uldivmod>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4b61      	ldr	r3, [pc, #388]	; (800777c <UART_SetConfig+0x2d4>)
 80075f6:	fba3 2302 	umull	r2, r3, r3, r2
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	011c      	lsls	r4, r3, #4
 80075fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007602:	2200      	movs	r2, #0
 8007604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800760c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	1891      	adds	r1, r2, r2
 8007616:	64b9      	str	r1, [r7, #72]	; 0x48
 8007618:	415b      	adcs	r3, r3
 800761a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800761c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007620:	4641      	mov	r1, r8
 8007622:	eb12 0a01 	adds.w	sl, r2, r1
 8007626:	4649      	mov	r1, r9
 8007628:	eb43 0b01 	adc.w	fp, r3, r1
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800763c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007640:	4692      	mov	sl, r2
 8007642:	469b      	mov	fp, r3
 8007644:	4643      	mov	r3, r8
 8007646:	eb1a 0303 	adds.w	r3, sl, r3
 800764a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800764e:	464b      	mov	r3, r9
 8007650:	eb4b 0303 	adc.w	r3, fp, r3
 8007654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800766c:	460b      	mov	r3, r1
 800766e:	18db      	adds	r3, r3, r3
 8007670:	643b      	str	r3, [r7, #64]	; 0x40
 8007672:	4613      	mov	r3, r2
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	647b      	str	r3, [r7, #68]	; 0x44
 800767a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800767e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007682:	f7f9 fb21 	bl	8000cc8 <__aeabi_uldivmod>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4611      	mov	r1, r2
 800768c:	4b3b      	ldr	r3, [pc, #236]	; (800777c <UART_SetConfig+0x2d4>)
 800768e:	fba3 2301 	umull	r2, r3, r3, r1
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	2264      	movs	r2, #100	; 0x64
 8007696:	fb02 f303 	mul.w	r3, r2, r3
 800769a:	1acb      	subs	r3, r1, r3
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076a2:	4b36      	ldr	r3, [pc, #216]	; (800777c <UART_SetConfig+0x2d4>)
 80076a4:	fba3 2302 	umull	r2, r3, r3, r2
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076b0:	441c      	add	r4, r3
 80076b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	1891      	adds	r1, r2, r2
 80076ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80076cc:	415b      	adcs	r3, r3
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076d4:	4641      	mov	r1, r8
 80076d6:	1851      	adds	r1, r2, r1
 80076d8:	6339      	str	r1, [r7, #48]	; 0x30
 80076da:	4649      	mov	r1, r9
 80076dc:	414b      	adcs	r3, r1
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076ec:	4659      	mov	r1, fp
 80076ee:	00cb      	lsls	r3, r1, #3
 80076f0:	4651      	mov	r1, sl
 80076f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076f6:	4651      	mov	r1, sl
 80076f8:	00ca      	lsls	r2, r1, #3
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	4642      	mov	r2, r8
 8007702:	189b      	adds	r3, r3, r2
 8007704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007708:	464b      	mov	r3, r9
 800770a:	460a      	mov	r2, r1
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007728:	460b      	mov	r3, r1
 800772a:	18db      	adds	r3, r3, r3
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
 800772e:	4613      	mov	r3, r2
 8007730:	eb42 0303 	adc.w	r3, r2, r3
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800773a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800773e:	f7f9 fac3 	bl	8000cc8 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <UART_SetConfig+0x2d4>)
 8007748:	fba3 1302 	umull	r1, r3, r3, r2
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	2164      	movs	r1, #100	; 0x64
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	3332      	adds	r3, #50	; 0x32
 800775a:	4a08      	ldr	r2, [pc, #32]	; (800777c <UART_SetConfig+0x2d4>)
 800775c:	fba2 2303 	umull	r2, r3, r2, r3
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	f003 0207 	and.w	r2, r3, #7
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4422      	add	r2, r4
 800776e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007770:	e106      	b.n	8007980 <UART_SetConfig+0x4d8>
 8007772:	bf00      	nop
 8007774:	40011000 	.word	0x40011000
 8007778:	40011400 	.word	0x40011400
 800777c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007784:	2200      	movs	r2, #0
 8007786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800778a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800778e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007792:	4642      	mov	r2, r8
 8007794:	464b      	mov	r3, r9
 8007796:	1891      	adds	r1, r2, r2
 8007798:	6239      	str	r1, [r7, #32]
 800779a:	415b      	adcs	r3, r3
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
 800779e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077a2:	4641      	mov	r1, r8
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	4649      	mov	r1, r9
 80077a8:	eb43 0501 	adc.w	r5, r3, r1
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	00eb      	lsls	r3, r5, #3
 80077b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077ba:	00e2      	lsls	r2, r4, #3
 80077bc:	4614      	mov	r4, r2
 80077be:	461d      	mov	r5, r3
 80077c0:	4643      	mov	r3, r8
 80077c2:	18e3      	adds	r3, r4, r3
 80077c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077c8:	464b      	mov	r3, r9
 80077ca:	eb45 0303 	adc.w	r3, r5, r3
 80077ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077ee:	4629      	mov	r1, r5
 80077f0:	008b      	lsls	r3, r1, #2
 80077f2:	4621      	mov	r1, r4
 80077f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077f8:	4621      	mov	r1, r4
 80077fa:	008a      	lsls	r2, r1, #2
 80077fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007800:	f7f9 fa62 	bl	8000cc8 <__aeabi_uldivmod>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4b60      	ldr	r3, [pc, #384]	; (800798c <UART_SetConfig+0x4e4>)
 800780a:	fba3 2302 	umull	r2, r3, r3, r2
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	011c      	lsls	r4, r3, #4
 8007812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007816:	2200      	movs	r2, #0
 8007818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800781c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007824:	4642      	mov	r2, r8
 8007826:	464b      	mov	r3, r9
 8007828:	1891      	adds	r1, r2, r2
 800782a:	61b9      	str	r1, [r7, #24]
 800782c:	415b      	adcs	r3, r3
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007834:	4641      	mov	r1, r8
 8007836:	1851      	adds	r1, r2, r1
 8007838:	6139      	str	r1, [r7, #16]
 800783a:	4649      	mov	r1, r9
 800783c:	414b      	adcs	r3, r1
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800784c:	4659      	mov	r1, fp
 800784e:	00cb      	lsls	r3, r1, #3
 8007850:	4651      	mov	r1, sl
 8007852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007856:	4651      	mov	r1, sl
 8007858:	00ca      	lsls	r2, r1, #3
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	4603      	mov	r3, r0
 8007860:	4642      	mov	r2, r8
 8007862:	189b      	adds	r3, r3, r2
 8007864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007868:	464b      	mov	r3, r9
 800786a:	460a      	mov	r2, r1
 800786c:	eb42 0303 	adc.w	r3, r2, r3
 8007870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	67bb      	str	r3, [r7, #120]	; 0x78
 800787e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800788c:	4649      	mov	r1, r9
 800788e:	008b      	lsls	r3, r1, #2
 8007890:	4641      	mov	r1, r8
 8007892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007896:	4641      	mov	r1, r8
 8007898:	008a      	lsls	r2, r1, #2
 800789a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800789e:	f7f9 fa13 	bl	8000cc8 <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	4b38      	ldr	r3, [pc, #224]	; (800798c <UART_SetConfig+0x4e4>)
 80078aa:	fba3 2301 	umull	r2, r3, r3, r1
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2264      	movs	r2, #100	; 0x64
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	1acb      	subs	r3, r1, r3
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	3332      	adds	r3, #50	; 0x32
 80078bc:	4a33      	ldr	r2, [pc, #204]	; (800798c <UART_SetConfig+0x4e4>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078c8:	441c      	add	r4, r3
 80078ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ce:	2200      	movs	r2, #0
 80078d0:	673b      	str	r3, [r7, #112]	; 0x70
 80078d2:	677a      	str	r2, [r7, #116]	; 0x74
 80078d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	1891      	adds	r1, r2, r2
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	415b      	adcs	r3, r3
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078e8:	4641      	mov	r1, r8
 80078ea:	1851      	adds	r1, r2, r1
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	4649      	mov	r1, r9
 80078f0:	414b      	adcs	r3, r1
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007900:	4659      	mov	r1, fp
 8007902:	00cb      	lsls	r3, r1, #3
 8007904:	4651      	mov	r1, sl
 8007906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800790a:	4651      	mov	r1, sl
 800790c:	00ca      	lsls	r2, r1, #3
 800790e:	4610      	mov	r0, r2
 8007910:	4619      	mov	r1, r3
 8007912:	4603      	mov	r3, r0
 8007914:	4642      	mov	r2, r8
 8007916:	189b      	adds	r3, r3, r2
 8007918:	66bb      	str	r3, [r7, #104]	; 0x68
 800791a:	464b      	mov	r3, r9
 800791c:	460a      	mov	r2, r1
 800791e:	eb42 0303 	adc.w	r3, r2, r3
 8007922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	663b      	str	r3, [r7, #96]	; 0x60
 800792e:	667a      	str	r2, [r7, #100]	; 0x64
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800793c:	4649      	mov	r1, r9
 800793e:	008b      	lsls	r3, r1, #2
 8007940:	4641      	mov	r1, r8
 8007942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007946:	4641      	mov	r1, r8
 8007948:	008a      	lsls	r2, r1, #2
 800794a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800794e:	f7f9 f9bb 	bl	8000cc8 <__aeabi_uldivmod>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <UART_SetConfig+0x4e4>)
 8007958:	fba3 1302 	umull	r1, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2164      	movs	r1, #100	; 0x64
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	3332      	adds	r3, #50	; 0x32
 800796a:	4a08      	ldr	r2, [pc, #32]	; (800798c <UART_SetConfig+0x4e4>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	f003 020f 	and.w	r2, r3, #15
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4422      	add	r2, r4
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007986:	46bd      	mov	sp, r7
 8007988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800798c:	51eb851f 	.word	0x51eb851f

08007990 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <SysTick_Handler+0x1c>)
 8007996:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007998:	f001 fc26 	bl	80091e8 <xTaskGetSchedulerState>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d001      	beq.n	80079a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079a2:	f002 fc69 	bl	800a278 <xPortSysTickHandler>
  }
}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	e000e010 	.word	0xe000e010

080079b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4a07      	ldr	r2, [pc, #28]	; (80079dc <vApplicationGetIdleTaskMemory+0x2c>)
 80079c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <vApplicationGetIdleTaskMemory+0x30>)
 80079c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	601a      	str	r2, [r3, #0]
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	200007fc 	.word	0x200007fc
 80079e0:	200008a4 	.word	0x200008a4

080079e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <vApplicationGetTimerTaskMemory+0x2c>)
 80079f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4a06      	ldr	r2, [pc, #24]	; (8007a14 <vApplicationGetTimerTaskMemory+0x30>)
 80079fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a02:	601a      	str	r2, [r3, #0]
}
 8007a04:	bf00      	nop
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000aa4 	.word	0x20000aa4
 8007a14:	20000b4c 	.word	0x20000b4c

08007a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 0208 	add.w	r2, r3, #8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f103 0208 	add.w	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 0208 	add.w	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d103      	bne.n	8007ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e00c      	b.n	8007af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3308      	adds	r3, #8
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e002      	b.n	8007ae8 <vListInsert+0x2e>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d2f6      	bcs.n	8007ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6892      	ldr	r2, [r2, #8]
 8007b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d103      	bne.n	8007b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	1e5a      	subs	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueGenericReset+0x2a>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	60bb      	str	r3, [r7, #8]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007baa:	f002 fad3 	bl	800a154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	441a      	add	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	68f9      	ldr	r1, [r7, #12]
 8007bde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007be0:	fb01 f303 	mul.w	r3, r1, r3
 8007be4:	441a      	add	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	22ff      	movs	r2, #255	; 0xff
 8007bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	22ff      	movs	r2, #255	; 0xff
 8007bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d114      	bne.n	8007c2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01a      	beq.n	8007c3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3310      	adds	r3, #16
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 f929 	bl	8008e64 <xTaskRemoveFromEventList>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d012      	beq.n	8007c3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <xQueueGenericReset+0xcc>)
 8007c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	e009      	b.n	8007c3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fef2 	bl	8007a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff feed 	bl	8007a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c3e:	f002 fab9 	bl	800a1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c42:	2301      	movs	r3, #1
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	e000ed04 	.word	0xe000ed04

08007c50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08e      	sub	sp, #56	; 0x38
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <xQueueGenericCreateStatic+0x52>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <xQueueGenericCreateStatic+0x56>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericCreateStatic+0x58>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	623b      	str	r3, [r7, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <xQueueGenericCreateStatic+0x7e>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <xQueueGenericCreateStatic+0x82>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <xQueueGenericCreateStatic+0x84>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	61fb      	str	r3, [r7, #28]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cee:	2350      	movs	r3, #80	; 0x50
 8007cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b50      	cmp	r3, #80	; 0x50
 8007cf6:	d00a      	beq.n	8007d0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	61bb      	str	r3, [r7, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00d      	beq.n	8007d36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f805 	bl	8007d40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3730      	adds	r7, #48	; 0x30
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d103      	bne.n	8007d5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e002      	b.n	8007d62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d6e:	2101      	movs	r1, #1
 8007d70:	69b8      	ldr	r0, [r7, #24]
 8007d72:	f7ff ff05 	bl	8007b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d96:	2300      	movs	r3, #0
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericSend+0x32>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <xQueueGenericSend+0x40>
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <xQueueGenericSend+0x44>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <xQueueGenericSend+0x46>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <xQueueGenericSend+0x60>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d103      	bne.n	8007df6 <xQueueGenericSend+0x6e>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <xQueueGenericSend+0x72>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <xQueueGenericSend+0x74>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericSend+0x8e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	623b      	str	r3, [r7, #32]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e16:	f001 f9e7 	bl	80091e8 <xTaskGetSchedulerState>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <xQueueGenericSend+0x9e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <xQueueGenericSend+0xa2>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericSend+0xa4>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	61fb      	str	r3, [r7, #28]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e46:	f002 f985 	bl	800a154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d302      	bcc.n	8007e5c <xQueueGenericSend+0xd4>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d129      	bne.n	8007eb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e62:	f000 fa0b 	bl	800827c <prvCopyDataToQueue>
 8007e66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d010      	beq.n	8007e92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	3324      	adds	r3, #36	; 0x24
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fff5 	bl	8008e64 <xTaskRemoveFromEventList>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e80:	4b3f      	ldr	r3, [pc, #252]	; (8007f80 <xQueueGenericSend+0x1f8>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	e00a      	b.n	8007ea8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d007      	beq.n	8007ea8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e98:	4b39      	ldr	r3, [pc, #228]	; (8007f80 <xQueueGenericSend+0x1f8>)
 8007e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ea8:	f002 f984 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e063      	b.n	8007f78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eb6:	f002 f97d 	bl	800a1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e05c      	b.n	8007f78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d106      	bne.n	8007ed2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 f82f 	bl	8008f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ed2:	f002 f96f 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ed6:	f000 fd9b 	bl	8008a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eda:	f002 f93b 	bl	800a154 <vPortEnterCritical>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ee4:	b25b      	sxtb	r3, r3
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eea:	d103      	bne.n	8007ef4 <xQueueGenericSend+0x16c>
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d103      	bne.n	8007f0a <xQueueGenericSend+0x182>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f0a:	f002 f953 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f0e:	1d3a      	adds	r2, r7, #4
 8007f10:	f107 0314 	add.w	r3, r7, #20
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 f81e 	bl	8008f58 <xTaskCheckForTimeOut>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d124      	bne.n	8007f6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f24:	f000 faa2 	bl	800846c <prvIsQueueFull>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d018      	beq.n	8007f60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	3310      	adds	r3, #16
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 ff44 	bl	8008dc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f3e:	f000 fa2d 	bl	800839c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f42:	f000 fd73 	bl	8008a2c <xTaskResumeAll>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f47f af7c 	bne.w	8007e46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <xQueueGenericSend+0x1f8>)
 8007f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	e772      	b.n	8007e46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f62:	f000 fa1b 	bl	800839c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f66:	f000 fd61 	bl	8008a2c <xTaskResumeAll>
 8007f6a:	e76c      	b.n	8007e46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6e:	f000 fa15 	bl	800839c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f72:	f000 fd5b 	bl	8008a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3738      	adds	r7, #56	; 0x38
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b090      	sub	sp, #64	; 0x40
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d103      	bne.n	8007fc0 <xQueueGenericSendFromISR+0x3c>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <xQueueGenericSendFromISR+0x40>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <xQueueGenericSendFromISR+0x42>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <xQueueGenericSendFromISR+0x6a>
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <xQueueGenericSendFromISR+0x6e>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <xQueueGenericSendFromISR+0x70>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	623b      	str	r3, [r7, #32]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800800e:	f002 f983 	bl	800a318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008012:	f3ef 8211 	mrs	r2, BASEPRI
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	61fa      	str	r2, [r7, #28]
 8008028:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800802a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <xQueueGenericSendFromISR+0xbc>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d12f      	bne.n	80080a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008056:	f000 f911 	bl	800827c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800805a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d112      	bne.n	800808a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	d016      	beq.n	800809a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	3324      	adds	r3, #36	; 0x24
 8008070:	4618      	mov	r0, r3
 8008072:	f000 fef7 	bl	8008e64 <xTaskRemoveFromEventList>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00e      	beq.n	800809a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	e007      	b.n	800809a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800808a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800808e:	3301      	adds	r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	b25a      	sxtb	r2, r3
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800809a:	2301      	movs	r3, #1
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800809e:	e001      	b.n	80080a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3740      	adds	r7, #64	; 0x40
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08c      	sub	sp, #48	; 0x30
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <xQueueReceive+0x30>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	623b      	str	r3, [r7, #32]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <xQueueReceive+0x3e>
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xQueueReceive+0x42>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueReceive+0x44>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xQueueReceive+0x5e>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	61fb      	str	r3, [r7, #28]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800811a:	f001 f865 	bl	80091e8 <xTaskGetSchedulerState>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <xQueueReceive+0x6e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <xQueueReceive+0x72>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueReceive+0x74>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueReceive+0x8e>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	61bb      	str	r3, [r7, #24]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800814a:	f002 f803 	bl	800a154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01f      	beq.n	800819a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800815e:	f000 f8f7 	bl	8008350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	1e5a      	subs	r2, r3, #1
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00f      	beq.n	8008192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	3310      	adds	r3, #16
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fe74 	bl	8008e64 <xTaskRemoveFromEventList>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d007      	beq.n	8008192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008182:	4b3d      	ldr	r3, [pc, #244]	; (8008278 <xQueueReceive+0x1bc>)
 8008184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008192:	f002 f80f 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 8008196:	2301      	movs	r3, #1
 8008198:	e069      	b.n	800826e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081a0:	f002 f808 	bl	800a1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e062      	b.n	800826e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081ae:	f107 0310 	add.w	r3, r7, #16
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 feba 	bl	8008f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081b8:	2301      	movs	r3, #1
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081bc:	f001 fffa 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081c0:	f000 fc26 	bl	8008a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081c4:	f001 ffc6 	bl	800a154 <vPortEnterCritical>
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081ce:	b25b      	sxtb	r3, r3
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d103      	bne.n	80081de <xQueueReceive+0x122>
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e4:	b25b      	sxtb	r3, r3
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d103      	bne.n	80081f4 <xQueueReceive+0x138>
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f4:	f001 ffde 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081f8:	1d3a      	adds	r2, r7, #4
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fea9 	bl	8008f58 <xTaskCheckForTimeOut>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d123      	bne.n	8008254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800820c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800820e:	f000 f917 	bl	8008440 <prvIsQueueEmpty>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d017      	beq.n	8008248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	3324      	adds	r3, #36	; 0x24
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	4611      	mov	r1, r2
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fdcf 	bl	8008dc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008228:	f000 f8b8 	bl	800839c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800822c:	f000 fbfe 	bl	8008a2c <xTaskResumeAll>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d189      	bne.n	800814a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008236:	4b10      	ldr	r3, [pc, #64]	; (8008278 <xQueueReceive+0x1bc>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	e780      	b.n	800814a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800824a:	f000 f8a7 	bl	800839c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800824e:	f000 fbed 	bl	8008a2c <xTaskResumeAll>
 8008252:	e77a      	b.n	800814a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008256:	f000 f8a1 	bl	800839c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800825a:	f000 fbe7 	bl	8008a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800825e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008260:	f000 f8ee 	bl	8008440 <prvIsQueueEmpty>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	f43f af6f 	beq.w	800814a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800826c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800826e:	4618      	mov	r0, r3
 8008270:	3730      	adds	r7, #48	; 0x30
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d14d      	bne.n	800833e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 ffbc 	bl	8009224 <xTaskPriorityDisinherit>
 80082ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	609a      	str	r2, [r3, #8]
 80082b4:	e043      	b.n	800833e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d119      	bne.n	80082f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6858      	ldr	r0, [r3, #4]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	461a      	mov	r2, r3
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	f003 f955 	bl	800b576 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	441a      	add	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d32b      	bcc.n	800833e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	e026      	b.n	800833e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68d8      	ldr	r0, [r3, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	461a      	mov	r2, r3
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	f003 f93b 	bl	800b576 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	425b      	negs	r3, r3
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d207      	bcs.n	800832c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	425b      	negs	r3, r3
 8008326:	441a      	add	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d105      	bne.n	800833e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	3b01      	subs	r3, #1
 800833c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008346:	697b      	ldr	r3, [r7, #20]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d018      	beq.n	8008394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	441a      	add	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	429a      	cmp	r2, r3
 800837a:	d303      	bcc.n	8008384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68d9      	ldr	r1, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	461a      	mov	r2, r3
 800838e:	6838      	ldr	r0, [r7, #0]
 8008390:	f003 f8f1 	bl	800b576 <memcpy>
	}
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083a4:	f001 fed6 	bl	800a154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083b0:	e011      	b.n	80083d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d012      	beq.n	80083e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3324      	adds	r3, #36	; 0x24
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fd50 	bl	8008e64 <xTaskRemoveFromEventList>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083ca:	f000 fe27 	bl	800901c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dce9      	bgt.n	80083b2 <prvUnlockQueue+0x16>
 80083de:	e000      	b.n	80083e2 <prvUnlockQueue+0x46>
					break;
 80083e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083ea:	f001 fee3 	bl	800a1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083ee:	f001 feb1 	bl	800a154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083fa:	e011      	b.n	8008420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d012      	beq.n	800842a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3310      	adds	r3, #16
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fd2b 	bl	8008e64 <xTaskRemoveFromEventList>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008414:	f000 fe02 	bl	800901c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	3b01      	subs	r3, #1
 800841c:	b2db      	uxtb	r3, r3
 800841e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	dce9      	bgt.n	80083fc <prvUnlockQueue+0x60>
 8008428:	e000      	b.n	800842c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800842a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	22ff      	movs	r2, #255	; 0xff
 8008430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008434:	f001 febe 	bl	800a1b4 <vPortExitCritical>
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008448:	f001 fe84 	bl	800a154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e001      	b.n	800845e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fea9 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 8008462:	68fb      	ldr	r3, [r7, #12]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008474:	f001 fe6e 	bl	800a154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	429a      	cmp	r2, r3
 8008482:	d102      	bne.n	800848a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e001      	b.n	800848e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800848e:	f001 fe91 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 8008492:	68fb      	ldr	r3, [r7, #12]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	e014      	b.n	80084d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084ac:	4a0f      	ldr	r2, [pc, #60]	; (80084ec <vQueueAddToRegistry+0x50>)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084b8:	490c      	ldr	r1, [pc, #48]	; (80084ec <vQueueAddToRegistry+0x50>)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084c2:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <vQueueAddToRegistry+0x50>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4413      	add	r3, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084ce:	e006      	b.n	80084de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d9e7      	bls.n	80084ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000f4c 	.word	0x20000f4c

080084f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008500:	f001 fe28 	bl	800a154 <vPortEnterCritical>
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800850a:	b25b      	sxtb	r3, r3
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d103      	bne.n	800851a <vQueueWaitForMessageRestricted+0x2a>
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008520:	b25b      	sxtb	r3, r3
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d103      	bne.n	8008530 <vQueueWaitForMessageRestricted+0x40>
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008530:	f001 fe40 	bl	800a1b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	2b00      	cmp	r3, #0
 800853a:	d106      	bne.n	800854a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	3324      	adds	r3, #36	; 0x24
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fc61 	bl	8008e0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800854a:	6978      	ldr	r0, [r7, #20]
 800854c:	f7ff ff26 	bl	800839c <prvUnlockQueue>
	}
 8008550:	bf00      	nop
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08e      	sub	sp, #56	; 0x38
 800855c:	af04      	add	r7, sp, #16
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xTaskCreateStatic+0x2a>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	623b      	str	r3, [r7, #32]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xTaskCreateStatic+0x46>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	61fb      	str	r3, [r7, #28]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800859e:	23a8      	movs	r3, #168	; 0xa8
 80085a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2ba8      	cmp	r3, #168	; 0xa8
 80085a6:	d00a      	beq.n	80085be <xTaskCreateStatic+0x66>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	61bb      	str	r3, [r7, #24]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d01e      	beq.n	8008604 <xTaskCreateStatic+0xac>
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01b      	beq.n	8008604 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085de:	2300      	movs	r3, #0
 80085e0:	9303      	str	r3, [sp, #12]
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	f107 0314 	add.w	r3, r7, #20
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f850 	bl	800869c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085fe:	f000 f8f3 	bl	80087e8 <prvAddNewTaskToReadyList>
 8008602:	e001      	b.n	8008608 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008608:	697b      	ldr	r3, [r7, #20]
	}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	; 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008612:	b580      	push	{r7, lr}
 8008614:	b08c      	sub	sp, #48	; 0x30
 8008616:	af04      	add	r7, sp, #16
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 feb6 	bl	800a398 <pvPortMalloc>
 800862c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00e      	beq.n	8008652 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008634:	20a8      	movs	r0, #168	; 0xa8
 8008636:	f001 feaf 	bl	800a398 <pvPortMalloc>
 800863a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
 8008648:	e005      	b.n	8008656 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800864a:	6978      	ldr	r0, [r7, #20]
 800864c:	f001 ff70 	bl	800a530 <vPortFree>
 8008650:	e001      	b.n	8008656 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d017      	beq.n	800868c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	2300      	movs	r3, #0
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	9302      	str	r3, [sp, #8]
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f80e 	bl	800869c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008680:	69f8      	ldr	r0, [r7, #28]
 8008682:	f000 f8b1 	bl	80087e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008686:	2301      	movs	r3, #1
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e002      	b.n	8008692 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800868c:	f04f 33ff 	mov.w	r3, #4294967295
 8008690:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008692:	69bb      	ldr	r3, [r7, #24]
	}
 8008694:	4618      	mov	r0, r3
 8008696:	3720      	adds	r7, #32
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	461a      	mov	r2, r3
 80086b4:	21a5      	movs	r1, #165	; 0xa5
 80086b6:	f002 fe88 	bl	800b3ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086c4:	3b01      	subs	r3, #1
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	f023 0307 	bic.w	r3, r3, #7
 80086d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	617b      	str	r3, [r7, #20]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01f      	beq.n	800873a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	e012      	b.n	8008726 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	7819      	ldrb	r1, [r3, #0]
 8008708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	3334      	adds	r3, #52	; 0x34
 8008710:	460a      	mov	r2, r1
 8008712:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d006      	beq.n	800872e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	3301      	adds	r3, #1
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2b0f      	cmp	r3, #15
 800872a:	d9e9      	bls.n	8008700 <prvInitialiseNewTask+0x64>
 800872c:	e000      	b.n	8008730 <prvInitialiseNewTask+0x94>
			{
				break;
 800872e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008738:	e003      	b.n	8008742 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	2b37      	cmp	r3, #55	; 0x37
 8008746:	d901      	bls.n	800874c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008748:	2337      	movs	r3, #55	; 0x37
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008750:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008756:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	2200      	movs	r2, #0
 800875c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	3304      	adds	r3, #4
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff f978 	bl	8007a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	3318      	adds	r3, #24
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff f973 	bl	8007a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008786:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	2200      	movs	r2, #0
 8008794:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	3354      	adds	r3, #84	; 0x54
 800879c:	224c      	movs	r2, #76	; 0x4c
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 fe12 	bl	800b3ca <memset>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	4a0c      	ldr	r2, [pc, #48]	; (80087dc <prvInitialiseNewTask+0x140>)
 80087aa:	659a      	str	r2, [r3, #88]	; 0x58
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <prvInitialiseNewTask+0x144>)
 80087b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	4a0b      	ldr	r2, [pc, #44]	; (80087e4 <prvInitialiseNewTask+0x148>)
 80087b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	69b8      	ldr	r0, [r7, #24]
 80087be:	f001 fb9f 	bl	8009f00 <pxPortInitialiseStack>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d4:	bf00      	nop
 80087d6:	3720      	adds	r7, #32
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	200051e0 	.word	0x200051e0
 80087e0:	20005248 	.word	0x20005248
 80087e4:	200052b0 	.word	0x200052b0

080087e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087f0:	f001 fcb0 	bl	800a154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087f4:	4b2d      	ldr	r3, [pc, #180]	; (80088ac <prvAddNewTaskToReadyList+0xc4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a2c      	ldr	r2, [pc, #176]	; (80088ac <prvAddNewTaskToReadyList+0xc4>)
 80087fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087fe:	4b2c      	ldr	r3, [pc, #176]	; (80088b0 <prvAddNewTaskToReadyList+0xc8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008806:	4a2a      	ldr	r2, [pc, #168]	; (80088b0 <prvAddNewTaskToReadyList+0xc8>)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800880c:	4b27      	ldr	r3, [pc, #156]	; (80088ac <prvAddNewTaskToReadyList+0xc4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d110      	bne.n	8008836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008814:	f000 fc26 	bl	8009064 <prvInitialiseTaskLists>
 8008818:	e00d      	b.n	8008836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800881a:	4b26      	ldr	r3, [pc, #152]	; (80088b4 <prvAddNewTaskToReadyList+0xcc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008822:	4b23      	ldr	r3, [pc, #140]	; (80088b0 <prvAddNewTaskToReadyList+0xc8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	429a      	cmp	r2, r3
 800882e:	d802      	bhi.n	8008836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008830:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <prvAddNewTaskToReadyList+0xc8>)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008836:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <prvAddNewTaskToReadyList+0xd0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <prvAddNewTaskToReadyList+0xd0>)
 800883e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008840:	4b1d      	ldr	r3, [pc, #116]	; (80088b8 <prvAddNewTaskToReadyList+0xd0>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884c:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <prvAddNewTaskToReadyList+0xd4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d903      	bls.n	800885c <prvAddNewTaskToReadyList+0x74>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	4a18      	ldr	r2, [pc, #96]	; (80088bc <prvAddNewTaskToReadyList+0xd4>)
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <prvAddNewTaskToReadyList+0xd8>)
 800886a:	441a      	add	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	4619      	mov	r1, r3
 8008872:	4610      	mov	r0, r2
 8008874:	f7ff f8fd 	bl	8007a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008878:	f001 fc9c 	bl	800a1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800887c:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <prvAddNewTaskToReadyList+0xcc>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <prvAddNewTaskToReadyList+0xc8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d207      	bcs.n	80088a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <prvAddNewTaskToReadyList+0xdc>)
 8008894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20001460 	.word	0x20001460
 80088b0:	20000f8c 	.word	0x20000f8c
 80088b4:	2000146c 	.word	0x2000146c
 80088b8:	2000147c 	.word	0x2000147c
 80088bc:	20001468 	.word	0x20001468
 80088c0:	20000f90 	.word	0x20000f90
 80088c4:	e000ed04 	.word	0xe000ed04

080088c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d017      	beq.n	800890a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088da:	4b13      	ldr	r3, [pc, #76]	; (8008928 <vTaskDelay+0x60>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <vTaskDelay+0x30>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	60bb      	str	r3, [r7, #8]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088f8:	f000 f88a 	bl	8008a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088fc:	2100      	movs	r1, #0
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 ff00 	bl	8009704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008904:	f000 f892 	bl	8008a2c <xTaskResumeAll>
 8008908:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d107      	bne.n	8008920 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <vTaskDelay+0x64>)
 8008912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008920:	bf00      	nop
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20001488 	.word	0x20001488
 800892c:	e000ed04 	.word	0xe000ed04

08008930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08a      	sub	sp, #40	; 0x28
 8008934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800893e:	463a      	mov	r2, r7
 8008940:	1d39      	adds	r1, r7, #4
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff f832 	bl	80079b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	9202      	str	r2, [sp, #8]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	2300      	movs	r3, #0
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	2300      	movs	r3, #0
 800895c:	460a      	mov	r2, r1
 800895e:	4924      	ldr	r1, [pc, #144]	; (80089f0 <vTaskStartScheduler+0xc0>)
 8008960:	4824      	ldr	r0, [pc, #144]	; (80089f4 <vTaskStartScheduler+0xc4>)
 8008962:	f7ff fdf9 	bl	8008558 <xTaskCreateStatic>
 8008966:	4603      	mov	r3, r0
 8008968:	4a23      	ldr	r2, [pc, #140]	; (80089f8 <vTaskStartScheduler+0xc8>)
 800896a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800896c:	4b22      	ldr	r3, [pc, #136]	; (80089f8 <vTaskStartScheduler+0xc8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e001      	b.n	800897e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d102      	bne.n	800898a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008984:	f000 ff12 	bl	80097ac <xTimerCreateTimerTask>
 8008988:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d11b      	bne.n	80089c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
}
 80089a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <vTaskStartScheduler+0xcc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3354      	adds	r3, #84	; 0x54
 80089aa:	4a15      	ldr	r2, [pc, #84]	; (8008a00 <vTaskStartScheduler+0xd0>)
 80089ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089ae:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <vTaskStartScheduler+0xd4>)
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295
 80089b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <vTaskStartScheduler+0xd8>)
 80089b8:	2201      	movs	r2, #1
 80089ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089bc:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <vTaskStartScheduler+0xdc>)
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089c2:	f001 fb25 	bl	800a010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089c6:	e00e      	b.n	80089e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ce:	d10a      	bne.n	80089e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <vTaskStartScheduler+0xb4>
}
 80089e6:	bf00      	nop
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	0800e658 	.word	0x0800e658
 80089f4:	08009035 	.word	0x08009035
 80089f8:	20001484 	.word	0x20001484
 80089fc:	20000f8c 	.word	0x20000f8c
 8008a00:	200001dc 	.word	0x200001dc
 8008a04:	20001480 	.word	0x20001480
 8008a08:	2000146c 	.word	0x2000146c
 8008a0c:	20001464 	.word	0x20001464

08008a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <vTaskSuspendAll+0x18>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	4a03      	ldr	r2, [pc, #12]	; (8008a28 <vTaskSuspendAll+0x18>)
 8008a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a1e:	bf00      	nop
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20001488 	.word	0x20001488

08008a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a3a:	4b42      	ldr	r3, [pc, #264]	; (8008b44 <xTaskResumeAll+0x118>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	603b      	str	r3, [r7, #0]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a58:	f001 fb7c 	bl	800a154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a5c:	4b39      	ldr	r3, [pc, #228]	; (8008b44 <xTaskResumeAll+0x118>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	4a38      	ldr	r2, [pc, #224]	; (8008b44 <xTaskResumeAll+0x118>)
 8008a64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a66:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <xTaskResumeAll+0x118>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d162      	bne.n	8008b34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a6e:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <xTaskResumeAll+0x11c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d05e      	beq.n	8008b34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a76:	e02f      	b.n	8008ad8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a78:	4b34      	ldr	r3, [pc, #208]	; (8008b4c <xTaskResumeAll+0x120>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3318      	adds	r3, #24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff f851 	bl	8007b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff f84c 	bl	8007b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	4b2d      	ldr	r3, [pc, #180]	; (8008b50 <xTaskResumeAll+0x124>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d903      	bls.n	8008aa8 <xTaskResumeAll+0x7c>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	4a2a      	ldr	r2, [pc, #168]	; (8008b50 <xTaskResumeAll+0x124>)
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4a27      	ldr	r2, [pc, #156]	; (8008b54 <xTaskResumeAll+0x128>)
 8008ab6:	441a      	add	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7fe ffd7 	bl	8007a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4b23      	ldr	r3, [pc, #140]	; (8008b58 <xTaskResumeAll+0x12c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d302      	bcc.n	8008ad8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ad2:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <xTaskResumeAll+0x130>)
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ad8:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <xTaskResumeAll+0x120>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1cb      	bne.n	8008a78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ae6:	f000 fb5f 	bl	80091a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008aea:	4b1d      	ldr	r3, [pc, #116]	; (8008b60 <xTaskResumeAll+0x134>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d010      	beq.n	8008b18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008af6:	f000 f847 	bl	8008b88 <xTaskIncrementTick>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b00:	4b16      	ldr	r3, [pc, #88]	; (8008b5c <xTaskResumeAll+0x130>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f1      	bne.n	8008af6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b12:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <xTaskResumeAll+0x134>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b18:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <xTaskResumeAll+0x130>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d009      	beq.n	8008b34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b24:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <xTaskResumeAll+0x138>)
 8008b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b34:	f001 fb3e 	bl	800a1b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b38:	68bb      	ldr	r3, [r7, #8]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20001488 	.word	0x20001488
 8008b48:	20001460 	.word	0x20001460
 8008b4c:	20001420 	.word	0x20001420
 8008b50:	20001468 	.word	0x20001468
 8008b54:	20000f90 	.word	0x20000f90
 8008b58:	20000f8c 	.word	0x20000f8c
 8008b5c:	20001474 	.word	0x20001474
 8008b60:	20001470 	.word	0x20001470
 8008b64:	e000ed04 	.word	0xe000ed04

08008b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <xTaskGetTickCount+0x1c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b74:	687b      	ldr	r3, [r7, #4]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20001464 	.word	0x20001464

08008b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b92:	4b4f      	ldr	r3, [pc, #316]	; (8008cd0 <xTaskIncrementTick+0x148>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f040 808f 	bne.w	8008cba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b9c:	4b4d      	ldr	r3, [pc, #308]	; (8008cd4 <xTaskIncrementTick+0x14c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ba4:	4a4b      	ldr	r2, [pc, #300]	; (8008cd4 <xTaskIncrementTick+0x14c>)
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d120      	bne.n	8008bf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bb0:	4b49      	ldr	r3, [pc, #292]	; (8008cd8 <xTaskIncrementTick+0x150>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	603b      	str	r3, [r7, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <xTaskIncrementTick+0x46>
 8008bd0:	4b41      	ldr	r3, [pc, #260]	; (8008cd8 <xTaskIncrementTick+0x150>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <xTaskIncrementTick+0x154>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a3f      	ldr	r2, [pc, #252]	; (8008cd8 <xTaskIncrementTick+0x150>)
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4a3f      	ldr	r2, [pc, #252]	; (8008cdc <xTaskIncrementTick+0x154>)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	4b3e      	ldr	r3, [pc, #248]	; (8008ce0 <xTaskIncrementTick+0x158>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3301      	adds	r3, #1
 8008bea:	4a3d      	ldr	r2, [pc, #244]	; (8008ce0 <xTaskIncrementTick+0x158>)
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	f000 fadb 	bl	80091a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bf2:	4b3c      	ldr	r3, [pc, #240]	; (8008ce4 <xTaskIncrementTick+0x15c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d349      	bcc.n	8008c90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bfc:	4b36      	ldr	r3, [pc, #216]	; (8008cd8 <xTaskIncrementTick+0x150>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c06:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <xTaskIncrementTick+0x15c>)
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	601a      	str	r2, [r3, #0]
					break;
 8008c0e:	e03f      	b.n	8008c90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c10:	4b31      	ldr	r3, [pc, #196]	; (8008cd8 <xTaskIncrementTick+0x150>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d203      	bcs.n	8008c30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c28:	4a2e      	ldr	r2, [pc, #184]	; (8008ce4 <xTaskIncrementTick+0x15c>)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c2e:	e02f      	b.n	8008c90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe ff79 	bl	8007b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3318      	adds	r3, #24
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe ff70 	bl	8007b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4b25      	ldr	r3, [pc, #148]	; (8008ce8 <xTaskIncrementTick+0x160>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d903      	bls.n	8008c60 <xTaskIncrementTick+0xd8>
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a22      	ldr	r2, [pc, #136]	; (8008ce8 <xTaskIncrementTick+0x160>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <xTaskIncrementTick+0x164>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fe fefb 	bl	8007a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	4b1b      	ldr	r3, [pc, #108]	; (8008cf0 <xTaskIncrementTick+0x168>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d3b8      	bcc.n	8008bfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c8e:	e7b5      	b.n	8008bfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c90:	4b17      	ldr	r3, [pc, #92]	; (8008cf0 <xTaskIncrementTick+0x168>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c96:	4915      	ldr	r1, [pc, #84]	; (8008cec <xTaskIncrementTick+0x164>)
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d901      	bls.n	8008cac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cac:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <xTaskIncrementTick+0x16c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d007      	beq.n	8008cc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e004      	b.n	8008cc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <xTaskIncrementTick+0x170>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	4a0d      	ldr	r2, [pc, #52]	; (8008cf8 <xTaskIncrementTick+0x170>)
 8008cc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cc4:	697b      	ldr	r3, [r7, #20]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20001488 	.word	0x20001488
 8008cd4:	20001464 	.word	0x20001464
 8008cd8:	20001418 	.word	0x20001418
 8008cdc:	2000141c 	.word	0x2000141c
 8008ce0:	20001478 	.word	0x20001478
 8008ce4:	20001480 	.word	0x20001480
 8008ce8:	20001468 	.word	0x20001468
 8008cec:	20000f90 	.word	0x20000f90
 8008cf0:	20000f8c 	.word	0x20000f8c
 8008cf4:	20001474 	.word	0x20001474
 8008cf8:	20001470 	.word	0x20001470

08008cfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d02:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <vTaskSwitchContext+0xb0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d0a:	4b29      	ldr	r3, [pc, #164]	; (8008db0 <vTaskSwitchContext+0xb4>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d10:	e046      	b.n	8008da0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008d12:	4b27      	ldr	r3, [pc, #156]	; (8008db0 <vTaskSwitchContext+0xb4>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d18:	4b26      	ldr	r3, [pc, #152]	; (8008db4 <vTaskSwitchContext+0xb8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	e010      	b.n	8008d42 <vTaskSwitchContext+0x46>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10a      	bne.n	8008d3c <vTaskSwitchContext+0x40>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	607b      	str	r3, [r7, #4]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <vTaskSwitchContext+0x3e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	491d      	ldr	r1, [pc, #116]	; (8008db8 <vTaskSwitchContext+0xbc>)
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4613      	mov	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	440b      	add	r3, r1
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0e4      	beq.n	8008d20 <vTaskSwitchContext+0x24>
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4a15      	ldr	r2, [pc, #84]	; (8008db8 <vTaskSwitchContext+0xbc>)
 8008d62:	4413      	add	r3, r2
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	605a      	str	r2, [r3, #4]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	3308      	adds	r3, #8
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d104      	bne.n	8008d86 <vTaskSwitchContext+0x8a>
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	4a0b      	ldr	r2, [pc, #44]	; (8008dbc <vTaskSwitchContext+0xc0>)
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	4a08      	ldr	r2, [pc, #32]	; (8008db4 <vTaskSwitchContext+0xb8>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d96:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <vTaskSwitchContext+0xc0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3354      	adds	r3, #84	; 0x54
 8008d9c:	4a08      	ldr	r2, [pc, #32]	; (8008dc0 <vTaskSwitchContext+0xc4>)
 8008d9e:	6013      	str	r3, [r2, #0]
}
 8008da0:	bf00      	nop
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	20001488 	.word	0x20001488
 8008db0:	20001474 	.word	0x20001474
 8008db4:	20001468 	.word	0x20001468
 8008db8:	20000f90 	.word	0x20000f90
 8008dbc:	20000f8c 	.word	0x20000f8c
 8008dc0:	200001dc 	.word	0x200001dc

08008dc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60fb      	str	r3, [r7, #12]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dea:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <vTaskPlaceOnEventList+0x44>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7fe fe61 	bl	8007aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008df8:	2101      	movs	r1, #1
 8008dfa:	6838      	ldr	r0, [r7, #0]
 8008dfc:	f000 fc82 	bl	8009704 <prvAddCurrentTaskToDelayedList>
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000f8c 	.word	0x20000f8c

08008e0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	617b      	str	r3, [r7, #20]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e34:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3318      	adds	r3, #24
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7fe fe18 	bl	8007a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	68b8      	ldr	r0, [r7, #8]
 8008e52:	f000 fc57 	bl	8009704 <prvAddCurrentTaskToDelayedList>
	}
 8008e56:	bf00      	nop
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000f8c 	.word	0x20000f8c

08008e64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	60fb      	str	r3, [r7, #12]
}
 8008e8c:	bf00      	nop
 8008e8e:	e7fe      	b.n	8008e8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	3318      	adds	r3, #24
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fe49 	bl	8007b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e9a:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <xTaskRemoveFromEventList+0xb0>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d11d      	bne.n	8008ede <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fe40 	bl	8007b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	4b19      	ldr	r3, [pc, #100]	; (8008f18 <xTaskRemoveFromEventList+0xb4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d903      	bls.n	8008ec0 <xTaskRemoveFromEventList+0x5c>
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	4a16      	ldr	r2, [pc, #88]	; (8008f18 <xTaskRemoveFromEventList+0xb4>)
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <xTaskRemoveFromEventList+0xb8>)
 8008ece:	441a      	add	r2, r3
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	f7fe fdcb 	bl	8007a72 <vListInsertEnd>
 8008edc:	e005      	b.n	8008eea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3318      	adds	r3, #24
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	480e      	ldr	r0, [pc, #56]	; (8008f20 <xTaskRemoveFromEventList+0xbc>)
 8008ee6:	f7fe fdc4 	bl	8007a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <xTaskRemoveFromEventList+0xc0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d905      	bls.n	8008f04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <xTaskRemoveFromEventList+0xc4>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e001      	b.n	8008f08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f08:	697b      	ldr	r3, [r7, #20]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20001488 	.word	0x20001488
 8008f18:	20001468 	.word	0x20001468
 8008f1c:	20000f90 	.word	0x20000f90
 8008f20:	20001420 	.word	0x20001420
 8008f24:	20000f8c 	.word	0x20000f8c
 8008f28:	20001474 	.word	0x20001474

08008f2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f34:	4b06      	ldr	r3, [pc, #24]	; (8008f50 <vTaskInternalSetTimeOutState+0x24>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <vTaskInternalSetTimeOutState+0x28>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	605a      	str	r2, [r3, #4]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	20001478 	.word	0x20001478
 8008f54:	20001464 	.word	0x20001464

08008f58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	613b      	str	r3, [r7, #16]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	60fb      	str	r3, [r7, #12]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f9a:	f001 f8db 	bl	800a154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f9e:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <xTaskCheckForTimeOut+0xbc>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d102      	bne.n	8008fbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e023      	b.n	8009006 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4b15      	ldr	r3, [pc, #84]	; (8009018 <xTaskCheckForTimeOut+0xc0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d007      	beq.n	8008fda <xTaskCheckForTimeOut+0x82>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d302      	bcc.n	8008fda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	e015      	b.n	8009006 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d20b      	bcs.n	8008ffc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ff9b 	bl	8008f2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	e004      	b.n	8009006 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009006:	f001 f8d5 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 800900a:	69fb      	ldr	r3, [r7, #28]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20001464 	.word	0x20001464
 8009018:	20001478 	.word	0x20001478

0800901c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009020:	4b03      	ldr	r3, [pc, #12]	; (8009030 <vTaskMissedYield+0x14>)
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
}
 8009026:	bf00      	nop
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20001474 	.word	0x20001474

08009034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800903c:	f000 f852 	bl	80090e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <prvIdleTask+0x28>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d9f9      	bls.n	800903c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <prvIdleTask+0x2c>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009058:	e7f0      	b.n	800903c <prvIdleTask+0x8>
 800905a:	bf00      	nop
 800905c:	20000f90 	.word	0x20000f90
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800906a:	2300      	movs	r3, #0
 800906c:	607b      	str	r3, [r7, #4]
 800906e:	e00c      	b.n	800908a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4a12      	ldr	r2, [pc, #72]	; (80090c4 <prvInitialiseTaskLists+0x60>)
 800907c:	4413      	add	r3, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fcca 	bl	8007a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3301      	adds	r3, #1
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b37      	cmp	r3, #55	; 0x37
 800908e:	d9ef      	bls.n	8009070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009090:	480d      	ldr	r0, [pc, #52]	; (80090c8 <prvInitialiseTaskLists+0x64>)
 8009092:	f7fe fcc1 	bl	8007a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009096:	480d      	ldr	r0, [pc, #52]	; (80090cc <prvInitialiseTaskLists+0x68>)
 8009098:	f7fe fcbe 	bl	8007a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800909c:	480c      	ldr	r0, [pc, #48]	; (80090d0 <prvInitialiseTaskLists+0x6c>)
 800909e:	f7fe fcbb 	bl	8007a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090a2:	480c      	ldr	r0, [pc, #48]	; (80090d4 <prvInitialiseTaskLists+0x70>)
 80090a4:	f7fe fcb8 	bl	8007a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090a8:	480b      	ldr	r0, [pc, #44]	; (80090d8 <prvInitialiseTaskLists+0x74>)
 80090aa:	f7fe fcb5 	bl	8007a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ae:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <prvInitialiseTaskLists+0x78>)
 80090b0:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <prvInitialiseTaskLists+0x64>)
 80090b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <prvInitialiseTaskLists+0x7c>)
 80090b6:	4a05      	ldr	r2, [pc, #20]	; (80090cc <prvInitialiseTaskLists+0x68>)
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000f90 	.word	0x20000f90
 80090c8:	200013f0 	.word	0x200013f0
 80090cc:	20001404 	.word	0x20001404
 80090d0:	20001420 	.word	0x20001420
 80090d4:	20001434 	.word	0x20001434
 80090d8:	2000144c 	.word	0x2000144c
 80090dc:	20001418 	.word	0x20001418
 80090e0:	2000141c 	.word	0x2000141c

080090e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090ea:	e019      	b.n	8009120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090ec:	f001 f832 	bl	800a154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f0:	4b10      	ldr	r3, [pc, #64]	; (8009134 <prvCheckTasksWaitingTermination+0x50>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fd15 	bl	8007b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009102:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <prvCheckTasksWaitingTermination+0x54>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3b01      	subs	r3, #1
 8009108:	4a0b      	ldr	r2, [pc, #44]	; (8009138 <prvCheckTasksWaitingTermination+0x54>)
 800910a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800910c:	4b0b      	ldr	r3, [pc, #44]	; (800913c <prvCheckTasksWaitingTermination+0x58>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3b01      	subs	r3, #1
 8009112:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvCheckTasksWaitingTermination+0x58>)
 8009114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009116:	f001 f84d 	bl	800a1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f810 	bl	8009140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <prvCheckTasksWaitingTermination+0x58>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e1      	bne.n	80090ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20001434 	.word	0x20001434
 8009138:	20001460 	.word	0x20001460
 800913c:	20001448 	.word	0x20001448

08009140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3354      	adds	r3, #84	; 0x54
 800914c:	4618      	mov	r0, r3
 800914e:	f002 f959 	bl	800b404 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009158:	2b00      	cmp	r3, #0
 800915a:	d108      	bne.n	800916e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	4618      	mov	r0, r3
 8009162:	f001 f9e5 	bl	800a530 <vPortFree>
				vPortFree( pxTCB );
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 f9e2 	bl	800a530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800916c:	e018      	b.n	80091a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009174:	2b01      	cmp	r3, #1
 8009176:	d103      	bne.n	8009180 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 f9d9 	bl	800a530 <vPortFree>
	}
 800917e:	e00f      	b.n	80091a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009186:	2b02      	cmp	r3, #2
 8009188:	d00a      	beq.n	80091a0 <prvDeleteTCB+0x60>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	60fb      	str	r3, [r7, #12]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <prvDeleteTCB+0x5e>
	}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <prvResetNextTaskUnblockTime+0x38>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <prvResetNextTaskUnblockTime+0x3c>)
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091c0:	e008      	b.n	80091d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c2:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <prvResetNextTaskUnblockTime+0x38>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	4a04      	ldr	r2, [pc, #16]	; (80091e4 <prvResetNextTaskUnblockTime+0x3c>)
 80091d2:	6013      	str	r3, [r2, #0]
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20001418 	.word	0x20001418
 80091e4:	20001480 	.word	0x20001480

080091e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091ee:	4b0b      	ldr	r3, [pc, #44]	; (800921c <xTaskGetSchedulerState+0x34>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091f6:	2301      	movs	r3, #1
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	e008      	b.n	800920e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091fc:	4b08      	ldr	r3, [pc, #32]	; (8009220 <xTaskGetSchedulerState+0x38>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009204:	2302      	movs	r3, #2
 8009206:	607b      	str	r3, [r7, #4]
 8009208:	e001      	b.n	800920e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800920a:	2300      	movs	r3, #0
 800920c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800920e:	687b      	ldr	r3, [r7, #4]
	}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	2000146c 	.word	0x2000146c
 8009220:	20001488 	.word	0x20001488

08009224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d056      	beq.n	80092e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <xTaskPriorityDisinherit+0xd0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d00a      	beq.n	800925a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	60fb      	str	r3, [r7, #12]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60bb      	str	r3, [r7, #8]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927c:	1e5a      	subs	r2, r3, #1
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928a:	429a      	cmp	r2, r3
 800928c:	d02c      	beq.n	80092e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009292:	2b00      	cmp	r3, #0
 8009294:	d128      	bne.n	80092e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3304      	adds	r3, #4
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fc46 	bl	8007b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b8:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <xTaskPriorityDisinherit+0xd4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d903      	bls.n	80092c8 <xTaskPriorityDisinherit+0xa4>
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	4a0c      	ldr	r2, [pc, #48]	; (80092f8 <xTaskPriorityDisinherit+0xd4>)
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4a09      	ldr	r2, [pc, #36]	; (80092fc <xTaskPriorityDisinherit+0xd8>)
 80092d6:	441a      	add	r2, r3
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3304      	adds	r3, #4
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f7fe fbc7 	bl	8007a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092e4:	2301      	movs	r3, #1
 80092e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092e8:	697b      	ldr	r3, [r7, #20]
	}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000f8c 	.word	0x20000f8c
 80092f8:	20001468 	.word	0x20001468
 80092fc:	20000f90 	.word	0x20000f90

08009300 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800930e:	f000 ff21 	bl	800a154 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009312:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <xTaskNotifyWait+0xb8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d01c      	beq.n	800935a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009320:	4b25      	ldr	r3, [pc, #148]	; (80093b8 <xTaskNotifyWait+0xb8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	43d2      	mvns	r2, r2
 800932c:	400a      	ands	r2, r1
 800932e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009332:	4b21      	ldr	r3, [pc, #132]	; (80093b8 <xTaskNotifyWait+0xb8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00b      	beq.n	800935a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009342:	2101      	movs	r1, #1
 8009344:	6838      	ldr	r0, [r7, #0]
 8009346:	f000 f9dd 	bl	8009704 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800934a:	4b1c      	ldr	r3, [pc, #112]	; (80093bc <xTaskNotifyWait+0xbc>)
 800934c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800935a:	f000 ff2b 	bl	800a1b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800935e:	f000 fef9 	bl	800a154 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009368:	4b13      	ldr	r3, [pc, #76]	; (80093b8 <xTaskNotifyWait+0xb8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009374:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <xTaskNotifyWait+0xb8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d002      	beq.n	8009388 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	e00a      	b.n	800939e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009388:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <xTaskNotifyWait+0xb8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	43d2      	mvns	r2, r2
 8009394:	400a      	ands	r2, r1
 8009396:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 800939a:	2301      	movs	r3, #1
 800939c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <xTaskNotifyWait+0xb8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 80093a8:	f000 ff04 	bl	800a1b4 <vPortExitCritical>

		return xReturn;
 80093ac:	697b      	ldr	r3, [r7, #20]
	}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000f8c 	.word	0x20000f8c
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08a      	sub	sp, #40	; 0x28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	4613      	mov	r3, r2
 80093ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80093d0:	2301      	movs	r3, #1
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <xTaskGenericNotify+0x30>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	61bb      	str	r3, [r7, #24]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80093f4:	f000 feae 	bl	800a154 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d004      	beq.n	8009408 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800940e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	2b04      	cmp	r3, #4
 800941c:	d82d      	bhi.n	800947a <xTaskGenericNotify+0xba>
 800941e:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <xTaskGenericNotify+0x64>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	0800949d 	.word	0x0800949d
 8009428:	08009439 	.word	0x08009439
 800942c:	0800944b 	.word	0x0800944b
 8009430:	0800945b 	.word	0x0800945b
 8009434:	08009465 	.word	0x08009465
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	431a      	orrs	r2, r3
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8009448:	e02b      	b.n	80094a2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8009458:	e023      	b.n	80094a2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8009462:	e01e      	b.n	80094a2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009464:	7ffb      	ldrb	r3, [r7, #31]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d004      	beq.n	8009474 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009472:	e016      	b.n	80094a2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009474:	2300      	movs	r3, #0
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009478:	e013      	b.n	80094a2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d00c      	beq.n	80094a0 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	617b      	str	r3, [r7, #20]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xTaskGenericNotify+0xda>
					break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <xTaskGenericNotify+0xe2>

					break;
 80094a0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094a2:	7ffb      	ldrb	r3, [r7, #31]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d13a      	bne.n	800951e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fb3d 	bl	8007b2c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4b1d      	ldr	r3, [pc, #116]	; (800952c <xTaskGenericNotify+0x16c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d903      	bls.n	80094c6 <xTaskGenericNotify+0x106>
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	4a1a      	ldr	r2, [pc, #104]	; (800952c <xTaskGenericNotify+0x16c>)
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4a17      	ldr	r2, [pc, #92]	; (8009530 <xTaskGenericNotify+0x170>)
 80094d4:	441a      	add	r2, r3
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fe fac8 	bl	8007a72 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <xTaskGenericNotify+0x140>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	613b      	str	r3, [r7, #16]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <xTaskGenericNotify+0x174>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	429a      	cmp	r2, r3
 800950c:	d907      	bls.n	800951e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <xTaskGenericNotify+0x178>)
 8009510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800951e:	f000 fe49 	bl	800a1b4 <vPortExitCritical>

		return xReturn;
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009524:	4618      	mov	r0, r3
 8009526:	3728      	adds	r7, #40	; 0x28
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20001468 	.word	0x20001468
 8009530:	20000f90 	.word	0x20000f90
 8009534:	20000f8c 	.word	0x20000f8c
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08e      	sub	sp, #56	; 0x38
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800954c:	2301      	movs	r3, #1
 800954e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10a      	bne.n	800956c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800956c:	f000 fed4 	bl	800a318 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009574:	f3ef 8211 	mrs	r2, BASEPRI
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	623a      	str	r2, [r7, #32]
 800958a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800958c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80095a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d82f      	bhi.n	8009618 <xTaskGenericNotifyFromISR+0xdc>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <xTaskGenericNotifyFromISR+0x84>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	0800963b 	.word	0x0800963b
 80095c4:	080095d5 	.word	0x080095d5
 80095c8:	080095e7 	.word	0x080095e7
 80095cc:	080095f7 	.word	0x080095f7
 80095d0:	08009601 	.word	0x08009601
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	431a      	orrs	r2, r3
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80095e4:	e02c      	b.n	8009640 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80095f4:	e024      	b.n	8009640 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80095fe:	e01f      	b.n	8009640 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009604:	2b02      	cmp	r3, #2
 8009606:	d004      	beq.n	8009612 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009610:	e016      	b.n	8009640 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009612:	2300      	movs	r3, #0
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009616:	e013      	b.n	8009640 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d00c      	beq.n	800963e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	61bb      	str	r3, [r7, #24]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800963a:	bf00      	nop
 800963c:	e000      	b.n	8009640 <xTaskGenericNotifyFromISR+0x104>
					break;
 800963e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009644:	2b01      	cmp	r3, #1
 8009646:	d146      	bne.n	80096d6 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	617b      	str	r3, [r7, #20]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009666:	4b21      	ldr	r3, [pc, #132]	; (80096ec <xTaskGenericNotifyFromISR+0x1b0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d11d      	bne.n	80096aa <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fa5a 	bl	8007b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	4b1c      	ldr	r3, [pc, #112]	; (80096f0 <xTaskGenericNotifyFromISR+0x1b4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d903      	bls.n	800968c <xTaskGenericNotifyFromISR+0x150>
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	4a19      	ldr	r2, [pc, #100]	; (80096f0 <xTaskGenericNotifyFromISR+0x1b4>)
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <xTaskGenericNotifyFromISR+0x1b8>)
 800969a:	441a      	add	r2, r3
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f7fe f9e5 	bl	8007a72 <vListInsertEnd>
 80096a8:	e005      	b.n	80096b6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	3318      	adds	r3, #24
 80096ae:	4619      	mov	r1, r3
 80096b0:	4811      	ldr	r0, [pc, #68]	; (80096f8 <xTaskGenericNotifyFromISR+0x1bc>)
 80096b2:	f7fe f9de 	bl	8007a72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ba:	4b10      	ldr	r3, [pc, #64]	; (80096fc <xTaskGenericNotifyFromISR+0x1c0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d908      	bls.n	80096d6 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80096c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80096ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80096d0:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <xTaskGenericNotifyFromISR+0x1c4>)
 80096d2:	2201      	movs	r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f383 8811 	msr	BASEPRI, r3
}
 80096e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80096e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3738      	adds	r7, #56	; 0x38
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20001488 	.word	0x20001488
 80096f0:	20001468 	.word	0x20001468
 80096f4:	20000f90 	.word	0x20000f90
 80096f8:	20001420 	.word	0x20001420
 80096fc:	20000f8c 	.word	0x20000f8c
 8009700:	20001474 	.word	0x20001474

08009704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800970e:	4b21      	ldr	r3, [pc, #132]	; (8009794 <prvAddCurrentTaskToDelayedList+0x90>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009714:	4b20      	ldr	r3, [pc, #128]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3304      	adds	r3, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fa06 	bl	8007b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d10a      	bne.n	800973e <prvAddCurrentTaskToDelayedList+0x3a>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972e:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4819      	ldr	r0, [pc, #100]	; (800979c <prvAddCurrentTaskToDelayedList+0x98>)
 8009738:	f7fe f99b 	bl	8007a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800973c:	e026      	b.n	800978c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4413      	add	r3, r2
 8009744:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	429a      	cmp	r2, r3
 8009754:	d209      	bcs.n	800976a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009756:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3304      	adds	r3, #4
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f7fe f9a9 	bl	8007aba <vListInsert>
}
 8009768:	e010      	b.n	800978c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976a:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe f99f 	bl	8007aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	429a      	cmp	r2, r3
 8009784:	d202      	bcs.n	800978c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009786:	4a08      	ldr	r2, [pc, #32]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6013      	str	r3, [r2, #0]
}
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20001464 	.word	0x20001464
 8009798:	20000f8c 	.word	0x20000f8c
 800979c:	2000144c 	.word	0x2000144c
 80097a0:	2000141c 	.word	0x2000141c
 80097a4:	20001418 	.word	0x20001418
 80097a8:	20001480 	.word	0x20001480

080097ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097b6:	f000 fb63 	bl	8009e80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097ba:	4b1c      	ldr	r3, [pc, #112]	; (800982c <xTimerCreateTimerTask+0x80>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d021      	beq.n	8009806 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097ca:	1d3a      	adds	r2, r7, #4
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	f107 030c 	add.w	r3, r7, #12
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe f905 	bl	80079e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	9202      	str	r2, [sp, #8]
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	2302      	movs	r3, #2
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	2300      	movs	r3, #0
 80097ea:	460a      	mov	r2, r1
 80097ec:	4910      	ldr	r1, [pc, #64]	; (8009830 <xTimerCreateTimerTask+0x84>)
 80097ee:	4811      	ldr	r0, [pc, #68]	; (8009834 <xTimerCreateTimerTask+0x88>)
 80097f0:	f7fe feb2 	bl	8008558 <xTaskCreateStatic>
 80097f4:	4603      	mov	r3, r0
 80097f6:	4a10      	ldr	r2, [pc, #64]	; (8009838 <xTimerCreateTimerTask+0x8c>)
 80097f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <xTimerCreateTimerTask+0x8c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009802:	2301      	movs	r3, #1
 8009804:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	613b      	str	r3, [r7, #16]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009822:	697b      	ldr	r3, [r7, #20]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	200014bc 	.word	0x200014bc
 8009830:	0800e660 	.word	0x0800e660
 8009834:	08009a29 	.word	0x08009a29
 8009838:	200014c0 	.word	0x200014c0

0800983c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af02      	add	r7, sp, #8
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800984a:	202c      	movs	r0, #44	; 0x2c
 800984c:	f000 fda4 	bl	800a398 <pvPortMalloc>
 8009850:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00d      	beq.n	8009874 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f805 	bl	800987e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009874:	697b      	ldr	r3, [r7, #20]
	}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b086      	sub	sp, #24
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10a      	bne.n	80098a8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	617b      	str	r3, [r7, #20]
}
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01e      	beq.n	80098ec <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80098ae:	f000 fae7 	bl	8009e80 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	6a3a      	ldr	r2, [r7, #32]
 80098c8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe f8c2 	bl	8007a58 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d008      	beq.n	80098ec <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80098ec:	bf00      	nop
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08a      	sub	sp, #40	; 0x28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009902:	2300      	movs	r3, #0
 8009904:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xTimerGenericCommand+0x2e>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	623b      	str	r3, [r7, #32]
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009922:	4b1a      	ldr	r3, [pc, #104]	; (800998c <xTimerGenericCommand+0x98>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02a      	beq.n	8009980 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b05      	cmp	r3, #5
 800993a:	dc18      	bgt.n	800996e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800993c:	f7ff fc54 	bl	80091e8 <xTaskGetSchedulerState>
 8009940:	4603      	mov	r3, r0
 8009942:	2b02      	cmp	r3, #2
 8009944:	d109      	bne.n	800995a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009946:	4b11      	ldr	r3, [pc, #68]	; (800998c <xTimerGenericCommand+0x98>)
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f107 0110 	add.w	r1, r7, #16
 800994e:	2300      	movs	r3, #0
 8009950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009952:	f7fe fa19 	bl	8007d88 <xQueueGenericSend>
 8009956:	6278      	str	r0, [r7, #36]	; 0x24
 8009958:	e012      	b.n	8009980 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800995a:	4b0c      	ldr	r3, [pc, #48]	; (800998c <xTimerGenericCommand+0x98>)
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f107 0110 	add.w	r1, r7, #16
 8009962:	2300      	movs	r3, #0
 8009964:	2200      	movs	r2, #0
 8009966:	f7fe fa0f 	bl	8007d88 <xQueueGenericSend>
 800996a:	6278      	str	r0, [r7, #36]	; 0x24
 800996c:	e008      	b.n	8009980 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800996e:	4b07      	ldr	r3, [pc, #28]	; (800998c <xTimerGenericCommand+0x98>)
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	f107 0110 	add.w	r1, r7, #16
 8009976:	2300      	movs	r3, #0
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	f7fe fb03 	bl	8007f84 <xQueueGenericSendFromISR>
 800997e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009982:	4618      	mov	r0, r3
 8009984:	3728      	adds	r7, #40	; 0x28
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	200014bc 	.word	0x200014bc

08009990 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af02      	add	r7, sp, #8
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999a:	4b22      	ldr	r3, [pc, #136]	; (8009a24 <prvProcessExpiredTimer+0x94>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	3304      	adds	r3, #4
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe f8bf 	bl	8007b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d022      	beq.n	8009a02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	18d1      	adds	r1, r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	6978      	ldr	r0, [r7, #20]
 80099ca:	f000 f8d1 	bl	8009b70 <prvInsertTimerInActiveList>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d01f      	beq.n	8009a14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099d4:	2300      	movs	r3, #0
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2300      	movs	r3, #0
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	2100      	movs	r1, #0
 80099de:	6978      	ldr	r0, [r7, #20]
 80099e0:	f7ff ff88 	bl	80098f4 <xTimerGenericCommand>
 80099e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d113      	bne.n	8009a14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	60fb      	str	r3, [r7, #12]
}
 80099fe:	bf00      	nop
 8009a00:	e7fe      	b.n	8009a00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	6978      	ldr	r0, [r7, #20]
 8009a1a:	4798      	blx	r3
}
 8009a1c:	bf00      	nop
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	200014b4 	.word	0x200014b4

08009a28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a30:	f107 0308 	add.w	r3, r7, #8
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f857 	bl	8009ae8 <prvGetNextExpireTime>
 8009a3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f803 	bl	8009a4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a46:	f000 f8d5 	bl	8009bf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a4a:	e7f1      	b.n	8009a30 <prvTimerTask+0x8>

08009a4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a56:	f7fe ffdb 	bl	8008a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a5a:	f107 0308 	add.w	r3, r7, #8
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 f866 	bl	8009b30 <prvSampleTimeNow>
 8009a64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d130      	bne.n	8009ace <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <prvProcessTimerOrBlockTask+0x3c>
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d806      	bhi.n	8009a88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a7a:	f7fe ffd7 	bl	8008a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a7e:	68f9      	ldr	r1, [r7, #12]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff ff85 	bl	8009990 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a86:	e024      	b.n	8009ad2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d008      	beq.n	8009aa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <prvProcessTimerOrBlockTask+0x90>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <prvProcessTimerOrBlockTask+0x50>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e000      	b.n	8009a9e <prvProcessTimerOrBlockTask+0x52>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009aa0:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <prvProcessTimerOrBlockTask+0x94>)
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	4619      	mov	r1, r3
 8009aae:	f7fe fd1f 	bl	80084f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ab2:	f7fe ffbb 	bl	8008a2c <xTaskResumeAll>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009abc:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <prvProcessTimerOrBlockTask+0x98>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
}
 8009acc:	e001      	b.n	8009ad2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ace:	f7fe ffad 	bl	8008a2c <xTaskResumeAll>
}
 8009ad2:	bf00      	nop
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200014b8 	.word	0x200014b8
 8009ae0:	200014bc 	.word	0x200014bc
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <prvGetNextExpireTime+0x44>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <prvGetNextExpireTime+0x16>
 8009afa:	2201      	movs	r2, #1
 8009afc:	e000      	b.n	8009b00 <prvGetNextExpireTime+0x18>
 8009afe:	2200      	movs	r2, #0
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d105      	bne.n	8009b18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b0c:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <prvGetNextExpireTime+0x44>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	e001      	b.n	8009b1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	200014b4 	.word	0x200014b4

08009b30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b38:	f7ff f816 	bl	8008b68 <xTaskGetTickCount>
 8009b3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b3e:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <prvSampleTimeNow+0x3c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d205      	bcs.n	8009b54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b48:	f000 f936 	bl	8009db8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e002      	b.n	8009b5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b5a:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <prvSampleTimeNow+0x3c>)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200014c4 	.word	0x200014c4

08009b70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d812      	bhi.n	8009bbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d302      	bcc.n	8009baa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	e01b      	b.n	8009be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009baa:	4b10      	ldr	r3, [pc, #64]	; (8009bec <prvInsertTimerInActiveList+0x7c>)
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7fd ff80 	bl	8007aba <vListInsert>
 8009bba:	e012      	b.n	8009be2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d206      	bcs.n	8009bd2 <prvInsertTimerInActiveList+0x62>
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d302      	bcc.n	8009bd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e007      	b.n	8009be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bd2:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <prvInsertTimerInActiveList+0x80>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fd ff6c 	bl	8007aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009be2:	697b      	ldr	r3, [r7, #20]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	200014b8 	.word	0x200014b8
 8009bf0:	200014b4 	.word	0x200014b4

08009bf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08e      	sub	sp, #56	; 0x38
 8009bf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bfa:	e0ca      	b.n	8009d92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	da18      	bge.n	8009c34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c02:	1d3b      	adds	r3, r7, #4
 8009c04:	3304      	adds	r3, #4
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	61fb      	str	r3, [r7, #28]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2a:	6850      	ldr	r0, [r2, #4]
 8009c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2e:	6892      	ldr	r2, [r2, #8]
 8009c30:	4611      	mov	r1, r2
 8009c32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f2c0 80ab 	blt.w	8009d92 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fd ff6d 	bl	8007b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c52:	463b      	mov	r3, r7
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff ff6b 	bl	8009b30 <prvSampleTimeNow>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b09      	cmp	r3, #9
 8009c60:	f200 8096 	bhi.w	8009d90 <prvProcessReceivedCommands+0x19c>
 8009c64:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <prvProcessReceivedCommands+0x78>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009c95 	.word	0x08009c95
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c95 	.word	0x08009c95
 8009c78:	08009d09 	.word	0x08009d09
 8009c7c:	08009d1d 	.word	0x08009d1d
 8009c80:	08009d67 	.word	0x08009d67
 8009c84:	08009c95 	.word	0x08009c95
 8009c88:	08009c95 	.word	0x08009c95
 8009c8c:	08009d09 	.word	0x08009d09
 8009c90:	08009d1d 	.word	0x08009d1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c9a:	f043 0301 	orr.w	r3, r3, #1
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	18d1      	adds	r1, r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb4:	f7ff ff5c 	bl	8009b70 <prvInsertTimerInActiveList>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d069      	beq.n	8009d92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d05e      	beq.n	8009d92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	441a      	add	r2, r3
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce6:	f7ff fe05 	bl	80098f4 <xTimerGenericCommand>
 8009cea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d14f      	bne.n	8009d92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	61bb      	str	r3, [r7, #24]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d1a:	e03a      	b.n	8009d92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d22:	f043 0301 	orr.w	r3, r3, #1
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10a      	bne.n	8009d52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	617b      	str	r3, [r7, #20]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	18d1      	adds	r1, r2, r3
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d60:	f7ff ff06 	bl	8009b70 <prvInsertTimerInActiveList>
					break;
 8009d64:	e015      	b.n	8009d92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d103      	bne.n	8009d7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d76:	f000 fbdb 	bl	800a530 <vPortFree>
 8009d7a:	e00a      	b.n	8009d92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d82:	f023 0301 	bic.w	r3, r3, #1
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d8e:	e000      	b.n	8009d92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009d90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d92:	4b08      	ldr	r3, [pc, #32]	; (8009db4 <prvProcessReceivedCommands+0x1c0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	1d39      	adds	r1, r7, #4
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe f98e 	bl	80080bc <xQueueReceive>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f47f af2a 	bne.w	8009bfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	3730      	adds	r7, #48	; 0x30
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	200014bc 	.word	0x200014bc

08009db8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dbe:	e048      	b.n	8009e52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dc0:	4b2d      	ldr	r3, [pc, #180]	; (8009e78 <prvSwitchTimerLists+0xc0>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dca:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <prvSwitchTimerLists+0xc0>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fd fea7 	bl	8007b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d02e      	beq.n	8009e52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d90e      	bls.n	8009e24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e12:	4b19      	ldr	r3, [pc, #100]	; (8009e78 <prvSwitchTimerLists+0xc0>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7fd fe4c 	bl	8007aba <vListInsert>
 8009e22:	e016      	b.n	8009e52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e24:	2300      	movs	r3, #0
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2300      	movs	r3, #0
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7ff fd60 	bl	80098f4 <xTimerGenericCommand>
 8009e34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	603b      	str	r3, [r7, #0]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <prvSwitchTimerLists+0xc0>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1b1      	bne.n	8009dc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <prvSwitchTimerLists+0xc0>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e62:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <prvSwitchTimerLists+0xc4>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a04      	ldr	r2, [pc, #16]	; (8009e78 <prvSwitchTimerLists+0xc0>)
 8009e68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e6a:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <prvSwitchTimerLists+0xc4>)
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	6013      	str	r3, [r2, #0]
}
 8009e70:	bf00      	nop
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	200014b4 	.word	0x200014b4
 8009e7c:	200014b8 	.word	0x200014b8

08009e80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e86:	f000 f965 	bl	800a154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e8a:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <prvCheckForValidListAndQueue+0x60>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d120      	bne.n	8009ed4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e92:	4814      	ldr	r0, [pc, #80]	; (8009ee4 <prvCheckForValidListAndQueue+0x64>)
 8009e94:	f7fd fdc0 	bl	8007a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e98:	4813      	ldr	r0, [pc, #76]	; (8009ee8 <prvCheckForValidListAndQueue+0x68>)
 8009e9a:	f7fd fdbd 	bl	8007a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e9e:	4b13      	ldr	r3, [pc, #76]	; (8009eec <prvCheckForValidListAndQueue+0x6c>)
 8009ea0:	4a10      	ldr	r2, [pc, #64]	; (8009ee4 <prvCheckForValidListAndQueue+0x64>)
 8009ea2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ea4:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <prvCheckForValidListAndQueue+0x70>)
 8009ea6:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <prvCheckForValidListAndQueue+0x68>)
 8009ea8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <prvCheckForValidListAndQueue+0x74>)
 8009eb0:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <prvCheckForValidListAndQueue+0x78>)
 8009eb2:	2110      	movs	r1, #16
 8009eb4:	200a      	movs	r0, #10
 8009eb6:	f7fd fecb 	bl	8007c50 <xQueueGenericCreateStatic>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4a08      	ldr	r2, [pc, #32]	; (8009ee0 <prvCheckForValidListAndQueue+0x60>)
 8009ebe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ec0:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <prvCheckForValidListAndQueue+0x60>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ec8:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <prvCheckForValidListAndQueue+0x60>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	490b      	ldr	r1, [pc, #44]	; (8009efc <prvCheckForValidListAndQueue+0x7c>)
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fae4 	bl	800849c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ed4:	f000 f96e 	bl	800a1b4 <vPortExitCritical>
}
 8009ed8:	bf00      	nop
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	200014bc 	.word	0x200014bc
 8009ee4:	2000148c 	.word	0x2000148c
 8009ee8:	200014a0 	.word	0x200014a0
 8009eec:	200014b4 	.word	0x200014b4
 8009ef0:	200014b8 	.word	0x200014b8
 8009ef4:	20001568 	.word	0x20001568
 8009ef8:	200014c8 	.word	0x200014c8
 8009efc:	0800e668 	.word	0x0800e668

08009f00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3b04      	subs	r3, #4
 8009f10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3b04      	subs	r3, #4
 8009f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 0201 	bic.w	r2, r3, #1
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f30:	4a0c      	ldr	r2, [pc, #48]	; (8009f64 <pxPortInitialiseStack+0x64>)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3b14      	subs	r3, #20
 8009f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3b04      	subs	r3, #4
 8009f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f06f 0202 	mvn.w	r2, #2
 8009f4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3b20      	subs	r3, #32
 8009f54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f56:	68fb      	ldr	r3, [r7, #12]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	08009f69 	.word	0x08009f69

08009f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <prvTaskExitError+0x54>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7a:	d00a      	beq.n	8009f92 <prvTaskExitError+0x2a>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60fb      	str	r3, [r7, #12]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <prvTaskExitError+0x28>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	60bb      	str	r3, [r7, #8]
}
 8009fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fa6:	bf00      	nop
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0fc      	beq.n	8009fa8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	20000014 	.word	0x20000014

08009fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <pxCurrentTCBConst2>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f380 8809 	msr	PSP, r0
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8811 	msr	BASEPRI, r0
 8009fda:	4770      	bx	lr
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst2>:
 8009fe0:	20000f8c 	.word	0x20000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fe8:	4808      	ldr	r0, [pc, #32]	; (800a00c <prvPortStartFirstTask+0x24>)
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f380 8808 	msr	MSP, r0
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8814 	msr	CONTROL, r0
 8009ffa:	b662      	cpsie	i
 8009ffc:	b661      	cpsie	f
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	df00      	svc	0
 800a008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a00a:	bf00      	nop
 800a00c:	e000ed08 	.word	0xe000ed08

0800a010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a016:	4b46      	ldr	r3, [pc, #280]	; (800a130 <xPortStartScheduler+0x120>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a46      	ldr	r2, [pc, #280]	; (800a134 <xPortStartScheduler+0x124>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10a      	bne.n	800a036 <xPortStartScheduler+0x26>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	613b      	str	r3, [r7, #16]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a036:	4b3e      	ldr	r3, [pc, #248]	; (800a130 <xPortStartScheduler+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a3f      	ldr	r2, [pc, #252]	; (800a138 <xPortStartScheduler+0x128>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d10a      	bne.n	800a056 <xPortStartScheduler+0x46>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60fb      	str	r3, [r7, #12]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a056:	4b39      	ldr	r3, [pc, #228]	; (800a13c <xPortStartScheduler+0x12c>)
 800a058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	22ff      	movs	r2, #255	; 0xff
 800a066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <xPortStartScheduler+0x130>)
 800a07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a07e:	4b31      	ldr	r3, [pc, #196]	; (800a144 <xPortStartScheduler+0x134>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a084:	e009      	b.n	800a09a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a086:	4b2f      	ldr	r3, [pc, #188]	; (800a144 <xPortStartScheduler+0x134>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	4a2d      	ldr	r2, [pc, #180]	; (800a144 <xPortStartScheduler+0x134>)
 800a08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	b2db      	uxtb	r3, r3
 800a098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a2:	2b80      	cmp	r3, #128	; 0x80
 800a0a4:	d0ef      	beq.n	800a086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0a6:	4b27      	ldr	r3, [pc, #156]	; (800a144 <xPortStartScheduler+0x134>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f1c3 0307 	rsb	r3, r3, #7
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d00a      	beq.n	800a0c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60bb      	str	r3, [r7, #8]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <xPortStartScheduler+0x134>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	4a1d      	ldr	r2, [pc, #116]	; (800a144 <xPortStartScheduler+0x134>)
 800a0d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0d2:	4b1c      	ldr	r3, [pc, #112]	; (800a144 <xPortStartScheduler+0x134>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0da:	4a1a      	ldr	r2, [pc, #104]	; (800a144 <xPortStartScheduler+0x134>)
 800a0dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0e6:	4b18      	ldr	r3, [pc, #96]	; (800a148 <xPortStartScheduler+0x138>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a17      	ldr	r2, [pc, #92]	; (800a148 <xPortStartScheduler+0x138>)
 800a0ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <xPortStartScheduler+0x138>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a14      	ldr	r2, [pc, #80]	; (800a148 <xPortStartScheduler+0x138>)
 800a0f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0fe:	f000 f8dd 	bl	800a2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <xPortStartScheduler+0x13c>)
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a108:	f000 f8fc 	bl	800a304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a10c:	4b10      	ldr	r3, [pc, #64]	; (800a150 <xPortStartScheduler+0x140>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0f      	ldr	r2, [pc, #60]	; (800a150 <xPortStartScheduler+0x140>)
 800a112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a118:	f7ff ff66 	bl	8009fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a11c:	f7fe fdee 	bl	8008cfc <vTaskSwitchContext>
	prvTaskExitError();
 800a120:	f7ff ff22 	bl	8009f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	e000ed00 	.word	0xe000ed00
 800a134:	410fc271 	.word	0x410fc271
 800a138:	410fc270 	.word	0x410fc270
 800a13c:	e000e400 	.word	0xe000e400
 800a140:	200015b8 	.word	0x200015b8
 800a144:	200015bc 	.word	0x200015bc
 800a148:	e000ed20 	.word	0xe000ed20
 800a14c:	20000014 	.word	0x20000014
 800a150:	e000ef34 	.word	0xe000ef34

0800a154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	607b      	str	r3, [r7, #4]
}
 800a16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <vPortEnterCritical+0x58>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	4a0d      	ldr	r2, [pc, #52]	; (800a1ac <vPortEnterCritical+0x58>)
 800a176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a178:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <vPortEnterCritical+0x58>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d10f      	bne.n	800a1a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a180:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <vPortEnterCritical+0x5c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	603b      	str	r3, [r7, #0]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <vPortEnterCritical+0x4a>
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000014 	.word	0x20000014
 800a1b0:	e000ed04 	.word	0xe000ed04

0800a1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <vPortExitCritical+0x50>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <vPortExitCritical+0x24>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	607b      	str	r3, [r7, #4]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <vPortExitCritical+0x50>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <vPortExitCritical+0x50>)
 800a1e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <vPortExitCritical+0x50>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d105      	bne.n	800a1f6 <vPortExitCritical+0x42>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	f383 8811 	msr	BASEPRI, r3
}
 800a1f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	20000014 	.word	0x20000014
	...

0800a210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a210:	f3ef 8009 	mrs	r0, PSP
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	4b15      	ldr	r3, [pc, #84]	; (800a270 <pxCurrentTCBConst>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	f01e 0f10 	tst.w	lr, #16
 800a220:	bf08      	it	eq
 800a222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22a:	6010      	str	r0, [r2, #0]
 800a22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a234:	f380 8811 	msr	BASEPRI, r0
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f7fe fd5c 	bl	8008cfc <vTaskSwitchContext>
 800a244:	f04f 0000 	mov.w	r0, #0
 800a248:	f380 8811 	msr	BASEPRI, r0
 800a24c:	bc09      	pop	{r0, r3}
 800a24e:	6819      	ldr	r1, [r3, #0]
 800a250:	6808      	ldr	r0, [r1, #0]
 800a252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a256:	f01e 0f10 	tst.w	lr, #16
 800a25a:	bf08      	it	eq
 800a25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a260:	f380 8809 	msr	PSP, r0
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	f3af 8000 	nop.w

0800a270 <pxCurrentTCBConst>:
 800a270:	20000f8c 	.word	0x20000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop

0800a278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	607b      	str	r3, [r7, #4]
}
 800a290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a292:	f7fe fc79 	bl	8008b88 <xTaskIncrementTick>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <xPortSysTickHandler+0x40>)
 800a29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	e000ed04 	.word	0xe000ed04

0800a2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <vPortSetupTimerInterrupt+0x34>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <vPortSetupTimerInterrupt+0x38>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <vPortSetupTimerInterrupt+0x3c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <vPortSetupTimerInterrupt+0x40>)
 800a2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d6:	099b      	lsrs	r3, r3, #6
 800a2d8:	4a09      	ldr	r2, [pc, #36]	; (800a300 <vPortSetupTimerInterrupt+0x44>)
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2de:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <vPortSetupTimerInterrupt+0x34>)
 800a2e0:	2207      	movs	r2, #7
 800a2e2:	601a      	str	r2, [r3, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	e000e010 	.word	0xe000e010
 800a2f4:	e000e018 	.word	0xe000e018
 800a2f8:	20000008 	.word	0x20000008
 800a2fc:	10624dd3 	.word	0x10624dd3
 800a300:	e000e014 	.word	0xe000e014

0800a304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a314 <vPortEnableVFP+0x10>
 800a308:	6801      	ldr	r1, [r0, #0]
 800a30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a30e:	6001      	str	r1, [r0, #0]
 800a310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a312:	bf00      	nop
 800a314:	e000ed88 	.word	0xe000ed88

0800a318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a31e:	f3ef 8305 	mrs	r3, IPSR
 800a322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b0f      	cmp	r3, #15
 800a328:	d914      	bls.n	800a354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <vPortValidateInterruptPriority+0x70>)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a334:	4b15      	ldr	r3, [pc, #84]	; (800a38c <vPortValidateInterruptPriority+0x74>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	7afa      	ldrb	r2, [r7, #11]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d20a      	bcs.n	800a354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	607b      	str	r3, [r7, #4]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <vPortValidateInterruptPriority+0x78>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a35c:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <vPortValidateInterruptPriority+0x7c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d90a      	bls.n	800a37a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	603b      	str	r3, [r7, #0]
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <vPortValidateInterruptPriority+0x60>
	}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	e000e3f0 	.word	0xe000e3f0
 800a38c:	200015b8 	.word	0x200015b8
 800a390:	e000ed0c 	.word	0xe000ed0c
 800a394:	200015bc 	.word	0x200015bc

0800a398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08a      	sub	sp, #40	; 0x28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3a4:	f7fe fb34 	bl	8008a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3a8:	4b5b      	ldr	r3, [pc, #364]	; (800a518 <pvPortMalloc+0x180>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3b0:	f000 f920 	bl	800a5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3b4:	4b59      	ldr	r3, [pc, #356]	; (800a51c <pvPortMalloc+0x184>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 8093 	bne.w	800a4e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01d      	beq.n	800a404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d014      	beq.n	800a404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <pvPortMalloc+0x6c>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617b      	str	r3, [r7, #20]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d06e      	beq.n	800a4e8 <pvPortMalloc+0x150>
 800a40a:	4b45      	ldr	r3, [pc, #276]	; (800a520 <pvPortMalloc+0x188>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	429a      	cmp	r2, r3
 800a412:	d869      	bhi.n	800a4e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a414:	4b43      	ldr	r3, [pc, #268]	; (800a524 <pvPortMalloc+0x18c>)
 800a416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a418:	4b42      	ldr	r3, [pc, #264]	; (800a524 <pvPortMalloc+0x18c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a41e:	e004      	b.n	800a42a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d903      	bls.n	800a43c <pvPortMalloc+0xa4>
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f1      	bne.n	800a420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a43c:	4b36      	ldr	r3, [pc, #216]	; (800a518 <pvPortMalloc+0x180>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a442:	429a      	cmp	r2, r3
 800a444:	d050      	beq.n	800a4e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2208      	movs	r2, #8
 800a44c:	4413      	add	r3, r2
 800a44e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	2308      	movs	r3, #8
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	429a      	cmp	r2, r3
 800a466:	d91f      	bls.n	800a4a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <pvPortMalloc+0xf8>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	613b      	str	r3, [r7, #16]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4a2:	69b8      	ldr	r0, [r7, #24]
 800a4a4:	f000 f908 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <pvPortMalloc+0x188>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	4a1b      	ldr	r2, [pc, #108]	; (800a520 <pvPortMalloc+0x188>)
 800a4b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4b6:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <pvPortMalloc+0x188>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <pvPortMalloc+0x190>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d203      	bcs.n	800a4ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4c2:	4b17      	ldr	r3, [pc, #92]	; (800a520 <pvPortMalloc+0x188>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a18      	ldr	r2, [pc, #96]	; (800a528 <pvPortMalloc+0x190>)
 800a4c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <pvPortMalloc+0x184>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <pvPortMalloc+0x194>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	4a11      	ldr	r2, [pc, #68]	; (800a52c <pvPortMalloc+0x194>)
 800a4e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4e8:	f7fe faa0 	bl	8008a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <pvPortMalloc+0x174>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60fb      	str	r3, [r7, #12]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <pvPortMalloc+0x172>
	return pvReturn;
 800a50c:	69fb      	ldr	r3, [r7, #28]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3728      	adds	r7, #40	; 0x28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200051c8 	.word	0x200051c8
 800a51c:	200051dc 	.word	0x200051dc
 800a520:	200051cc 	.word	0x200051cc
 800a524:	200051c0 	.word	0x200051c0
 800a528:	200051d0 	.word	0x200051d0
 800a52c:	200051d4 	.word	0x200051d4

0800a530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04d      	beq.n	800a5de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a542:	2308      	movs	r3, #8
 800a544:	425b      	negs	r3, r3
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	4413      	add	r3, r2
 800a54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <vPortFree+0xb8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4013      	ands	r3, r2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <vPortFree+0x44>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60fb      	str	r3, [r7, #12]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <vPortFree+0x62>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60bb      	str	r3, [r7, #8]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <vPortFree+0xb8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01e      	beq.n	800a5de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11a      	bne.n	800a5de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <vPortFree+0xb8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5b8:	f7fe fa2a 	bl	8008a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <vPortFree+0xbc>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <vPortFree+0xbc>)
 800a5c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f000 f874 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5d0:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <vPortFree+0xc0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	4a06      	ldr	r2, [pc, #24]	; (800a5f0 <vPortFree+0xc0>)
 800a5d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5da:	f7fe fa27 	bl	8008a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200051dc 	.word	0x200051dc
 800a5ec:	200051cc 	.word	0x200051cc
 800a5f0:	200051d8 	.word	0x200051d8

0800a5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a600:	4b27      	ldr	r3, [pc, #156]	; (800a6a0 <prvHeapInit+0xac>)
 800a602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <prvHeapInit+0xac>)
 800a624:	4413      	add	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a62c:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <prvHeapInit+0xb0>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a632:	4b1c      	ldr	r3, [pc, #112]	; (800a6a4 <prvHeapInit+0xb0>)
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	4413      	add	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a640:	2208      	movs	r2, #8
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0307 	bic.w	r3, r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <prvHeapInit+0xb4>)
 800a654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <prvHeapInit+0xb4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a65e:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <prvHeapInit+0xb4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <prvHeapInit+0xb4>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <prvHeapInit+0xb8>)
 800a682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <prvHeapInit+0xbc>)
 800a68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <prvHeapInit+0xc0>)
 800a68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a692:	601a      	str	r2, [r3, #0]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	200015c0 	.word	0x200015c0
 800a6a4:	200051c0 	.word	0x200051c0
 800a6a8:	200051c8 	.word	0x200051c8
 800a6ac:	200051d0 	.word	0x200051d0
 800a6b0:	200051cc 	.word	0x200051cc
 800a6b4:	200051dc 	.word	0x200051dc

0800a6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6c0:	4b28      	ldr	r3, [pc, #160]	; (800a764 <prvInsertBlockIntoFreeList+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e002      	b.n	800a6cc <prvInsertBlockIntoFreeList+0x14>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d8f7      	bhi.n	800a6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d108      	bne.n	800a6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	441a      	add	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d118      	bne.n	800a740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d00d      	beq.n	800a736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	441a      	add	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e008      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a736:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	e003      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d002      	beq.n	800a756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	200051c0 	.word	0x200051c0
 800a768:	200051c8 	.word	0x200051c8

0800a76c <atoi>:
 800a76c:	220a      	movs	r2, #10
 800a76e:	2100      	movs	r1, #0
 800a770:	f000 b882 	b.w	800a878 <strtol>

0800a774 <_strtol_l.constprop.0>:
 800a774:	2b01      	cmp	r3, #1
 800a776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77a:	d001      	beq.n	800a780 <_strtol_l.constprop.0+0xc>
 800a77c:	2b24      	cmp	r3, #36	; 0x24
 800a77e:	d906      	bls.n	800a78e <_strtol_l.constprop.0+0x1a>
 800a780:	f000 fecc 	bl	800b51c <__errno>
 800a784:	2316      	movs	r3, #22
 800a786:	6003      	str	r3, [r0, #0]
 800a788:	2000      	movs	r0, #0
 800a78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a874 <_strtol_l.constprop.0+0x100>
 800a792:	460d      	mov	r5, r1
 800a794:	462e      	mov	r6, r5
 800a796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a79a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a79e:	f017 0708 	ands.w	r7, r7, #8
 800a7a2:	d1f7      	bne.n	800a794 <_strtol_l.constprop.0+0x20>
 800a7a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a7a6:	d132      	bne.n	800a80e <_strtol_l.constprop.0+0x9a>
 800a7a8:	782c      	ldrb	r4, [r5, #0]
 800a7aa:	2701      	movs	r7, #1
 800a7ac:	1cb5      	adds	r5, r6, #2
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d05b      	beq.n	800a86a <_strtol_l.constprop.0+0xf6>
 800a7b2:	2b10      	cmp	r3, #16
 800a7b4:	d109      	bne.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a7b6:	2c30      	cmp	r4, #48	; 0x30
 800a7b8:	d107      	bne.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a7ba:	782c      	ldrb	r4, [r5, #0]
 800a7bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a7c0:	2c58      	cmp	r4, #88	; 0x58
 800a7c2:	d14d      	bne.n	800a860 <_strtol_l.constprop.0+0xec>
 800a7c4:	786c      	ldrb	r4, [r5, #1]
 800a7c6:	2310      	movs	r3, #16
 800a7c8:	3502      	adds	r5, #2
 800a7ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a7ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7d2:	f04f 0e00 	mov.w	lr, #0
 800a7d6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7da:	4676      	mov	r6, lr
 800a7dc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7e4:	f1bc 0f09 	cmp.w	ip, #9
 800a7e8:	d816      	bhi.n	800a818 <_strtol_l.constprop.0+0xa4>
 800a7ea:	4664      	mov	r4, ip
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	dd24      	ble.n	800a83a <_strtol_l.constprop.0+0xc6>
 800a7f0:	f1be 3fff 	cmp.w	lr, #4294967295
 800a7f4:	d008      	beq.n	800a808 <_strtol_l.constprop.0+0x94>
 800a7f6:	45b1      	cmp	r9, r6
 800a7f8:	d31c      	bcc.n	800a834 <_strtol_l.constprop.0+0xc0>
 800a7fa:	d101      	bne.n	800a800 <_strtol_l.constprop.0+0x8c>
 800a7fc:	45a2      	cmp	sl, r4
 800a7fe:	db19      	blt.n	800a834 <_strtol_l.constprop.0+0xc0>
 800a800:	fb06 4603 	mla	r6, r6, r3, r4
 800a804:	f04f 0e01 	mov.w	lr, #1
 800a808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a80c:	e7e8      	b.n	800a7e0 <_strtol_l.constprop.0+0x6c>
 800a80e:	2c2b      	cmp	r4, #43	; 0x2b
 800a810:	bf04      	itt	eq
 800a812:	782c      	ldrbeq	r4, [r5, #0]
 800a814:	1cb5      	addeq	r5, r6, #2
 800a816:	e7ca      	b.n	800a7ae <_strtol_l.constprop.0+0x3a>
 800a818:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a81c:	f1bc 0f19 	cmp.w	ip, #25
 800a820:	d801      	bhi.n	800a826 <_strtol_l.constprop.0+0xb2>
 800a822:	3c37      	subs	r4, #55	; 0x37
 800a824:	e7e2      	b.n	800a7ec <_strtol_l.constprop.0+0x78>
 800a826:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a82a:	f1bc 0f19 	cmp.w	ip, #25
 800a82e:	d804      	bhi.n	800a83a <_strtol_l.constprop.0+0xc6>
 800a830:	3c57      	subs	r4, #87	; 0x57
 800a832:	e7db      	b.n	800a7ec <_strtol_l.constprop.0+0x78>
 800a834:	f04f 3eff 	mov.w	lr, #4294967295
 800a838:	e7e6      	b.n	800a808 <_strtol_l.constprop.0+0x94>
 800a83a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a83e:	d105      	bne.n	800a84c <_strtol_l.constprop.0+0xd8>
 800a840:	2322      	movs	r3, #34	; 0x22
 800a842:	6003      	str	r3, [r0, #0]
 800a844:	4646      	mov	r6, r8
 800a846:	b942      	cbnz	r2, 800a85a <_strtol_l.constprop.0+0xe6>
 800a848:	4630      	mov	r0, r6
 800a84a:	e79e      	b.n	800a78a <_strtol_l.constprop.0+0x16>
 800a84c:	b107      	cbz	r7, 800a850 <_strtol_l.constprop.0+0xdc>
 800a84e:	4276      	negs	r6, r6
 800a850:	2a00      	cmp	r2, #0
 800a852:	d0f9      	beq.n	800a848 <_strtol_l.constprop.0+0xd4>
 800a854:	f1be 0f00 	cmp.w	lr, #0
 800a858:	d000      	beq.n	800a85c <_strtol_l.constprop.0+0xe8>
 800a85a:	1e69      	subs	r1, r5, #1
 800a85c:	6011      	str	r1, [r2, #0]
 800a85e:	e7f3      	b.n	800a848 <_strtol_l.constprop.0+0xd4>
 800a860:	2430      	movs	r4, #48	; 0x30
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1b1      	bne.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a866:	2308      	movs	r3, #8
 800a868:	e7af      	b.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a86a:	2c30      	cmp	r4, #48	; 0x30
 800a86c:	d0a5      	beq.n	800a7ba <_strtol_l.constprop.0+0x46>
 800a86e:	230a      	movs	r3, #10
 800a870:	e7ab      	b.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a872:	bf00      	nop
 800a874:	0800e689 	.word	0x0800e689

0800a878 <strtol>:
 800a878:	4613      	mov	r3, r2
 800a87a:	460a      	mov	r2, r1
 800a87c:	4601      	mov	r1, r0
 800a87e:	4802      	ldr	r0, [pc, #8]	; (800a888 <strtol+0x10>)
 800a880:	6800      	ldr	r0, [r0, #0]
 800a882:	f7ff bf77 	b.w	800a774 <_strtol_l.constprop.0>
 800a886:	bf00      	nop
 800a888:	200001dc 	.word	0x200001dc

0800a88c <__cvt>:
 800a88c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a890:	ec55 4b10 	vmov	r4, r5, d0
 800a894:	2d00      	cmp	r5, #0
 800a896:	460e      	mov	r6, r1
 800a898:	4619      	mov	r1, r3
 800a89a:	462b      	mov	r3, r5
 800a89c:	bfbb      	ittet	lt
 800a89e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8a2:	461d      	movlt	r5, r3
 800a8a4:	2300      	movge	r3, #0
 800a8a6:	232d      	movlt	r3, #45	; 0x2d
 800a8a8:	700b      	strb	r3, [r1, #0]
 800a8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8b0:	4691      	mov	r9, r2
 800a8b2:	f023 0820 	bic.w	r8, r3, #32
 800a8b6:	bfbc      	itt	lt
 800a8b8:	4622      	movlt	r2, r4
 800a8ba:	4614      	movlt	r4, r2
 800a8bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8c0:	d005      	beq.n	800a8ce <__cvt+0x42>
 800a8c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8c6:	d100      	bne.n	800a8ca <__cvt+0x3e>
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	e000      	b.n	800a8d0 <__cvt+0x44>
 800a8ce:	2103      	movs	r1, #3
 800a8d0:	ab03      	add	r3, sp, #12
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	ab02      	add	r3, sp, #8
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	ec45 4b10 	vmov	d0, r4, r5
 800a8dc:	4653      	mov	r3, sl
 800a8de:	4632      	mov	r2, r6
 800a8e0:	f000 fee2 	bl	800b6a8 <_dtoa_r>
 800a8e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	d102      	bne.n	800a8f2 <__cvt+0x66>
 800a8ec:	f019 0f01 	tst.w	r9, #1
 800a8f0:	d022      	beq.n	800a938 <__cvt+0xac>
 800a8f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8f6:	eb07 0906 	add.w	r9, r7, r6
 800a8fa:	d110      	bne.n	800a91e <__cvt+0x92>
 800a8fc:	783b      	ldrb	r3, [r7, #0]
 800a8fe:	2b30      	cmp	r3, #48	; 0x30
 800a900:	d10a      	bne.n	800a918 <__cvt+0x8c>
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f6 f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 800a90e:	b918      	cbnz	r0, 800a918 <__cvt+0x8c>
 800a910:	f1c6 0601 	rsb	r6, r6, #1
 800a914:	f8ca 6000 	str.w	r6, [sl]
 800a918:	f8da 3000 	ldr.w	r3, [sl]
 800a91c:	4499      	add	r9, r3
 800a91e:	2200      	movs	r2, #0
 800a920:	2300      	movs	r3, #0
 800a922:	4620      	mov	r0, r4
 800a924:	4629      	mov	r1, r5
 800a926:	f7f6 f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800a92a:	b108      	cbz	r0, 800a930 <__cvt+0xa4>
 800a92c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a930:	2230      	movs	r2, #48	; 0x30
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	454b      	cmp	r3, r9
 800a936:	d307      	bcc.n	800a948 <__cvt+0xbc>
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a93c:	1bdb      	subs	r3, r3, r7
 800a93e:	4638      	mov	r0, r7
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	b004      	add	sp, #16
 800a944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a948:	1c59      	adds	r1, r3, #1
 800a94a:	9103      	str	r1, [sp, #12]
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e7f0      	b.n	800a932 <__cvt+0xa6>

0800a950 <__exponent>:
 800a950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a952:	4603      	mov	r3, r0
 800a954:	2900      	cmp	r1, #0
 800a956:	bfb8      	it	lt
 800a958:	4249      	neglt	r1, r1
 800a95a:	f803 2b02 	strb.w	r2, [r3], #2
 800a95e:	bfb4      	ite	lt
 800a960:	222d      	movlt	r2, #45	; 0x2d
 800a962:	222b      	movge	r2, #43	; 0x2b
 800a964:	2909      	cmp	r1, #9
 800a966:	7042      	strb	r2, [r0, #1]
 800a968:	dd2a      	ble.n	800a9c0 <__exponent+0x70>
 800a96a:	f10d 0207 	add.w	r2, sp, #7
 800a96e:	4617      	mov	r7, r2
 800a970:	260a      	movs	r6, #10
 800a972:	4694      	mov	ip, r2
 800a974:	fb91 f5f6 	sdiv	r5, r1, r6
 800a978:	fb06 1415 	mls	r4, r6, r5, r1
 800a97c:	3430      	adds	r4, #48	; 0x30
 800a97e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a982:	460c      	mov	r4, r1
 800a984:	2c63      	cmp	r4, #99	; 0x63
 800a986:	f102 32ff 	add.w	r2, r2, #4294967295
 800a98a:	4629      	mov	r1, r5
 800a98c:	dcf1      	bgt.n	800a972 <__exponent+0x22>
 800a98e:	3130      	adds	r1, #48	; 0x30
 800a990:	f1ac 0402 	sub.w	r4, ip, #2
 800a994:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a998:	1c41      	adds	r1, r0, #1
 800a99a:	4622      	mov	r2, r4
 800a99c:	42ba      	cmp	r2, r7
 800a99e:	d30a      	bcc.n	800a9b6 <__exponent+0x66>
 800a9a0:	f10d 0209 	add.w	r2, sp, #9
 800a9a4:	eba2 020c 	sub.w	r2, r2, ip
 800a9a8:	42bc      	cmp	r4, r7
 800a9aa:	bf88      	it	hi
 800a9ac:	2200      	movhi	r2, #0
 800a9ae:	4413      	add	r3, r2
 800a9b0:	1a18      	subs	r0, r3, r0
 800a9b2:	b003      	add	sp, #12
 800a9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a9ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a9be:	e7ed      	b.n	800a99c <__exponent+0x4c>
 800a9c0:	2330      	movs	r3, #48	; 0x30
 800a9c2:	3130      	adds	r1, #48	; 0x30
 800a9c4:	7083      	strb	r3, [r0, #2]
 800a9c6:	70c1      	strb	r1, [r0, #3]
 800a9c8:	1d03      	adds	r3, r0, #4
 800a9ca:	e7f1      	b.n	800a9b0 <__exponent+0x60>

0800a9cc <_printf_float>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	ed2d 8b02 	vpush	{d8}
 800a9d4:	b08d      	sub	sp, #52	; 0x34
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9dc:	4616      	mov	r6, r2
 800a9de:	461f      	mov	r7, r3
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	f000 fcfb 	bl	800b3dc <_localeconv_r>
 800a9e6:	f8d0 a000 	ldr.w	sl, [r0]
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f7f5 fc60 	bl	80002b0 <strlen>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa00:	3307      	adds	r3, #7
 800aa02:	f023 0307 	bic.w	r3, r3, #7
 800aa06:	f103 0208 	add.w	r2, r3, #8
 800aa0a:	f8c8 2000 	str.w	r2, [r8]
 800aa0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa16:	9307      	str	r3, [sp, #28]
 800aa18:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa1c:	ee08 0a10 	vmov	s16, r0
 800aa20:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800aa24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa28:	4b9e      	ldr	r3, [pc, #632]	; (800aca4 <_printf_float+0x2d8>)
 800aa2a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2e:	f7f6 f89d 	bl	8000b6c <__aeabi_dcmpun>
 800aa32:	bb88      	cbnz	r0, 800aa98 <_printf_float+0xcc>
 800aa34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa38:	4b9a      	ldr	r3, [pc, #616]	; (800aca4 <_printf_float+0x2d8>)
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	f7f6 f877 	bl	8000b30 <__aeabi_dcmple>
 800aa42:	bb48      	cbnz	r0, 800aa98 <_printf_float+0xcc>
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	4640      	mov	r0, r8
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	f7f6 f866 	bl	8000b1c <__aeabi_dcmplt>
 800aa50:	b110      	cbz	r0, 800aa58 <_printf_float+0x8c>
 800aa52:	232d      	movs	r3, #45	; 0x2d
 800aa54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa58:	4a93      	ldr	r2, [pc, #588]	; (800aca8 <_printf_float+0x2dc>)
 800aa5a:	4b94      	ldr	r3, [pc, #592]	; (800acac <_printf_float+0x2e0>)
 800aa5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa60:	bf94      	ite	ls
 800aa62:	4690      	movls	r8, r2
 800aa64:	4698      	movhi	r8, r3
 800aa66:	2303      	movs	r3, #3
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	f023 0304 	bic.w	r3, r3, #4
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	f04f 0900 	mov.w	r9, #0
 800aa76:	9700      	str	r7, [sp, #0]
 800aa78:	4633      	mov	r3, r6
 800aa7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f000 f9da 	bl	800ae38 <_printf_common>
 800aa84:	3001      	adds	r0, #1
 800aa86:	f040 8090 	bne.w	800abaa <_printf_float+0x1de>
 800aa8a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8e:	b00d      	add	sp, #52	; 0x34
 800aa90:	ecbd 8b02 	vpop	{d8}
 800aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	f7f6 f864 	bl	8000b6c <__aeabi_dcmpun>
 800aaa4:	b140      	cbz	r0, 800aab8 <_printf_float+0xec>
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bfbc      	itt	lt
 800aaac:	232d      	movlt	r3, #45	; 0x2d
 800aaae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aab2:	4a7f      	ldr	r2, [pc, #508]	; (800acb0 <_printf_float+0x2e4>)
 800aab4:	4b7f      	ldr	r3, [pc, #508]	; (800acb4 <_printf_float+0x2e8>)
 800aab6:	e7d1      	b.n	800aa5c <_printf_float+0x90>
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aabe:	9206      	str	r2, [sp, #24]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	d13f      	bne.n	800ab44 <_printf_float+0x178>
 800aac4:	2306      	movs	r3, #6
 800aac6:	6063      	str	r3, [r4, #4]
 800aac8:	9b05      	ldr	r3, [sp, #20]
 800aaca:	6861      	ldr	r1, [r4, #4]
 800aacc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aad0:	2300      	movs	r3, #0
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	ab0a      	add	r3, sp, #40	; 0x28
 800aad6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aada:	ab09      	add	r3, sp, #36	; 0x24
 800aadc:	ec49 8b10 	vmov	d0, r8, r9
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	6022      	str	r2, [r4, #0]
 800aae4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aae8:	4628      	mov	r0, r5
 800aaea:	f7ff fecf 	bl	800a88c <__cvt>
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaf2:	2b47      	cmp	r3, #71	; 0x47
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	d108      	bne.n	800ab0a <_printf_float+0x13e>
 800aaf8:	1cc8      	adds	r0, r1, #3
 800aafa:	db02      	blt.n	800ab02 <_printf_float+0x136>
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	4299      	cmp	r1, r3
 800ab00:	dd41      	ble.n	800ab86 <_printf_float+0x1ba>
 800ab02:	f1ab 0302 	sub.w	r3, fp, #2
 800ab06:	fa5f fb83 	uxtb.w	fp, r3
 800ab0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab0e:	d820      	bhi.n	800ab52 <_printf_float+0x186>
 800ab10:	3901      	subs	r1, #1
 800ab12:	465a      	mov	r2, fp
 800ab14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab18:	9109      	str	r1, [sp, #36]	; 0x24
 800ab1a:	f7ff ff19 	bl	800a950 <__exponent>
 800ab1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab20:	1813      	adds	r3, r2, r0
 800ab22:	2a01      	cmp	r2, #1
 800ab24:	4681      	mov	r9, r0
 800ab26:	6123      	str	r3, [r4, #16]
 800ab28:	dc02      	bgt.n	800ab30 <_printf_float+0x164>
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	07d2      	lsls	r2, r2, #31
 800ab2e:	d501      	bpl.n	800ab34 <_printf_float+0x168>
 800ab30:	3301      	adds	r3, #1
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d09c      	beq.n	800aa76 <_printf_float+0xaa>
 800ab3c:	232d      	movs	r3, #45	; 0x2d
 800ab3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab42:	e798      	b.n	800aa76 <_printf_float+0xaa>
 800ab44:	9a06      	ldr	r2, [sp, #24]
 800ab46:	2a47      	cmp	r2, #71	; 0x47
 800ab48:	d1be      	bne.n	800aac8 <_printf_float+0xfc>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1bc      	bne.n	800aac8 <_printf_float+0xfc>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7b9      	b.n	800aac6 <_printf_float+0xfa>
 800ab52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab56:	d118      	bne.n	800ab8a <_printf_float+0x1be>
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	dd0b      	ble.n	800ab76 <_printf_float+0x1aa>
 800ab5e:	6121      	str	r1, [r4, #16]
 800ab60:	b913      	cbnz	r3, 800ab68 <_printf_float+0x19c>
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	07d0      	lsls	r0, r2, #31
 800ab66:	d502      	bpl.n	800ab6e <_printf_float+0x1a2>
 800ab68:	3301      	adds	r3, #1
 800ab6a:	440b      	add	r3, r1
 800ab6c:	6123      	str	r3, [r4, #16]
 800ab6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab70:	f04f 0900 	mov.w	r9, #0
 800ab74:	e7de      	b.n	800ab34 <_printf_float+0x168>
 800ab76:	b913      	cbnz	r3, 800ab7e <_printf_float+0x1b2>
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	07d2      	lsls	r2, r2, #31
 800ab7c:	d501      	bpl.n	800ab82 <_printf_float+0x1b6>
 800ab7e:	3302      	adds	r3, #2
 800ab80:	e7f4      	b.n	800ab6c <_printf_float+0x1a0>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7f2      	b.n	800ab6c <_printf_float+0x1a0>
 800ab86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	db05      	blt.n	800ab9c <_printf_float+0x1d0>
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	6121      	str	r1, [r4, #16]
 800ab94:	07d8      	lsls	r0, r3, #31
 800ab96:	d5ea      	bpl.n	800ab6e <_printf_float+0x1a2>
 800ab98:	1c4b      	adds	r3, r1, #1
 800ab9a:	e7e7      	b.n	800ab6c <_printf_float+0x1a0>
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	bfd4      	ite	le
 800aba0:	f1c1 0202 	rsble	r2, r1, #2
 800aba4:	2201      	movgt	r2, #1
 800aba6:	4413      	add	r3, r2
 800aba8:	e7e0      	b.n	800ab6c <_printf_float+0x1a0>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	055a      	lsls	r2, r3, #21
 800abae:	d407      	bmi.n	800abc0 <_printf_float+0x1f4>
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	4642      	mov	r2, r8
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b8      	blx	r7
 800abba:	3001      	adds	r0, #1
 800abbc:	d12c      	bne.n	800ac18 <_printf_float+0x24c>
 800abbe:	e764      	b.n	800aa8a <_printf_float+0xbe>
 800abc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abc4:	f240 80e0 	bls.w	800ad88 <_printf_float+0x3bc>
 800abc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abcc:	2200      	movs	r2, #0
 800abce:	2300      	movs	r3, #0
 800abd0:	f7f5 ff9a 	bl	8000b08 <__aeabi_dcmpeq>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d034      	beq.n	800ac42 <_printf_float+0x276>
 800abd8:	4a37      	ldr	r2, [pc, #220]	; (800acb8 <_printf_float+0x2ec>)
 800abda:	2301      	movs	r3, #1
 800abdc:	4631      	mov	r1, r6
 800abde:	4628      	mov	r0, r5
 800abe0:	47b8      	blx	r7
 800abe2:	3001      	adds	r0, #1
 800abe4:	f43f af51 	beq.w	800aa8a <_printf_float+0xbe>
 800abe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abec:	429a      	cmp	r2, r3
 800abee:	db02      	blt.n	800abf6 <_printf_float+0x22a>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	07d8      	lsls	r0, r3, #31
 800abf4:	d510      	bpl.n	800ac18 <_printf_float+0x24c>
 800abf6:	ee18 3a10 	vmov	r3, s16
 800abfa:	4652      	mov	r2, sl
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	f43f af41 	beq.w	800aa8a <_printf_float+0xbe>
 800ac08:	f04f 0800 	mov.w	r8, #0
 800ac0c:	f104 091a 	add.w	r9, r4, #26
 800ac10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac12:	3b01      	subs	r3, #1
 800ac14:	4543      	cmp	r3, r8
 800ac16:	dc09      	bgt.n	800ac2c <_printf_float+0x260>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	079b      	lsls	r3, r3, #30
 800ac1c:	f100 8107 	bmi.w	800ae2e <_printf_float+0x462>
 800ac20:	68e0      	ldr	r0, [r4, #12]
 800ac22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac24:	4298      	cmp	r0, r3
 800ac26:	bfb8      	it	lt
 800ac28:	4618      	movlt	r0, r3
 800ac2a:	e730      	b.n	800aa8e <_printf_float+0xc2>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	464a      	mov	r2, r9
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b8      	blx	r7
 800ac36:	3001      	adds	r0, #1
 800ac38:	f43f af27 	beq.w	800aa8a <_printf_float+0xbe>
 800ac3c:	f108 0801 	add.w	r8, r8, #1
 800ac40:	e7e6      	b.n	800ac10 <_printf_float+0x244>
 800ac42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	dc39      	bgt.n	800acbc <_printf_float+0x2f0>
 800ac48:	4a1b      	ldr	r2, [pc, #108]	; (800acb8 <_printf_float+0x2ec>)
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b8      	blx	r7
 800ac52:	3001      	adds	r0, #1
 800ac54:	f43f af19 	beq.w	800aa8a <_printf_float+0xbe>
 800ac58:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	d102      	bne.n	800ac66 <_printf_float+0x29a>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	07d9      	lsls	r1, r3, #31
 800ac64:	d5d8      	bpl.n	800ac18 <_printf_float+0x24c>
 800ac66:	ee18 3a10 	vmov	r3, s16
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4628      	mov	r0, r5
 800ac70:	47b8      	blx	r7
 800ac72:	3001      	adds	r0, #1
 800ac74:	f43f af09 	beq.w	800aa8a <_printf_float+0xbe>
 800ac78:	f04f 0900 	mov.w	r9, #0
 800ac7c:	f104 0a1a 	add.w	sl, r4, #26
 800ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac82:	425b      	negs	r3, r3
 800ac84:	454b      	cmp	r3, r9
 800ac86:	dc01      	bgt.n	800ac8c <_printf_float+0x2c0>
 800ac88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8a:	e792      	b.n	800abb2 <_printf_float+0x1e6>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4652      	mov	r2, sl
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b8      	blx	r7
 800ac96:	3001      	adds	r0, #1
 800ac98:	f43f aef7 	beq.w	800aa8a <_printf_float+0xbe>
 800ac9c:	f109 0901 	add.w	r9, r9, #1
 800aca0:	e7ee      	b.n	800ac80 <_printf_float+0x2b4>
 800aca2:	bf00      	nop
 800aca4:	7fefffff 	.word	0x7fefffff
 800aca8:	0800e789 	.word	0x0800e789
 800acac:	0800e78d 	.word	0x0800e78d
 800acb0:	0800e791 	.word	0x0800e791
 800acb4:	0800e795 	.word	0x0800e795
 800acb8:	0800e799 	.word	0x0800e799
 800acbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acc0:	429a      	cmp	r2, r3
 800acc2:	bfa8      	it	ge
 800acc4:	461a      	movge	r2, r3
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	4691      	mov	r9, r2
 800acca:	dc37      	bgt.n	800ad3c <_printf_float+0x370>
 800accc:	f04f 0b00 	mov.w	fp, #0
 800acd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acd4:	f104 021a 	add.w	r2, r4, #26
 800acd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	eba3 0309 	sub.w	r3, r3, r9
 800ace0:	455b      	cmp	r3, fp
 800ace2:	dc33      	bgt.n	800ad4c <_printf_float+0x380>
 800ace4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ace8:	429a      	cmp	r2, r3
 800acea:	db3b      	blt.n	800ad64 <_printf_float+0x398>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	07da      	lsls	r2, r3, #31
 800acf0:	d438      	bmi.n	800ad64 <_printf_float+0x398>
 800acf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acf6:	eba2 0903 	sub.w	r9, r2, r3
 800acfa:	9b05      	ldr	r3, [sp, #20]
 800acfc:	1ad2      	subs	r2, r2, r3
 800acfe:	4591      	cmp	r9, r2
 800ad00:	bfa8      	it	ge
 800ad02:	4691      	movge	r9, r2
 800ad04:	f1b9 0f00 	cmp.w	r9, #0
 800ad08:	dc35      	bgt.n	800ad76 <_printf_float+0x3aa>
 800ad0a:	f04f 0800 	mov.w	r8, #0
 800ad0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad12:	f104 0a1a 	add.w	sl, r4, #26
 800ad16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	eba3 0309 	sub.w	r3, r3, r9
 800ad20:	4543      	cmp	r3, r8
 800ad22:	f77f af79 	ble.w	800ac18 <_printf_float+0x24c>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4652      	mov	r2, sl
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b8      	blx	r7
 800ad30:	3001      	adds	r0, #1
 800ad32:	f43f aeaa 	beq.w	800aa8a <_printf_float+0xbe>
 800ad36:	f108 0801 	add.w	r8, r8, #1
 800ad3a:	e7ec      	b.n	800ad16 <_printf_float+0x34a>
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4642      	mov	r2, r8
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	d1c0      	bne.n	800accc <_printf_float+0x300>
 800ad4a:	e69e      	b.n	800aa8a <_printf_float+0xbe>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	9205      	str	r2, [sp, #20]
 800ad54:	47b8      	blx	r7
 800ad56:	3001      	adds	r0, #1
 800ad58:	f43f ae97 	beq.w	800aa8a <_printf_float+0xbe>
 800ad5c:	9a05      	ldr	r2, [sp, #20]
 800ad5e:	f10b 0b01 	add.w	fp, fp, #1
 800ad62:	e7b9      	b.n	800acd8 <_printf_float+0x30c>
 800ad64:	ee18 3a10 	vmov	r3, s16
 800ad68:	4652      	mov	r2, sl
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b8      	blx	r7
 800ad70:	3001      	adds	r0, #1
 800ad72:	d1be      	bne.n	800acf2 <_printf_float+0x326>
 800ad74:	e689      	b.n	800aa8a <_printf_float+0xbe>
 800ad76:	9a05      	ldr	r2, [sp, #20]
 800ad78:	464b      	mov	r3, r9
 800ad7a:	4442      	add	r2, r8
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	d1c1      	bne.n	800ad0a <_printf_float+0x33e>
 800ad86:	e680      	b.n	800aa8a <_printf_float+0xbe>
 800ad88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8a:	2a01      	cmp	r2, #1
 800ad8c:	dc01      	bgt.n	800ad92 <_printf_float+0x3c6>
 800ad8e:	07db      	lsls	r3, r3, #31
 800ad90:	d53a      	bpl.n	800ae08 <_printf_float+0x43c>
 800ad92:	2301      	movs	r3, #1
 800ad94:	4642      	mov	r2, r8
 800ad96:	4631      	mov	r1, r6
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b8      	blx	r7
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	f43f ae74 	beq.w	800aa8a <_printf_float+0xbe>
 800ada2:	ee18 3a10 	vmov	r3, s16
 800ada6:	4652      	mov	r2, sl
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	47b8      	blx	r7
 800adae:	3001      	adds	r0, #1
 800adb0:	f43f ae6b 	beq.w	800aa8a <_printf_float+0xbe>
 800adb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adb8:	2200      	movs	r2, #0
 800adba:	2300      	movs	r3, #0
 800adbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800adc0:	f7f5 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 800adc4:	b9d8      	cbnz	r0, 800adfe <_printf_float+0x432>
 800adc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800adca:	f108 0201 	add.w	r2, r8, #1
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	47b8      	blx	r7
 800add4:	3001      	adds	r0, #1
 800add6:	d10e      	bne.n	800adf6 <_printf_float+0x42a>
 800add8:	e657      	b.n	800aa8a <_printf_float+0xbe>
 800adda:	2301      	movs	r3, #1
 800addc:	4652      	mov	r2, sl
 800adde:	4631      	mov	r1, r6
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	f43f ae50 	beq.w	800aa8a <_printf_float+0xbe>
 800adea:	f108 0801 	add.w	r8, r8, #1
 800adee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4543      	cmp	r3, r8
 800adf4:	dcf1      	bgt.n	800adda <_printf_float+0x40e>
 800adf6:	464b      	mov	r3, r9
 800adf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adfc:	e6da      	b.n	800abb4 <_printf_float+0x1e8>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	f104 0a1a 	add.w	sl, r4, #26
 800ae06:	e7f2      	b.n	800adee <_printf_float+0x422>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	e7df      	b.n	800adce <_printf_float+0x402>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	464a      	mov	r2, r9
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f ae36 	beq.w	800aa8a <_printf_float+0xbe>
 800ae1e:	f108 0801 	add.w	r8, r8, #1
 800ae22:	68e3      	ldr	r3, [r4, #12]
 800ae24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae26:	1a5b      	subs	r3, r3, r1
 800ae28:	4543      	cmp	r3, r8
 800ae2a:	dcf0      	bgt.n	800ae0e <_printf_float+0x442>
 800ae2c:	e6f8      	b.n	800ac20 <_printf_float+0x254>
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	f104 0919 	add.w	r9, r4, #25
 800ae36:	e7f4      	b.n	800ae22 <_printf_float+0x456>

0800ae38 <_printf_common>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	4699      	mov	r9, r3
 800ae40:	688a      	ldr	r2, [r1, #8]
 800ae42:	690b      	ldr	r3, [r1, #16]
 800ae44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	bfb8      	it	lt
 800ae4c:	4613      	movlt	r3, r2
 800ae4e:	6033      	str	r3, [r6, #0]
 800ae50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae54:	4607      	mov	r7, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	b10a      	cbz	r2, 800ae5e <_printf_common+0x26>
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	6033      	str	r3, [r6, #0]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	0699      	lsls	r1, r3, #26
 800ae62:	bf42      	ittt	mi
 800ae64:	6833      	ldrmi	r3, [r6, #0]
 800ae66:	3302      	addmi	r3, #2
 800ae68:	6033      	strmi	r3, [r6, #0]
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	f015 0506 	ands.w	r5, r5, #6
 800ae70:	d106      	bne.n	800ae80 <_printf_common+0x48>
 800ae72:	f104 0a19 	add.w	sl, r4, #25
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	6832      	ldr	r2, [r6, #0]
 800ae7a:	1a9b      	subs	r3, r3, r2
 800ae7c:	42ab      	cmp	r3, r5
 800ae7e:	dc26      	bgt.n	800aece <_printf_common+0x96>
 800ae80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae84:	1e13      	subs	r3, r2, #0
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	bf18      	it	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	0692      	lsls	r2, r2, #26
 800ae8e:	d42b      	bmi.n	800aee8 <_printf_common+0xb0>
 800ae90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae94:	4649      	mov	r1, r9
 800ae96:	4638      	mov	r0, r7
 800ae98:	47c0      	blx	r8
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d01e      	beq.n	800aedc <_printf_common+0xa4>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	f003 0306 	and.w	r3, r3, #6
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	bf02      	ittt	eq
 800aeaa:	68e5      	ldreq	r5, [r4, #12]
 800aeac:	6833      	ldreq	r3, [r6, #0]
 800aeae:	1aed      	subeq	r5, r5, r3
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	bf0c      	ite	eq
 800aeb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeb8:	2500      	movne	r5, #0
 800aeba:	4293      	cmp	r3, r2
 800aebc:	bfc4      	itt	gt
 800aebe:	1a9b      	subgt	r3, r3, r2
 800aec0:	18ed      	addgt	r5, r5, r3
 800aec2:	2600      	movs	r6, #0
 800aec4:	341a      	adds	r4, #26
 800aec6:	42b5      	cmp	r5, r6
 800aec8:	d11a      	bne.n	800af00 <_printf_common+0xc8>
 800aeca:	2000      	movs	r0, #0
 800aecc:	e008      	b.n	800aee0 <_printf_common+0xa8>
 800aece:	2301      	movs	r3, #1
 800aed0:	4652      	mov	r2, sl
 800aed2:	4649      	mov	r1, r9
 800aed4:	4638      	mov	r0, r7
 800aed6:	47c0      	blx	r8
 800aed8:	3001      	adds	r0, #1
 800aeda:	d103      	bne.n	800aee4 <_printf_common+0xac>
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee4:	3501      	adds	r5, #1
 800aee6:	e7c6      	b.n	800ae76 <_printf_common+0x3e>
 800aee8:	18e1      	adds	r1, r4, r3
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	2030      	movs	r0, #48	; 0x30
 800aeee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aef2:	4422      	add	r2, r4
 800aef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aefc:	3302      	adds	r3, #2
 800aefe:	e7c7      	b.n	800ae90 <_printf_common+0x58>
 800af00:	2301      	movs	r3, #1
 800af02:	4622      	mov	r2, r4
 800af04:	4649      	mov	r1, r9
 800af06:	4638      	mov	r0, r7
 800af08:	47c0      	blx	r8
 800af0a:	3001      	adds	r0, #1
 800af0c:	d0e6      	beq.n	800aedc <_printf_common+0xa4>
 800af0e:	3601      	adds	r6, #1
 800af10:	e7d9      	b.n	800aec6 <_printf_common+0x8e>
	...

0800af14 <_printf_i>:
 800af14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af18:	7e0f      	ldrb	r7, [r1, #24]
 800af1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af1c:	2f78      	cmp	r7, #120	; 0x78
 800af1e:	4691      	mov	r9, r2
 800af20:	4680      	mov	r8, r0
 800af22:	460c      	mov	r4, r1
 800af24:	469a      	mov	sl, r3
 800af26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af2a:	d807      	bhi.n	800af3c <_printf_i+0x28>
 800af2c:	2f62      	cmp	r7, #98	; 0x62
 800af2e:	d80a      	bhi.n	800af46 <_printf_i+0x32>
 800af30:	2f00      	cmp	r7, #0
 800af32:	f000 80d4 	beq.w	800b0de <_printf_i+0x1ca>
 800af36:	2f58      	cmp	r7, #88	; 0x58
 800af38:	f000 80c0 	beq.w	800b0bc <_printf_i+0x1a8>
 800af3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af44:	e03a      	b.n	800afbc <_printf_i+0xa8>
 800af46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af4a:	2b15      	cmp	r3, #21
 800af4c:	d8f6      	bhi.n	800af3c <_printf_i+0x28>
 800af4e:	a101      	add	r1, pc, #4	; (adr r1, 800af54 <_printf_i+0x40>)
 800af50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af54:	0800afad 	.word	0x0800afad
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800af3d 	.word	0x0800af3d
 800af60:	0800af3d 	.word	0x0800af3d
 800af64:	0800af3d 	.word	0x0800af3d
 800af68:	0800af3d 	.word	0x0800af3d
 800af6c:	0800afc1 	.word	0x0800afc1
 800af70:	0800af3d 	.word	0x0800af3d
 800af74:	0800af3d 	.word	0x0800af3d
 800af78:	0800af3d 	.word	0x0800af3d
 800af7c:	0800af3d 	.word	0x0800af3d
 800af80:	0800b0c5 	.word	0x0800b0c5
 800af84:	0800afed 	.word	0x0800afed
 800af88:	0800b07f 	.word	0x0800b07f
 800af8c:	0800af3d 	.word	0x0800af3d
 800af90:	0800af3d 	.word	0x0800af3d
 800af94:	0800b0e7 	.word	0x0800b0e7
 800af98:	0800af3d 	.word	0x0800af3d
 800af9c:	0800afed 	.word	0x0800afed
 800afa0:	0800af3d 	.word	0x0800af3d
 800afa4:	0800af3d 	.word	0x0800af3d
 800afa8:	0800b087 	.word	0x0800b087
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	602a      	str	r2, [r5, #0]
 800afb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afbc:	2301      	movs	r3, #1
 800afbe:	e09f      	b.n	800b100 <_printf_i+0x1ec>
 800afc0:	6820      	ldr	r0, [r4, #0]
 800afc2:	682b      	ldr	r3, [r5, #0]
 800afc4:	0607      	lsls	r7, r0, #24
 800afc6:	f103 0104 	add.w	r1, r3, #4
 800afca:	6029      	str	r1, [r5, #0]
 800afcc:	d501      	bpl.n	800afd2 <_printf_i+0xbe>
 800afce:	681e      	ldr	r6, [r3, #0]
 800afd0:	e003      	b.n	800afda <_printf_i+0xc6>
 800afd2:	0646      	lsls	r6, r0, #25
 800afd4:	d5fb      	bpl.n	800afce <_printf_i+0xba>
 800afd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800afda:	2e00      	cmp	r6, #0
 800afdc:	da03      	bge.n	800afe6 <_printf_i+0xd2>
 800afde:	232d      	movs	r3, #45	; 0x2d
 800afe0:	4276      	negs	r6, r6
 800afe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe6:	485a      	ldr	r0, [pc, #360]	; (800b150 <_printf_i+0x23c>)
 800afe8:	230a      	movs	r3, #10
 800afea:	e012      	b.n	800b012 <_printf_i+0xfe>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	6820      	ldr	r0, [r4, #0]
 800aff0:	1d19      	adds	r1, r3, #4
 800aff2:	6029      	str	r1, [r5, #0]
 800aff4:	0605      	lsls	r5, r0, #24
 800aff6:	d501      	bpl.n	800affc <_printf_i+0xe8>
 800aff8:	681e      	ldr	r6, [r3, #0]
 800affa:	e002      	b.n	800b002 <_printf_i+0xee>
 800affc:	0641      	lsls	r1, r0, #25
 800affe:	d5fb      	bpl.n	800aff8 <_printf_i+0xe4>
 800b000:	881e      	ldrh	r6, [r3, #0]
 800b002:	4853      	ldr	r0, [pc, #332]	; (800b150 <_printf_i+0x23c>)
 800b004:	2f6f      	cmp	r7, #111	; 0x6f
 800b006:	bf0c      	ite	eq
 800b008:	2308      	moveq	r3, #8
 800b00a:	230a      	movne	r3, #10
 800b00c:	2100      	movs	r1, #0
 800b00e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b012:	6865      	ldr	r5, [r4, #4]
 800b014:	60a5      	str	r5, [r4, #8]
 800b016:	2d00      	cmp	r5, #0
 800b018:	bfa2      	ittt	ge
 800b01a:	6821      	ldrge	r1, [r4, #0]
 800b01c:	f021 0104 	bicge.w	r1, r1, #4
 800b020:	6021      	strge	r1, [r4, #0]
 800b022:	b90e      	cbnz	r6, 800b028 <_printf_i+0x114>
 800b024:	2d00      	cmp	r5, #0
 800b026:	d04b      	beq.n	800b0c0 <_printf_i+0x1ac>
 800b028:	4615      	mov	r5, r2
 800b02a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b02e:	fb03 6711 	mls	r7, r3, r1, r6
 800b032:	5dc7      	ldrb	r7, [r0, r7]
 800b034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b038:	4637      	mov	r7, r6
 800b03a:	42bb      	cmp	r3, r7
 800b03c:	460e      	mov	r6, r1
 800b03e:	d9f4      	bls.n	800b02a <_printf_i+0x116>
 800b040:	2b08      	cmp	r3, #8
 800b042:	d10b      	bne.n	800b05c <_printf_i+0x148>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	07de      	lsls	r6, r3, #31
 800b048:	d508      	bpl.n	800b05c <_printf_i+0x148>
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	6861      	ldr	r1, [r4, #4]
 800b04e:	4299      	cmp	r1, r3
 800b050:	bfde      	ittt	le
 800b052:	2330      	movle	r3, #48	; 0x30
 800b054:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b05c:	1b52      	subs	r2, r2, r5
 800b05e:	6122      	str	r2, [r4, #16]
 800b060:	f8cd a000 	str.w	sl, [sp]
 800b064:	464b      	mov	r3, r9
 800b066:	aa03      	add	r2, sp, #12
 800b068:	4621      	mov	r1, r4
 800b06a:	4640      	mov	r0, r8
 800b06c:	f7ff fee4 	bl	800ae38 <_printf_common>
 800b070:	3001      	adds	r0, #1
 800b072:	d14a      	bne.n	800b10a <_printf_i+0x1f6>
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	b004      	add	sp, #16
 800b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	f043 0320 	orr.w	r3, r3, #32
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	4833      	ldr	r0, [pc, #204]	; (800b154 <_printf_i+0x240>)
 800b088:	2778      	movs	r7, #120	; 0x78
 800b08a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	6829      	ldr	r1, [r5, #0]
 800b092:	061f      	lsls	r7, r3, #24
 800b094:	f851 6b04 	ldr.w	r6, [r1], #4
 800b098:	d402      	bmi.n	800b0a0 <_printf_i+0x18c>
 800b09a:	065f      	lsls	r7, r3, #25
 800b09c:	bf48      	it	mi
 800b09e:	b2b6      	uxthmi	r6, r6
 800b0a0:	07df      	lsls	r7, r3, #31
 800b0a2:	bf48      	it	mi
 800b0a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b0a8:	6029      	str	r1, [r5, #0]
 800b0aa:	bf48      	it	mi
 800b0ac:	6023      	strmi	r3, [r4, #0]
 800b0ae:	b91e      	cbnz	r6, 800b0b8 <_printf_i+0x1a4>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	f023 0320 	bic.w	r3, r3, #32
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	e7a7      	b.n	800b00c <_printf_i+0xf8>
 800b0bc:	4824      	ldr	r0, [pc, #144]	; (800b150 <_printf_i+0x23c>)
 800b0be:	e7e4      	b.n	800b08a <_printf_i+0x176>
 800b0c0:	4615      	mov	r5, r2
 800b0c2:	e7bd      	b.n	800b040 <_printf_i+0x12c>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	6826      	ldr	r6, [r4, #0]
 800b0c8:	6961      	ldr	r1, [r4, #20]
 800b0ca:	1d18      	adds	r0, r3, #4
 800b0cc:	6028      	str	r0, [r5, #0]
 800b0ce:	0635      	lsls	r5, r6, #24
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	d501      	bpl.n	800b0d8 <_printf_i+0x1c4>
 800b0d4:	6019      	str	r1, [r3, #0]
 800b0d6:	e002      	b.n	800b0de <_printf_i+0x1ca>
 800b0d8:	0670      	lsls	r0, r6, #25
 800b0da:	d5fb      	bpl.n	800b0d4 <_printf_i+0x1c0>
 800b0dc:	8019      	strh	r1, [r3, #0]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6123      	str	r3, [r4, #16]
 800b0e2:	4615      	mov	r5, r2
 800b0e4:	e7bc      	b.n	800b060 <_printf_i+0x14c>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	1d1a      	adds	r2, r3, #4
 800b0ea:	602a      	str	r2, [r5, #0]
 800b0ec:	681d      	ldr	r5, [r3, #0]
 800b0ee:	6862      	ldr	r2, [r4, #4]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f7f5 f88c 	bl	8000210 <memchr>
 800b0f8:	b108      	cbz	r0, 800b0fe <_printf_i+0x1ea>
 800b0fa:	1b40      	subs	r0, r0, r5
 800b0fc:	6060      	str	r0, [r4, #4]
 800b0fe:	6863      	ldr	r3, [r4, #4]
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	2300      	movs	r3, #0
 800b104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b108:	e7aa      	b.n	800b060 <_printf_i+0x14c>
 800b10a:	6923      	ldr	r3, [r4, #16]
 800b10c:	462a      	mov	r2, r5
 800b10e:	4649      	mov	r1, r9
 800b110:	4640      	mov	r0, r8
 800b112:	47d0      	blx	sl
 800b114:	3001      	adds	r0, #1
 800b116:	d0ad      	beq.n	800b074 <_printf_i+0x160>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	079b      	lsls	r3, r3, #30
 800b11c:	d413      	bmi.n	800b146 <_printf_i+0x232>
 800b11e:	68e0      	ldr	r0, [r4, #12]
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	4298      	cmp	r0, r3
 800b124:	bfb8      	it	lt
 800b126:	4618      	movlt	r0, r3
 800b128:	e7a6      	b.n	800b078 <_printf_i+0x164>
 800b12a:	2301      	movs	r3, #1
 800b12c:	4632      	mov	r2, r6
 800b12e:	4649      	mov	r1, r9
 800b130:	4640      	mov	r0, r8
 800b132:	47d0      	blx	sl
 800b134:	3001      	adds	r0, #1
 800b136:	d09d      	beq.n	800b074 <_printf_i+0x160>
 800b138:	3501      	adds	r5, #1
 800b13a:	68e3      	ldr	r3, [r4, #12]
 800b13c:	9903      	ldr	r1, [sp, #12]
 800b13e:	1a5b      	subs	r3, r3, r1
 800b140:	42ab      	cmp	r3, r5
 800b142:	dcf2      	bgt.n	800b12a <_printf_i+0x216>
 800b144:	e7eb      	b.n	800b11e <_printf_i+0x20a>
 800b146:	2500      	movs	r5, #0
 800b148:	f104 0619 	add.w	r6, r4, #25
 800b14c:	e7f5      	b.n	800b13a <_printf_i+0x226>
 800b14e:	bf00      	nop
 800b150:	0800e79b 	.word	0x0800e79b
 800b154:	0800e7ac 	.word	0x0800e7ac

0800b158 <std>:
 800b158:	2300      	movs	r3, #0
 800b15a:	b510      	push	{r4, lr}
 800b15c:	4604      	mov	r4, r0
 800b15e:	e9c0 3300 	strd	r3, r3, [r0]
 800b162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b166:	6083      	str	r3, [r0, #8]
 800b168:	8181      	strh	r1, [r0, #12]
 800b16a:	6643      	str	r3, [r0, #100]	; 0x64
 800b16c:	81c2      	strh	r2, [r0, #14]
 800b16e:	6183      	str	r3, [r0, #24]
 800b170:	4619      	mov	r1, r3
 800b172:	2208      	movs	r2, #8
 800b174:	305c      	adds	r0, #92	; 0x5c
 800b176:	f000 f928 	bl	800b3ca <memset>
 800b17a:	4b0d      	ldr	r3, [pc, #52]	; (800b1b0 <std+0x58>)
 800b17c:	6263      	str	r3, [r4, #36]	; 0x24
 800b17e:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <std+0x5c>)
 800b180:	62a3      	str	r3, [r4, #40]	; 0x28
 800b182:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <std+0x60>)
 800b184:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b186:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <std+0x64>)
 800b188:	6323      	str	r3, [r4, #48]	; 0x30
 800b18a:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <std+0x68>)
 800b18c:	6224      	str	r4, [r4, #32]
 800b18e:	429c      	cmp	r4, r3
 800b190:	d006      	beq.n	800b1a0 <std+0x48>
 800b192:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b196:	4294      	cmp	r4, r2
 800b198:	d002      	beq.n	800b1a0 <std+0x48>
 800b19a:	33d0      	adds	r3, #208	; 0xd0
 800b19c:	429c      	cmp	r4, r3
 800b19e:	d105      	bne.n	800b1ac <std+0x54>
 800b1a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a8:	f000 b9e2 	b.w	800b570 <__retarget_lock_init_recursive>
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	bf00      	nop
 800b1b0:	0800b345 	.word	0x0800b345
 800b1b4:	0800b367 	.word	0x0800b367
 800b1b8:	0800b39f 	.word	0x0800b39f
 800b1bc:	0800b3c3 	.word	0x0800b3c3
 800b1c0:	200051e0 	.word	0x200051e0

0800b1c4 <stdio_exit_handler>:
 800b1c4:	4a02      	ldr	r2, [pc, #8]	; (800b1d0 <stdio_exit_handler+0xc>)
 800b1c6:	4903      	ldr	r1, [pc, #12]	; (800b1d4 <stdio_exit_handler+0x10>)
 800b1c8:	4803      	ldr	r0, [pc, #12]	; (800b1d8 <stdio_exit_handler+0x14>)
 800b1ca:	f000 b869 	b.w	800b2a0 <_fwalk_sglue>
 800b1ce:	bf00      	nop
 800b1d0:	20000018 	.word	0x20000018
 800b1d4:	0800cf81 	.word	0x0800cf81
 800b1d8:	20000190 	.word	0x20000190

0800b1dc <cleanup_stdio>:
 800b1dc:	6841      	ldr	r1, [r0, #4]
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <cleanup_stdio+0x34>)
 800b1e0:	4299      	cmp	r1, r3
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	d001      	beq.n	800b1ec <cleanup_stdio+0x10>
 800b1e8:	f001 feca 	bl	800cf80 <_fflush_r>
 800b1ec:	68a1      	ldr	r1, [r4, #8]
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <cleanup_stdio+0x38>)
 800b1f0:	4299      	cmp	r1, r3
 800b1f2:	d002      	beq.n	800b1fa <cleanup_stdio+0x1e>
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f001 fec3 	bl	800cf80 <_fflush_r>
 800b1fa:	68e1      	ldr	r1, [r4, #12]
 800b1fc:	4b06      	ldr	r3, [pc, #24]	; (800b218 <cleanup_stdio+0x3c>)
 800b1fe:	4299      	cmp	r1, r3
 800b200:	d004      	beq.n	800b20c <cleanup_stdio+0x30>
 800b202:	4620      	mov	r0, r4
 800b204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b208:	f001 beba 	b.w	800cf80 <_fflush_r>
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	bf00      	nop
 800b210:	200051e0 	.word	0x200051e0
 800b214:	20005248 	.word	0x20005248
 800b218:	200052b0 	.word	0x200052b0

0800b21c <global_stdio_init.part.0>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <global_stdio_init.part.0+0x30>)
 800b220:	4c0b      	ldr	r4, [pc, #44]	; (800b250 <global_stdio_init.part.0+0x34>)
 800b222:	4a0c      	ldr	r2, [pc, #48]	; (800b254 <global_stdio_init.part.0+0x38>)
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	4620      	mov	r0, r4
 800b228:	2200      	movs	r2, #0
 800b22a:	2104      	movs	r1, #4
 800b22c:	f7ff ff94 	bl	800b158 <std>
 800b230:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b234:	2201      	movs	r2, #1
 800b236:	2109      	movs	r1, #9
 800b238:	f7ff ff8e 	bl	800b158 <std>
 800b23c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b240:	2202      	movs	r2, #2
 800b242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b246:	2112      	movs	r1, #18
 800b248:	f7ff bf86 	b.w	800b158 <std>
 800b24c:	20005318 	.word	0x20005318
 800b250:	200051e0 	.word	0x200051e0
 800b254:	0800b1c5 	.word	0x0800b1c5

0800b258 <__sfp_lock_acquire>:
 800b258:	4801      	ldr	r0, [pc, #4]	; (800b260 <__sfp_lock_acquire+0x8>)
 800b25a:	f000 b98a 	b.w	800b572 <__retarget_lock_acquire_recursive>
 800b25e:	bf00      	nop
 800b260:	20005321 	.word	0x20005321

0800b264 <__sfp_lock_release>:
 800b264:	4801      	ldr	r0, [pc, #4]	; (800b26c <__sfp_lock_release+0x8>)
 800b266:	f000 b985 	b.w	800b574 <__retarget_lock_release_recursive>
 800b26a:	bf00      	nop
 800b26c:	20005321 	.word	0x20005321

0800b270 <__sinit>:
 800b270:	b510      	push	{r4, lr}
 800b272:	4604      	mov	r4, r0
 800b274:	f7ff fff0 	bl	800b258 <__sfp_lock_acquire>
 800b278:	6a23      	ldr	r3, [r4, #32]
 800b27a:	b11b      	cbz	r3, 800b284 <__sinit+0x14>
 800b27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b280:	f7ff bff0 	b.w	800b264 <__sfp_lock_release>
 800b284:	4b04      	ldr	r3, [pc, #16]	; (800b298 <__sinit+0x28>)
 800b286:	6223      	str	r3, [r4, #32]
 800b288:	4b04      	ldr	r3, [pc, #16]	; (800b29c <__sinit+0x2c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f5      	bne.n	800b27c <__sinit+0xc>
 800b290:	f7ff ffc4 	bl	800b21c <global_stdio_init.part.0>
 800b294:	e7f2      	b.n	800b27c <__sinit+0xc>
 800b296:	bf00      	nop
 800b298:	0800b1dd 	.word	0x0800b1dd
 800b29c:	20005318 	.word	0x20005318

0800b2a0 <_fwalk_sglue>:
 800b2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	4688      	mov	r8, r1
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2b0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2b4:	d505      	bpl.n	800b2c2 <_fwalk_sglue+0x22>
 800b2b6:	6824      	ldr	r4, [r4, #0]
 800b2b8:	2c00      	cmp	r4, #0
 800b2ba:	d1f7      	bne.n	800b2ac <_fwalk_sglue+0xc>
 800b2bc:	4630      	mov	r0, r6
 800b2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c2:	89ab      	ldrh	r3, [r5, #12]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d907      	bls.n	800b2d8 <_fwalk_sglue+0x38>
 800b2c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	d003      	beq.n	800b2d8 <_fwalk_sglue+0x38>
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	47c0      	blx	r8
 800b2d6:	4306      	orrs	r6, r0
 800b2d8:	3568      	adds	r5, #104	; 0x68
 800b2da:	e7e9      	b.n	800b2b0 <_fwalk_sglue+0x10>

0800b2dc <sniprintf>:
 800b2dc:	b40c      	push	{r2, r3}
 800b2de:	b530      	push	{r4, r5, lr}
 800b2e0:	4b17      	ldr	r3, [pc, #92]	; (800b340 <sniprintf+0x64>)
 800b2e2:	1e0c      	subs	r4, r1, #0
 800b2e4:	681d      	ldr	r5, [r3, #0]
 800b2e6:	b09d      	sub	sp, #116	; 0x74
 800b2e8:	da08      	bge.n	800b2fc <sniprintf+0x20>
 800b2ea:	238b      	movs	r3, #139	; 0x8b
 800b2ec:	602b      	str	r3, [r5, #0]
 800b2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f2:	b01d      	add	sp, #116	; 0x74
 800b2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f8:	b002      	add	sp, #8
 800b2fa:	4770      	bx	lr
 800b2fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b300:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b304:	bf14      	ite	ne
 800b306:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b30a:	4623      	moveq	r3, r4
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b314:	9002      	str	r0, [sp, #8]
 800b316:	9006      	str	r0, [sp, #24]
 800b318:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b31c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b31e:	ab21      	add	r3, sp, #132	; 0x84
 800b320:	a902      	add	r1, sp, #8
 800b322:	4628      	mov	r0, r5
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	f001 fca7 	bl	800cc78 <_svfiprintf_r>
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	bfbc      	itt	lt
 800b32e:	238b      	movlt	r3, #139	; 0x8b
 800b330:	602b      	strlt	r3, [r5, #0]
 800b332:	2c00      	cmp	r4, #0
 800b334:	d0dd      	beq.n	800b2f2 <sniprintf+0x16>
 800b336:	9b02      	ldr	r3, [sp, #8]
 800b338:	2200      	movs	r2, #0
 800b33a:	701a      	strb	r2, [r3, #0]
 800b33c:	e7d9      	b.n	800b2f2 <sniprintf+0x16>
 800b33e:	bf00      	nop
 800b340:	200001dc 	.word	0x200001dc

0800b344 <__sread>:
 800b344:	b510      	push	{r4, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	f000 f8c2 	bl	800b4d4 <_read_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	bfab      	itete	ge
 800b354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b356:	89a3      	ldrhlt	r3, [r4, #12]
 800b358:	181b      	addge	r3, r3, r0
 800b35a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b35e:	bfac      	ite	ge
 800b360:	6563      	strge	r3, [r4, #84]	; 0x54
 800b362:	81a3      	strhlt	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__swrite>:
 800b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	461f      	mov	r7, r3
 800b36c:	898b      	ldrh	r3, [r1, #12]
 800b36e:	05db      	lsls	r3, r3, #23
 800b370:	4605      	mov	r5, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4616      	mov	r6, r2
 800b376:	d505      	bpl.n	800b384 <__swrite+0x1e>
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	2302      	movs	r3, #2
 800b37e:	2200      	movs	r2, #0
 800b380:	f000 f896 	bl	800b4b0 <_lseek_r>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	4628      	mov	r0, r5
 800b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	f000 b8ad 	b.w	800b4f8 <_write_r>

0800b39e <__sseek>:
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a6:	f000 f883 	bl	800b4b0 <_lseek_r>
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	bf15      	itete	ne
 800b3b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ba:	81a3      	strheq	r3, [r4, #12]
 800b3bc:	bf18      	it	ne
 800b3be:	81a3      	strhne	r3, [r4, #12]
 800b3c0:	bd10      	pop	{r4, pc}

0800b3c2 <__sclose>:
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 b80d 	b.w	800b3e4 <_close_r>

0800b3ca <memset>:
 800b3ca:	4402      	add	r2, r0
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d100      	bne.n	800b3d4 <memset+0xa>
 800b3d2:	4770      	bx	lr
 800b3d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d8:	e7f9      	b.n	800b3ce <memset+0x4>
	...

0800b3dc <_localeconv_r>:
 800b3dc:	4800      	ldr	r0, [pc, #0]	; (800b3e0 <_localeconv_r+0x4>)
 800b3de:	4770      	bx	lr
 800b3e0:	20000114 	.word	0x20000114

0800b3e4 <_close_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d06      	ldr	r5, [pc, #24]	; (800b400 <_close_r+0x1c>)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	f7f8 fa39 	bl	8003866 <_close>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_close_r+0x1a>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_close_r+0x1a>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	2000531c 	.word	0x2000531c

0800b404 <_reclaim_reent>:
 800b404:	4b29      	ldr	r3, [pc, #164]	; (800b4ac <_reclaim_reent+0xa8>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4283      	cmp	r3, r0
 800b40a:	b570      	push	{r4, r5, r6, lr}
 800b40c:	4604      	mov	r4, r0
 800b40e:	d04b      	beq.n	800b4a8 <_reclaim_reent+0xa4>
 800b410:	69c3      	ldr	r3, [r0, #28]
 800b412:	b143      	cbz	r3, 800b426 <_reclaim_reent+0x22>
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d144      	bne.n	800b4a4 <_reclaim_reent+0xa0>
 800b41a:	69e3      	ldr	r3, [r4, #28]
 800b41c:	6819      	ldr	r1, [r3, #0]
 800b41e:	b111      	cbz	r1, 800b426 <_reclaim_reent+0x22>
 800b420:	4620      	mov	r0, r4
 800b422:	f000 ff33 	bl	800c28c <_free_r>
 800b426:	6961      	ldr	r1, [r4, #20]
 800b428:	b111      	cbz	r1, 800b430 <_reclaim_reent+0x2c>
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 ff2e 	bl	800c28c <_free_r>
 800b430:	69e1      	ldr	r1, [r4, #28]
 800b432:	b111      	cbz	r1, 800b43a <_reclaim_reent+0x36>
 800b434:	4620      	mov	r0, r4
 800b436:	f000 ff29 	bl	800c28c <_free_r>
 800b43a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b43c:	b111      	cbz	r1, 800b444 <_reclaim_reent+0x40>
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 ff24 	bl	800c28c <_free_r>
 800b444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b446:	b111      	cbz	r1, 800b44e <_reclaim_reent+0x4a>
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 ff1f 	bl	800c28c <_free_r>
 800b44e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b450:	b111      	cbz	r1, 800b458 <_reclaim_reent+0x54>
 800b452:	4620      	mov	r0, r4
 800b454:	f000 ff1a 	bl	800c28c <_free_r>
 800b458:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b45a:	b111      	cbz	r1, 800b462 <_reclaim_reent+0x5e>
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 ff15 	bl	800c28c <_free_r>
 800b462:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b464:	b111      	cbz	r1, 800b46c <_reclaim_reent+0x68>
 800b466:	4620      	mov	r0, r4
 800b468:	f000 ff10 	bl	800c28c <_free_r>
 800b46c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b46e:	b111      	cbz	r1, 800b476 <_reclaim_reent+0x72>
 800b470:	4620      	mov	r0, r4
 800b472:	f000 ff0b 	bl	800c28c <_free_r>
 800b476:	6a23      	ldr	r3, [r4, #32]
 800b478:	b1b3      	cbz	r3, 800b4a8 <_reclaim_reent+0xa4>
 800b47a:	4620      	mov	r0, r4
 800b47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b480:	4718      	bx	r3
 800b482:	5949      	ldr	r1, [r1, r5]
 800b484:	b941      	cbnz	r1, 800b498 <_reclaim_reent+0x94>
 800b486:	3504      	adds	r5, #4
 800b488:	69e3      	ldr	r3, [r4, #28]
 800b48a:	2d80      	cmp	r5, #128	; 0x80
 800b48c:	68d9      	ldr	r1, [r3, #12]
 800b48e:	d1f8      	bne.n	800b482 <_reclaim_reent+0x7e>
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fefb 	bl	800c28c <_free_r>
 800b496:	e7c0      	b.n	800b41a <_reclaim_reent+0x16>
 800b498:	680e      	ldr	r6, [r1, #0]
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 fef6 	bl	800c28c <_free_r>
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	e7ef      	b.n	800b484 <_reclaim_reent+0x80>
 800b4a4:	2500      	movs	r5, #0
 800b4a6:	e7ef      	b.n	800b488 <_reclaim_reent+0x84>
 800b4a8:	bd70      	pop	{r4, r5, r6, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200001dc 	.word	0x200001dc

0800b4b0 <_lseek_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d07      	ldr	r5, [pc, #28]	; (800b4d0 <_lseek_r+0x20>)
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	602a      	str	r2, [r5, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f7f8 f9f8 	bl	80038b4 <_lseek>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d102      	bne.n	800b4ce <_lseek_r+0x1e>
 800b4c8:	682b      	ldr	r3, [r5, #0]
 800b4ca:	b103      	cbz	r3, 800b4ce <_lseek_r+0x1e>
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	2000531c 	.word	0x2000531c

0800b4d4 <_read_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d07      	ldr	r5, [pc, #28]	; (800b4f4 <_read_r+0x20>)
 800b4d8:	4604      	mov	r4, r0
 800b4da:	4608      	mov	r0, r1
 800b4dc:	4611      	mov	r1, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	602a      	str	r2, [r5, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f7f8 f986 	bl	80037f4 <_read>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_read_r+0x1e>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_read_r+0x1e>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	2000531c 	.word	0x2000531c

0800b4f8 <_write_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d07      	ldr	r5, [pc, #28]	; (800b518 <_write_r+0x20>)
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	4608      	mov	r0, r1
 800b500:	4611      	mov	r1, r2
 800b502:	2200      	movs	r2, #0
 800b504:	602a      	str	r2, [r5, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	f7f8 f991 	bl	800382e <_write>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_write_r+0x1e>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_write_r+0x1e>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	2000531c 	.word	0x2000531c

0800b51c <__errno>:
 800b51c:	4b01      	ldr	r3, [pc, #4]	; (800b524 <__errno+0x8>)
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	200001dc 	.word	0x200001dc

0800b528 <__libc_init_array>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	4d0d      	ldr	r5, [pc, #52]	; (800b560 <__libc_init_array+0x38>)
 800b52c:	4c0d      	ldr	r4, [pc, #52]	; (800b564 <__libc_init_array+0x3c>)
 800b52e:	1b64      	subs	r4, r4, r5
 800b530:	10a4      	asrs	r4, r4, #2
 800b532:	2600      	movs	r6, #0
 800b534:	42a6      	cmp	r6, r4
 800b536:	d109      	bne.n	800b54c <__libc_init_array+0x24>
 800b538:	4d0b      	ldr	r5, [pc, #44]	; (800b568 <__libc_init_array+0x40>)
 800b53a:	4c0c      	ldr	r4, [pc, #48]	; (800b56c <__libc_init_array+0x44>)
 800b53c:	f003 f81a 	bl	800e574 <_init>
 800b540:	1b64      	subs	r4, r4, r5
 800b542:	10a4      	asrs	r4, r4, #2
 800b544:	2600      	movs	r6, #0
 800b546:	42a6      	cmp	r6, r4
 800b548:	d105      	bne.n	800b556 <__libc_init_array+0x2e>
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b550:	4798      	blx	r3
 800b552:	3601      	adds	r6, #1
 800b554:	e7ee      	b.n	800b534 <__libc_init_array+0xc>
 800b556:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55a:	4798      	blx	r3
 800b55c:	3601      	adds	r6, #1
 800b55e:	e7f2      	b.n	800b546 <__libc_init_array+0x1e>
 800b560:	0800ea38 	.word	0x0800ea38
 800b564:	0800ea38 	.word	0x0800ea38
 800b568:	0800ea38 	.word	0x0800ea38
 800b56c:	0800ea3c 	.word	0x0800ea3c

0800b570 <__retarget_lock_init_recursive>:
 800b570:	4770      	bx	lr

0800b572 <__retarget_lock_acquire_recursive>:
 800b572:	4770      	bx	lr

0800b574 <__retarget_lock_release_recursive>:
 800b574:	4770      	bx	lr

0800b576 <memcpy>:
 800b576:	440a      	add	r2, r1
 800b578:	4291      	cmp	r1, r2
 800b57a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b57e:	d100      	bne.n	800b582 <memcpy+0xc>
 800b580:	4770      	bx	lr
 800b582:	b510      	push	{r4, lr}
 800b584:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b588:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b58c:	4291      	cmp	r1, r2
 800b58e:	d1f9      	bne.n	800b584 <memcpy+0xe>
 800b590:	bd10      	pop	{r4, pc}

0800b592 <quorem>:
 800b592:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b596:	6903      	ldr	r3, [r0, #16]
 800b598:	690c      	ldr	r4, [r1, #16]
 800b59a:	42a3      	cmp	r3, r4
 800b59c:	4607      	mov	r7, r0
 800b59e:	db7e      	blt.n	800b69e <quorem+0x10c>
 800b5a0:	3c01      	subs	r4, #1
 800b5a2:	f101 0814 	add.w	r8, r1, #20
 800b5a6:	f100 0514 	add.w	r5, r0, #20
 800b5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5c8:	d331      	bcc.n	800b62e <quorem+0x9c>
 800b5ca:	f04f 0e00 	mov.w	lr, #0
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	46ac      	mov	ip, r5
 800b5d2:	46f2      	mov	sl, lr
 800b5d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5d8:	b293      	uxth	r3, r2
 800b5da:	fb06 e303 	mla	r3, r6, r3, lr
 800b5de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5e2:	0c1a      	lsrs	r2, r3, #16
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	ebaa 0303 	sub.w	r3, sl, r3
 800b5ea:	f8dc a000 	ldr.w	sl, [ip]
 800b5ee:	fa13 f38a 	uxtah	r3, r3, sl
 800b5f2:	fb06 220e 	mla	r2, r6, lr, r2
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	9b00      	ldr	r3, [sp, #0]
 800b5fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5fe:	b292      	uxth	r2, r2
 800b600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b608:	f8bd 3000 	ldrh.w	r3, [sp]
 800b60c:	4581      	cmp	r9, r0
 800b60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b612:	f84c 3b04 	str.w	r3, [ip], #4
 800b616:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b61a:	d2db      	bcs.n	800b5d4 <quorem+0x42>
 800b61c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b620:	b92b      	cbnz	r3, 800b62e <quorem+0x9c>
 800b622:	9b01      	ldr	r3, [sp, #4]
 800b624:	3b04      	subs	r3, #4
 800b626:	429d      	cmp	r5, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	d32c      	bcc.n	800b686 <quorem+0xf4>
 800b62c:	613c      	str	r4, [r7, #16]
 800b62e:	4638      	mov	r0, r7
 800b630:	f001 f9ba 	bl	800c9a8 <__mcmp>
 800b634:	2800      	cmp	r0, #0
 800b636:	db22      	blt.n	800b67e <quorem+0xec>
 800b638:	3601      	adds	r6, #1
 800b63a:	4629      	mov	r1, r5
 800b63c:	2000      	movs	r0, #0
 800b63e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b642:	f8d1 c000 	ldr.w	ip, [r1]
 800b646:	b293      	uxth	r3, r2
 800b648:	1ac3      	subs	r3, r0, r3
 800b64a:	0c12      	lsrs	r2, r2, #16
 800b64c:	fa13 f38c 	uxtah	r3, r3, ip
 800b650:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b658:	b29b      	uxth	r3, r3
 800b65a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b65e:	45c1      	cmp	r9, r8
 800b660:	f841 3b04 	str.w	r3, [r1], #4
 800b664:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b668:	d2e9      	bcs.n	800b63e <quorem+0xac>
 800b66a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b66e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b672:	b922      	cbnz	r2, 800b67e <quorem+0xec>
 800b674:	3b04      	subs	r3, #4
 800b676:	429d      	cmp	r5, r3
 800b678:	461a      	mov	r2, r3
 800b67a:	d30a      	bcc.n	800b692 <quorem+0x100>
 800b67c:	613c      	str	r4, [r7, #16]
 800b67e:	4630      	mov	r0, r6
 800b680:	b003      	add	sp, #12
 800b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	6812      	ldr	r2, [r2, #0]
 800b688:	3b04      	subs	r3, #4
 800b68a:	2a00      	cmp	r2, #0
 800b68c:	d1ce      	bne.n	800b62c <quorem+0x9a>
 800b68e:	3c01      	subs	r4, #1
 800b690:	e7c9      	b.n	800b626 <quorem+0x94>
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	3b04      	subs	r3, #4
 800b696:	2a00      	cmp	r2, #0
 800b698:	d1f0      	bne.n	800b67c <quorem+0xea>
 800b69a:	3c01      	subs	r4, #1
 800b69c:	e7eb      	b.n	800b676 <quorem+0xe4>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e7ee      	b.n	800b680 <quorem+0xee>
 800b6a2:	0000      	movs	r0, r0
 800b6a4:	0000      	movs	r0, r0
	...

0800b6a8 <_dtoa_r>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	ed2d 8b04 	vpush	{d8-d9}
 800b6b0:	69c5      	ldr	r5, [r0, #28]
 800b6b2:	b093      	sub	sp, #76	; 0x4c
 800b6b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6b8:	ec57 6b10 	vmov	r6, r7, d0
 800b6bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6c0:	9107      	str	r1, [sp, #28]
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	920a      	str	r2, [sp, #40]	; 0x28
 800b6c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6c8:	b975      	cbnz	r5, 800b6e8 <_dtoa_r+0x40>
 800b6ca:	2010      	movs	r0, #16
 800b6cc:	f000 fe2a 	bl	800c324 <malloc>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	61e0      	str	r0, [r4, #28]
 800b6d4:	b920      	cbnz	r0, 800b6e0 <_dtoa_r+0x38>
 800b6d6:	4bae      	ldr	r3, [pc, #696]	; (800b990 <_dtoa_r+0x2e8>)
 800b6d8:	21ef      	movs	r1, #239	; 0xef
 800b6da:	48ae      	ldr	r0, [pc, #696]	; (800b994 <_dtoa_r+0x2ec>)
 800b6dc:	f001 fca2 	bl	800d024 <__assert_func>
 800b6e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6e4:	6005      	str	r5, [r0, #0]
 800b6e6:	60c5      	str	r5, [r0, #12]
 800b6e8:	69e3      	ldr	r3, [r4, #28]
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	b151      	cbz	r1, 800b704 <_dtoa_r+0x5c>
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	604a      	str	r2, [r1, #4]
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4093      	lsls	r3, r2
 800b6f6:	608b      	str	r3, [r1, #8]
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f000 ff19 	bl	800c530 <_Bfree>
 800b6fe:	69e3      	ldr	r3, [r4, #28]
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	1e3b      	subs	r3, r7, #0
 800b706:	bfbb      	ittet	lt
 800b708:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b70c:	9303      	strlt	r3, [sp, #12]
 800b70e:	2300      	movge	r3, #0
 800b710:	2201      	movlt	r2, #1
 800b712:	bfac      	ite	ge
 800b714:	f8c8 3000 	strge.w	r3, [r8]
 800b718:	f8c8 2000 	strlt.w	r2, [r8]
 800b71c:	4b9e      	ldr	r3, [pc, #632]	; (800b998 <_dtoa_r+0x2f0>)
 800b71e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b722:	ea33 0308 	bics.w	r3, r3, r8
 800b726:	d11b      	bne.n	800b760 <_dtoa_r+0xb8>
 800b728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b72a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b734:	4333      	orrs	r3, r6
 800b736:	f000 8593 	beq.w	800c260 <_dtoa_r+0xbb8>
 800b73a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b73c:	b963      	cbnz	r3, 800b758 <_dtoa_r+0xb0>
 800b73e:	4b97      	ldr	r3, [pc, #604]	; (800b99c <_dtoa_r+0x2f4>)
 800b740:	e027      	b.n	800b792 <_dtoa_r+0xea>
 800b742:	4b97      	ldr	r3, [pc, #604]	; (800b9a0 <_dtoa_r+0x2f8>)
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	3308      	adds	r3, #8
 800b748:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	9800      	ldr	r0, [sp, #0]
 800b74e:	b013      	add	sp, #76	; 0x4c
 800b750:	ecbd 8b04 	vpop	{d8-d9}
 800b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b758:	4b90      	ldr	r3, [pc, #576]	; (800b99c <_dtoa_r+0x2f4>)
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	3303      	adds	r3, #3
 800b75e:	e7f3      	b.n	800b748 <_dtoa_r+0xa0>
 800b760:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b764:	2200      	movs	r2, #0
 800b766:	ec51 0b17 	vmov	r0, r1, d7
 800b76a:	eeb0 8a47 	vmov.f32	s16, s14
 800b76e:	eef0 8a67 	vmov.f32	s17, s15
 800b772:	2300      	movs	r3, #0
 800b774:	f7f5 f9c8 	bl	8000b08 <__aeabi_dcmpeq>
 800b778:	4681      	mov	r9, r0
 800b77a:	b160      	cbz	r0, 800b796 <_dtoa_r+0xee>
 800b77c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b77e:	2301      	movs	r3, #1
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 8568 	beq.w	800c25a <_dtoa_r+0xbb2>
 800b78a:	4b86      	ldr	r3, [pc, #536]	; (800b9a4 <_dtoa_r+0x2fc>)
 800b78c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	3b01      	subs	r3, #1
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	e7da      	b.n	800b74c <_dtoa_r+0xa4>
 800b796:	aa10      	add	r2, sp, #64	; 0x40
 800b798:	a911      	add	r1, sp, #68	; 0x44
 800b79a:	4620      	mov	r0, r4
 800b79c:	eeb0 0a48 	vmov.f32	s0, s16
 800b7a0:	eef0 0a68 	vmov.f32	s1, s17
 800b7a4:	f001 f9a6 	bl	800caf4 <__d2b>
 800b7a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	d07f      	beq.n	800b8b2 <_dtoa_r+0x20a>
 800b7b2:	ee18 3a90 	vmov	r3, s17
 800b7b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b7be:	ec51 0b18 	vmov	r0, r1, d8
 800b7c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4b75      	ldr	r3, [pc, #468]	; (800b9a8 <_dtoa_r+0x300>)
 800b7d4:	f7f4 fd78 	bl	80002c8 <__aeabi_dsub>
 800b7d8:	a367      	add	r3, pc, #412	; (adr r3, 800b978 <_dtoa_r+0x2d0>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f7f4 ff2b 	bl	8000638 <__aeabi_dmul>
 800b7e2:	a367      	add	r3, pc, #412	; (adr r3, 800b980 <_dtoa_r+0x2d8>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fd70 	bl	80002cc <__adddf3>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	460f      	mov	r7, r1
 800b7f2:	f7f4 feb7 	bl	8000564 <__aeabi_i2d>
 800b7f6:	a364      	add	r3, pc, #400	; (adr r3, 800b988 <_dtoa_r+0x2e0>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f7f4 ff1c 	bl	8000638 <__aeabi_dmul>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	f7f4 fd60 	bl	80002cc <__adddf3>
 800b80c:	4606      	mov	r6, r0
 800b80e:	460f      	mov	r7, r1
 800b810:	f7f5 f9c2 	bl	8000b98 <__aeabi_d2iz>
 800b814:	2200      	movs	r2, #0
 800b816:	4683      	mov	fp, r0
 800b818:	2300      	movs	r3, #0
 800b81a:	4630      	mov	r0, r6
 800b81c:	4639      	mov	r1, r7
 800b81e:	f7f5 f97d 	bl	8000b1c <__aeabi_dcmplt>
 800b822:	b148      	cbz	r0, 800b838 <_dtoa_r+0x190>
 800b824:	4658      	mov	r0, fp
 800b826:	f7f4 fe9d 	bl	8000564 <__aeabi_i2d>
 800b82a:	4632      	mov	r2, r6
 800b82c:	463b      	mov	r3, r7
 800b82e:	f7f5 f96b 	bl	8000b08 <__aeabi_dcmpeq>
 800b832:	b908      	cbnz	r0, 800b838 <_dtoa_r+0x190>
 800b834:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b838:	f1bb 0f16 	cmp.w	fp, #22
 800b83c:	d857      	bhi.n	800b8ee <_dtoa_r+0x246>
 800b83e:	4b5b      	ldr	r3, [pc, #364]	; (800b9ac <_dtoa_r+0x304>)
 800b840:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	ec51 0b18 	vmov	r0, r1, d8
 800b84c:	f7f5 f966 	bl	8000b1c <__aeabi_dcmplt>
 800b850:	2800      	cmp	r0, #0
 800b852:	d04e      	beq.n	800b8f2 <_dtoa_r+0x24a>
 800b854:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b858:	2300      	movs	r3, #0
 800b85a:	930c      	str	r3, [sp, #48]	; 0x30
 800b85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b85e:	1b5b      	subs	r3, r3, r5
 800b860:	1e5a      	subs	r2, r3, #1
 800b862:	bf45      	ittet	mi
 800b864:	f1c3 0301 	rsbmi	r3, r3, #1
 800b868:	9305      	strmi	r3, [sp, #20]
 800b86a:	2300      	movpl	r3, #0
 800b86c:	2300      	movmi	r3, #0
 800b86e:	9206      	str	r2, [sp, #24]
 800b870:	bf54      	ite	pl
 800b872:	9305      	strpl	r3, [sp, #20]
 800b874:	9306      	strmi	r3, [sp, #24]
 800b876:	f1bb 0f00 	cmp.w	fp, #0
 800b87a:	db3c      	blt.n	800b8f6 <_dtoa_r+0x24e>
 800b87c:	9b06      	ldr	r3, [sp, #24]
 800b87e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b882:	445b      	add	r3, fp
 800b884:	9306      	str	r3, [sp, #24]
 800b886:	2300      	movs	r3, #0
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	9b07      	ldr	r3, [sp, #28]
 800b88c:	2b09      	cmp	r3, #9
 800b88e:	d868      	bhi.n	800b962 <_dtoa_r+0x2ba>
 800b890:	2b05      	cmp	r3, #5
 800b892:	bfc4      	itt	gt
 800b894:	3b04      	subgt	r3, #4
 800b896:	9307      	strgt	r3, [sp, #28]
 800b898:	9b07      	ldr	r3, [sp, #28]
 800b89a:	f1a3 0302 	sub.w	r3, r3, #2
 800b89e:	bfcc      	ite	gt
 800b8a0:	2500      	movgt	r5, #0
 800b8a2:	2501      	movle	r5, #1
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	f200 8085 	bhi.w	800b9b4 <_dtoa_r+0x30c>
 800b8aa:	e8df f003 	tbb	[pc, r3]
 800b8ae:	3b2e      	.short	0x3b2e
 800b8b0:	5839      	.short	0x5839
 800b8b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8b6:	441d      	add	r5, r3
 800b8b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8bc:	2b20      	cmp	r3, #32
 800b8be:	bfc1      	itttt	gt
 800b8c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b8cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b8d0:	bfd6      	itet	le
 800b8d2:	f1c3 0320 	rsble	r3, r3, #32
 800b8d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b8da:	fa06 f003 	lslle.w	r0, r6, r3
 800b8de:	f7f4 fe31 	bl	8000544 <__aeabi_ui2d>
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b8e8:	3d01      	subs	r5, #1
 800b8ea:	920e      	str	r2, [sp, #56]	; 0x38
 800b8ec:	e76f      	b.n	800b7ce <_dtoa_r+0x126>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7b3      	b.n	800b85a <_dtoa_r+0x1b2>
 800b8f2:	900c      	str	r0, [sp, #48]	; 0x30
 800b8f4:	e7b2      	b.n	800b85c <_dtoa_r+0x1b4>
 800b8f6:	9b05      	ldr	r3, [sp, #20]
 800b8f8:	eba3 030b 	sub.w	r3, r3, fp
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	f1cb 0300 	rsb	r3, fp, #0
 800b902:	9308      	str	r3, [sp, #32]
 800b904:	2300      	movs	r3, #0
 800b906:	930b      	str	r3, [sp, #44]	; 0x2c
 800b908:	e7bf      	b.n	800b88a <_dtoa_r+0x1e2>
 800b90a:	2300      	movs	r3, #0
 800b90c:	9309      	str	r3, [sp, #36]	; 0x24
 800b90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b910:	2b00      	cmp	r3, #0
 800b912:	dc52      	bgt.n	800b9ba <_dtoa_r+0x312>
 800b914:	2301      	movs	r3, #1
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	461a      	mov	r2, r3
 800b91c:	920a      	str	r2, [sp, #40]	; 0x28
 800b91e:	e00b      	b.n	800b938 <_dtoa_r+0x290>
 800b920:	2301      	movs	r3, #1
 800b922:	e7f3      	b.n	800b90c <_dtoa_r+0x264>
 800b924:	2300      	movs	r3, #0
 800b926:	9309      	str	r3, [sp, #36]	; 0x24
 800b928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b92a:	445b      	add	r3, fp
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	3301      	adds	r3, #1
 800b930:	2b01      	cmp	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	bfb8      	it	lt
 800b936:	2301      	movlt	r3, #1
 800b938:	69e0      	ldr	r0, [r4, #28]
 800b93a:	2100      	movs	r1, #0
 800b93c:	2204      	movs	r2, #4
 800b93e:	f102 0614 	add.w	r6, r2, #20
 800b942:	429e      	cmp	r6, r3
 800b944:	d93d      	bls.n	800b9c2 <_dtoa_r+0x31a>
 800b946:	6041      	str	r1, [r0, #4]
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fdb1 	bl	800c4b0 <_Balloc>
 800b94e:	9000      	str	r0, [sp, #0]
 800b950:	2800      	cmp	r0, #0
 800b952:	d139      	bne.n	800b9c8 <_dtoa_r+0x320>
 800b954:	4b16      	ldr	r3, [pc, #88]	; (800b9b0 <_dtoa_r+0x308>)
 800b956:	4602      	mov	r2, r0
 800b958:	f240 11af 	movw	r1, #431	; 0x1af
 800b95c:	e6bd      	b.n	800b6da <_dtoa_r+0x32>
 800b95e:	2301      	movs	r3, #1
 800b960:	e7e1      	b.n	800b926 <_dtoa_r+0x27e>
 800b962:	2501      	movs	r5, #1
 800b964:	2300      	movs	r3, #0
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	9509      	str	r5, [sp, #36]	; 0x24
 800b96a:	f04f 33ff 	mov.w	r3, #4294967295
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	2200      	movs	r2, #0
 800b974:	2312      	movs	r3, #18
 800b976:	e7d1      	b.n	800b91c <_dtoa_r+0x274>
 800b978:	636f4361 	.word	0x636f4361
 800b97c:	3fd287a7 	.word	0x3fd287a7
 800b980:	8b60c8b3 	.word	0x8b60c8b3
 800b984:	3fc68a28 	.word	0x3fc68a28
 800b988:	509f79fb 	.word	0x509f79fb
 800b98c:	3fd34413 	.word	0x3fd34413
 800b990:	0800e7d4 	.word	0x0800e7d4
 800b994:	0800e7eb 	.word	0x0800e7eb
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	0800e7d0 	.word	0x0800e7d0
 800b9a0:	0800e7c7 	.word	0x0800e7c7
 800b9a4:	0800e79a 	.word	0x0800e79a
 800b9a8:	3ff80000 	.word	0x3ff80000
 800b9ac:	0800e8d8 	.word	0x0800e8d8
 800b9b0:	0800e843 	.word	0x0800e843
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	e7d7      	b.n	800b96a <_dtoa_r+0x2c2>
 800b9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	9304      	str	r3, [sp, #16]
 800b9c0:	e7ba      	b.n	800b938 <_dtoa_r+0x290>
 800b9c2:	3101      	adds	r1, #1
 800b9c4:	0052      	lsls	r2, r2, #1
 800b9c6:	e7ba      	b.n	800b93e <_dtoa_r+0x296>
 800b9c8:	69e3      	ldr	r3, [r4, #28]
 800b9ca:	9a00      	ldr	r2, [sp, #0]
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	9b04      	ldr	r3, [sp, #16]
 800b9d0:	2b0e      	cmp	r3, #14
 800b9d2:	f200 80a8 	bhi.w	800bb26 <_dtoa_r+0x47e>
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	f000 80a5 	beq.w	800bb26 <_dtoa_r+0x47e>
 800b9dc:	f1bb 0f00 	cmp.w	fp, #0
 800b9e0:	dd38      	ble.n	800ba54 <_dtoa_r+0x3ac>
 800b9e2:	4bc0      	ldr	r3, [pc, #768]	; (800bce4 <_dtoa_r+0x63c>)
 800b9e4:	f00b 020f 	and.w	r2, fp, #15
 800b9e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b9f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b9f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b9f8:	d019      	beq.n	800ba2e <_dtoa_r+0x386>
 800b9fa:	4bbb      	ldr	r3, [pc, #748]	; (800bce8 <_dtoa_r+0x640>)
 800b9fc:	ec51 0b18 	vmov	r0, r1, d8
 800ba00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba04:	f7f4 ff42 	bl	800088c <__aeabi_ddiv>
 800ba08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba0c:	f008 080f 	and.w	r8, r8, #15
 800ba10:	2503      	movs	r5, #3
 800ba12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bce8 <_dtoa_r+0x640>
 800ba16:	f1b8 0f00 	cmp.w	r8, #0
 800ba1a:	d10a      	bne.n	800ba32 <_dtoa_r+0x38a>
 800ba1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba20:	4632      	mov	r2, r6
 800ba22:	463b      	mov	r3, r7
 800ba24:	f7f4 ff32 	bl	800088c <__aeabi_ddiv>
 800ba28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba2c:	e02b      	b.n	800ba86 <_dtoa_r+0x3de>
 800ba2e:	2502      	movs	r5, #2
 800ba30:	e7ef      	b.n	800ba12 <_dtoa_r+0x36a>
 800ba32:	f018 0f01 	tst.w	r8, #1
 800ba36:	d008      	beq.n	800ba4a <_dtoa_r+0x3a2>
 800ba38:	4630      	mov	r0, r6
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba40:	f7f4 fdfa 	bl	8000638 <__aeabi_dmul>
 800ba44:	3501      	adds	r5, #1
 800ba46:	4606      	mov	r6, r0
 800ba48:	460f      	mov	r7, r1
 800ba4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba4e:	f109 0908 	add.w	r9, r9, #8
 800ba52:	e7e0      	b.n	800ba16 <_dtoa_r+0x36e>
 800ba54:	f000 809f 	beq.w	800bb96 <_dtoa_r+0x4ee>
 800ba58:	f1cb 0600 	rsb	r6, fp, #0
 800ba5c:	4ba1      	ldr	r3, [pc, #644]	; (800bce4 <_dtoa_r+0x63c>)
 800ba5e:	4fa2      	ldr	r7, [pc, #648]	; (800bce8 <_dtoa_r+0x640>)
 800ba60:	f006 020f 	and.w	r2, r6, #15
 800ba64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	ec51 0b18 	vmov	r0, r1, d8
 800ba70:	f7f4 fde2 	bl	8000638 <__aeabi_dmul>
 800ba74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba78:	1136      	asrs	r6, r6, #4
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2502      	movs	r5, #2
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	d17e      	bne.n	800bb80 <_dtoa_r+0x4d8>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1d0      	bne.n	800ba28 <_dtoa_r+0x380>
 800ba86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 8084 	beq.w	800bb9a <_dtoa_r+0x4f2>
 800ba92:	4b96      	ldr	r3, [pc, #600]	; (800bcec <_dtoa_r+0x644>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f5 f83f 	bl	8000b1c <__aeabi_dcmplt>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d07b      	beq.n	800bb9a <_dtoa_r+0x4f2>
 800baa2:	9b04      	ldr	r3, [sp, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d078      	beq.n	800bb9a <_dtoa_r+0x4f2>
 800baa8:	9b01      	ldr	r3, [sp, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dd39      	ble.n	800bb22 <_dtoa_r+0x47a>
 800baae:	4b90      	ldr	r3, [pc, #576]	; (800bcf0 <_dtoa_r+0x648>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	f7f4 fdbf 	bl	8000638 <__aeabi_dmul>
 800baba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800babe:	9e01      	ldr	r6, [sp, #4]
 800bac0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bac4:	3501      	adds	r5, #1
 800bac6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baca:	4628      	mov	r0, r5
 800bacc:	f7f4 fd4a 	bl	8000564 <__aeabi_i2d>
 800bad0:	4642      	mov	r2, r8
 800bad2:	464b      	mov	r3, r9
 800bad4:	f7f4 fdb0 	bl	8000638 <__aeabi_dmul>
 800bad8:	4b86      	ldr	r3, [pc, #536]	; (800bcf4 <_dtoa_r+0x64c>)
 800bada:	2200      	movs	r2, #0
 800badc:	f7f4 fbf6 	bl	80002cc <__adddf3>
 800bae0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	2e00      	cmp	r6, #0
 800baec:	d158      	bne.n	800bba0 <_dtoa_r+0x4f8>
 800baee:	4b82      	ldr	r3, [pc, #520]	; (800bcf8 <_dtoa_r+0x650>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	4640      	mov	r0, r8
 800baf4:	4649      	mov	r1, r9
 800baf6:	f7f4 fbe7 	bl	80002c8 <__aeabi_dsub>
 800bafa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bafe:	4680      	mov	r8, r0
 800bb00:	4689      	mov	r9, r1
 800bb02:	f7f5 f829 	bl	8000b58 <__aeabi_dcmpgt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f040 8296 	bne.w	800c038 <_dtoa_r+0x990>
 800bb0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bb10:	4640      	mov	r0, r8
 800bb12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb16:	4649      	mov	r1, r9
 800bb18:	f7f5 f800 	bl	8000b1c <__aeabi_dcmplt>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	f040 8289 	bne.w	800c034 <_dtoa_r+0x98c>
 800bb22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bb26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f2c0 814e 	blt.w	800bdca <_dtoa_r+0x722>
 800bb2e:	f1bb 0f0e 	cmp.w	fp, #14
 800bb32:	f300 814a 	bgt.w	800bdca <_dtoa_r+0x722>
 800bb36:	4b6b      	ldr	r3, [pc, #428]	; (800bce4 <_dtoa_r+0x63c>)
 800bb38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f280 80dc 	bge.w	800bd00 <_dtoa_r+0x658>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f300 80d8 	bgt.w	800bd00 <_dtoa_r+0x658>
 800bb50:	f040 826f 	bne.w	800c032 <_dtoa_r+0x98a>
 800bb54:	4b68      	ldr	r3, [pc, #416]	; (800bcf8 <_dtoa_r+0x650>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	f7f4 fd6c 	bl	8000638 <__aeabi_dmul>
 800bb60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb64:	f7f4 ffee 	bl	8000b44 <__aeabi_dcmpge>
 800bb68:	9e04      	ldr	r6, [sp, #16]
 800bb6a:	4637      	mov	r7, r6
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	f040 8245 	bne.w	800bffc <_dtoa_r+0x954>
 800bb72:	9d00      	ldr	r5, [sp, #0]
 800bb74:	2331      	movs	r3, #49	; 0x31
 800bb76:	f805 3b01 	strb.w	r3, [r5], #1
 800bb7a:	f10b 0b01 	add.w	fp, fp, #1
 800bb7e:	e241      	b.n	800c004 <_dtoa_r+0x95c>
 800bb80:	07f2      	lsls	r2, r6, #31
 800bb82:	d505      	bpl.n	800bb90 <_dtoa_r+0x4e8>
 800bb84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb88:	f7f4 fd56 	bl	8000638 <__aeabi_dmul>
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	2301      	movs	r3, #1
 800bb90:	1076      	asrs	r6, r6, #1
 800bb92:	3708      	adds	r7, #8
 800bb94:	e773      	b.n	800ba7e <_dtoa_r+0x3d6>
 800bb96:	2502      	movs	r5, #2
 800bb98:	e775      	b.n	800ba86 <_dtoa_r+0x3de>
 800bb9a:	9e04      	ldr	r6, [sp, #16]
 800bb9c:	465f      	mov	r7, fp
 800bb9e:	e792      	b.n	800bac6 <_dtoa_r+0x41e>
 800bba0:	9900      	ldr	r1, [sp, #0]
 800bba2:	4b50      	ldr	r3, [pc, #320]	; (800bce4 <_dtoa_r+0x63c>)
 800bba4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bba8:	4431      	add	r1, r6
 800bbaa:	9102      	str	r1, [sp, #8]
 800bbac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbae:	eeb0 9a47 	vmov.f32	s18, s14
 800bbb2:	eef0 9a67 	vmov.f32	s19, s15
 800bbb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	d044      	beq.n	800bc4c <_dtoa_r+0x5a4>
 800bbc2:	494e      	ldr	r1, [pc, #312]	; (800bcfc <_dtoa_r+0x654>)
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f7f4 fe61 	bl	800088c <__aeabi_ddiv>
 800bbca:	ec53 2b19 	vmov	r2, r3, d9
 800bbce:	f7f4 fb7b 	bl	80002c8 <__aeabi_dsub>
 800bbd2:	9d00      	ldr	r5, [sp, #0]
 800bbd4:	ec41 0b19 	vmov	d9, r0, r1
 800bbd8:	4649      	mov	r1, r9
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f7f4 ffdc 	bl	8000b98 <__aeabi_d2iz>
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	f7f4 fcbf 	bl	8000564 <__aeabi_i2d>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fb6b 	bl	80002c8 <__aeabi_dsub>
 800bbf2:	3630      	adds	r6, #48	; 0x30
 800bbf4:	f805 6b01 	strb.w	r6, [r5], #1
 800bbf8:	ec53 2b19 	vmov	r2, r3, d9
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4689      	mov	r9, r1
 800bc00:	f7f4 ff8c 	bl	8000b1c <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d164      	bne.n	800bcd2 <_dtoa_r+0x62a>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4937      	ldr	r1, [pc, #220]	; (800bcec <_dtoa_r+0x644>)
 800bc0e:	2000      	movs	r0, #0
 800bc10:	f7f4 fb5a 	bl	80002c8 <__aeabi_dsub>
 800bc14:	ec53 2b19 	vmov	r2, r3, d9
 800bc18:	f7f4 ff80 	bl	8000b1c <__aeabi_dcmplt>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f040 80b6 	bne.w	800bd8e <_dtoa_r+0x6e6>
 800bc22:	9b02      	ldr	r3, [sp, #8]
 800bc24:	429d      	cmp	r5, r3
 800bc26:	f43f af7c 	beq.w	800bb22 <_dtoa_r+0x47a>
 800bc2a:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <_dtoa_r+0x648>)
 800bc2c:	ec51 0b19 	vmov	r0, r1, d9
 800bc30:	2200      	movs	r2, #0
 800bc32:	f7f4 fd01 	bl	8000638 <__aeabi_dmul>
 800bc36:	4b2e      	ldr	r3, [pc, #184]	; (800bcf0 <_dtoa_r+0x648>)
 800bc38:	ec41 0b19 	vmov	d9, r0, r1
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fcf9 	bl	8000638 <__aeabi_dmul>
 800bc46:	4680      	mov	r8, r0
 800bc48:	4689      	mov	r9, r1
 800bc4a:	e7c5      	b.n	800bbd8 <_dtoa_r+0x530>
 800bc4c:	ec51 0b17 	vmov	r0, r1, d7
 800bc50:	f7f4 fcf2 	bl	8000638 <__aeabi_dmul>
 800bc54:	9b02      	ldr	r3, [sp, #8]
 800bc56:	9d00      	ldr	r5, [sp, #0]
 800bc58:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc5a:	ec41 0b19 	vmov	d9, r0, r1
 800bc5e:	4649      	mov	r1, r9
 800bc60:	4640      	mov	r0, r8
 800bc62:	f7f4 ff99 	bl	8000b98 <__aeabi_d2iz>
 800bc66:	4606      	mov	r6, r0
 800bc68:	f7f4 fc7c 	bl	8000564 <__aeabi_i2d>
 800bc6c:	3630      	adds	r6, #48	; 0x30
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 fb27 	bl	80002c8 <__aeabi_dsub>
 800bc7a:	f805 6b01 	strb.w	r6, [r5], #1
 800bc7e:	9b02      	ldr	r3, [sp, #8]
 800bc80:	429d      	cmp	r5, r3
 800bc82:	4680      	mov	r8, r0
 800bc84:	4689      	mov	r9, r1
 800bc86:	f04f 0200 	mov.w	r2, #0
 800bc8a:	d124      	bne.n	800bcd6 <_dtoa_r+0x62e>
 800bc8c:	4b1b      	ldr	r3, [pc, #108]	; (800bcfc <_dtoa_r+0x654>)
 800bc8e:	ec51 0b19 	vmov	r0, r1, d9
 800bc92:	f7f4 fb1b 	bl	80002cc <__adddf3>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 ff5b 	bl	8000b58 <__aeabi_dcmpgt>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d173      	bne.n	800bd8e <_dtoa_r+0x6e6>
 800bca6:	ec53 2b19 	vmov	r2, r3, d9
 800bcaa:	4914      	ldr	r1, [pc, #80]	; (800bcfc <_dtoa_r+0x654>)
 800bcac:	2000      	movs	r0, #0
 800bcae:	f7f4 fb0b 	bl	80002c8 <__aeabi_dsub>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4649      	mov	r1, r9
 800bcba:	f7f4 ff2f 	bl	8000b1c <__aeabi_dcmplt>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f43f af2f 	beq.w	800bb22 <_dtoa_r+0x47a>
 800bcc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcc6:	1e6b      	subs	r3, r5, #1
 800bcc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcce:	2b30      	cmp	r3, #48	; 0x30
 800bcd0:	d0f8      	beq.n	800bcc4 <_dtoa_r+0x61c>
 800bcd2:	46bb      	mov	fp, r7
 800bcd4:	e04a      	b.n	800bd6c <_dtoa_r+0x6c4>
 800bcd6:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <_dtoa_r+0x648>)
 800bcd8:	f7f4 fcae 	bl	8000638 <__aeabi_dmul>
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	e7bd      	b.n	800bc5e <_dtoa_r+0x5b6>
 800bce2:	bf00      	nop
 800bce4:	0800e8d8 	.word	0x0800e8d8
 800bce8:	0800e8b0 	.word	0x0800e8b0
 800bcec:	3ff00000 	.word	0x3ff00000
 800bcf0:	40240000 	.word	0x40240000
 800bcf4:	401c0000 	.word	0x401c0000
 800bcf8:	40140000 	.word	0x40140000
 800bcfc:	3fe00000 	.word	0x3fe00000
 800bd00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd04:	9d00      	ldr	r5, [sp, #0]
 800bd06:	4642      	mov	r2, r8
 800bd08:	464b      	mov	r3, r9
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	f7f4 fdbd 	bl	800088c <__aeabi_ddiv>
 800bd12:	f7f4 ff41 	bl	8000b98 <__aeabi_d2iz>
 800bd16:	9001      	str	r0, [sp, #4]
 800bd18:	f7f4 fc24 	bl	8000564 <__aeabi_i2d>
 800bd1c:	4642      	mov	r2, r8
 800bd1e:	464b      	mov	r3, r9
 800bd20:	f7f4 fc8a 	bl	8000638 <__aeabi_dmul>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 facc 	bl	80002c8 <__aeabi_dsub>
 800bd30:	9e01      	ldr	r6, [sp, #4]
 800bd32:	9f04      	ldr	r7, [sp, #16]
 800bd34:	3630      	adds	r6, #48	; 0x30
 800bd36:	f805 6b01 	strb.w	r6, [r5], #1
 800bd3a:	9e00      	ldr	r6, [sp, #0]
 800bd3c:	1bae      	subs	r6, r5, r6
 800bd3e:	42b7      	cmp	r7, r6
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	d134      	bne.n	800bdb0 <_dtoa_r+0x708>
 800bd46:	f7f4 fac1 	bl	80002cc <__adddf3>
 800bd4a:	4642      	mov	r2, r8
 800bd4c:	464b      	mov	r3, r9
 800bd4e:	4606      	mov	r6, r0
 800bd50:	460f      	mov	r7, r1
 800bd52:	f7f4 ff01 	bl	8000b58 <__aeabi_dcmpgt>
 800bd56:	b9c8      	cbnz	r0, 800bd8c <_dtoa_r+0x6e4>
 800bd58:	4642      	mov	r2, r8
 800bd5a:	464b      	mov	r3, r9
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f7f4 fed2 	bl	8000b08 <__aeabi_dcmpeq>
 800bd64:	b110      	cbz	r0, 800bd6c <_dtoa_r+0x6c4>
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	07db      	lsls	r3, r3, #31
 800bd6a:	d40f      	bmi.n	800bd8c <_dtoa_r+0x6e4>
 800bd6c:	4651      	mov	r1, sl
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fbde 	bl	800c530 <_Bfree>
 800bd74:	2300      	movs	r3, #0
 800bd76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd78:	702b      	strb	r3, [r5, #0]
 800bd7a:	f10b 0301 	add.w	r3, fp, #1
 800bd7e:	6013      	str	r3, [r2, #0]
 800bd80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f43f ace2 	beq.w	800b74c <_dtoa_r+0xa4>
 800bd88:	601d      	str	r5, [r3, #0]
 800bd8a:	e4df      	b.n	800b74c <_dtoa_r+0xa4>
 800bd8c:	465f      	mov	r7, fp
 800bd8e:	462b      	mov	r3, r5
 800bd90:	461d      	mov	r5, r3
 800bd92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd96:	2a39      	cmp	r2, #57	; 0x39
 800bd98:	d106      	bne.n	800bda8 <_dtoa_r+0x700>
 800bd9a:	9a00      	ldr	r2, [sp, #0]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d1f7      	bne.n	800bd90 <_dtoa_r+0x6e8>
 800bda0:	9900      	ldr	r1, [sp, #0]
 800bda2:	2230      	movs	r2, #48	; 0x30
 800bda4:	3701      	adds	r7, #1
 800bda6:	700a      	strb	r2, [r1, #0]
 800bda8:	781a      	ldrb	r2, [r3, #0]
 800bdaa:	3201      	adds	r2, #1
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	e790      	b.n	800bcd2 <_dtoa_r+0x62a>
 800bdb0:	4ba3      	ldr	r3, [pc, #652]	; (800c040 <_dtoa_r+0x998>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f7f4 fc40 	bl	8000638 <__aeabi_dmul>
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460f      	mov	r7, r1
 800bdc0:	f7f4 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d09e      	beq.n	800bd06 <_dtoa_r+0x65e>
 800bdc8:	e7d0      	b.n	800bd6c <_dtoa_r+0x6c4>
 800bdca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	f000 80ca 	beq.w	800bf66 <_dtoa_r+0x8be>
 800bdd2:	9a07      	ldr	r2, [sp, #28]
 800bdd4:	2a01      	cmp	r2, #1
 800bdd6:	f300 80ad 	bgt.w	800bf34 <_dtoa_r+0x88c>
 800bdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bddc:	2a00      	cmp	r2, #0
 800bdde:	f000 80a5 	beq.w	800bf2c <_dtoa_r+0x884>
 800bde2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bde6:	9e08      	ldr	r6, [sp, #32]
 800bde8:	9d05      	ldr	r5, [sp, #20]
 800bdea:	9a05      	ldr	r2, [sp, #20]
 800bdec:	441a      	add	r2, r3
 800bdee:	9205      	str	r2, [sp, #20]
 800bdf0:	9a06      	ldr	r2, [sp, #24]
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	441a      	add	r2, r3
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	9206      	str	r2, [sp, #24]
 800bdfa:	f000 fc4f 	bl	800c69c <__i2b>
 800bdfe:	4607      	mov	r7, r0
 800be00:	b165      	cbz	r5, 800be1c <_dtoa_r+0x774>
 800be02:	9b06      	ldr	r3, [sp, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd09      	ble.n	800be1c <_dtoa_r+0x774>
 800be08:	42ab      	cmp	r3, r5
 800be0a:	9a05      	ldr	r2, [sp, #20]
 800be0c:	bfa8      	it	ge
 800be0e:	462b      	movge	r3, r5
 800be10:	1ad2      	subs	r2, r2, r3
 800be12:	9205      	str	r2, [sp, #20]
 800be14:	9a06      	ldr	r2, [sp, #24]
 800be16:	1aed      	subs	r5, r5, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	9306      	str	r3, [sp, #24]
 800be1c:	9b08      	ldr	r3, [sp, #32]
 800be1e:	b1f3      	cbz	r3, 800be5e <_dtoa_r+0x7b6>
 800be20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80a3 	beq.w	800bf6e <_dtoa_r+0x8c6>
 800be28:	2e00      	cmp	r6, #0
 800be2a:	dd10      	ble.n	800be4e <_dtoa_r+0x7a6>
 800be2c:	4639      	mov	r1, r7
 800be2e:	4632      	mov	r2, r6
 800be30:	4620      	mov	r0, r4
 800be32:	f000 fcf3 	bl	800c81c <__pow5mult>
 800be36:	4652      	mov	r2, sl
 800be38:	4601      	mov	r1, r0
 800be3a:	4607      	mov	r7, r0
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fc43 	bl	800c6c8 <__multiply>
 800be42:	4651      	mov	r1, sl
 800be44:	4680      	mov	r8, r0
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fb72 	bl	800c530 <_Bfree>
 800be4c:	46c2      	mov	sl, r8
 800be4e:	9b08      	ldr	r3, [sp, #32]
 800be50:	1b9a      	subs	r2, r3, r6
 800be52:	d004      	beq.n	800be5e <_dtoa_r+0x7b6>
 800be54:	4651      	mov	r1, sl
 800be56:	4620      	mov	r0, r4
 800be58:	f000 fce0 	bl	800c81c <__pow5mult>
 800be5c:	4682      	mov	sl, r0
 800be5e:	2101      	movs	r1, #1
 800be60:	4620      	mov	r0, r4
 800be62:	f000 fc1b 	bl	800c69c <__i2b>
 800be66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be68:	2b00      	cmp	r3, #0
 800be6a:	4606      	mov	r6, r0
 800be6c:	f340 8081 	ble.w	800bf72 <_dtoa_r+0x8ca>
 800be70:	461a      	mov	r2, r3
 800be72:	4601      	mov	r1, r0
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fcd1 	bl	800c81c <__pow5mult>
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	4606      	mov	r6, r0
 800be80:	dd7a      	ble.n	800bf78 <_dtoa_r+0x8d0>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	6933      	ldr	r3, [r6, #16]
 800be88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be8c:	6918      	ldr	r0, [r3, #16]
 800be8e:	f000 fbb7 	bl	800c600 <__hi0bits>
 800be92:	f1c0 0020 	rsb	r0, r0, #32
 800be96:	9b06      	ldr	r3, [sp, #24]
 800be98:	4418      	add	r0, r3
 800be9a:	f010 001f 	ands.w	r0, r0, #31
 800be9e:	f000 8094 	beq.w	800bfca <_dtoa_r+0x922>
 800bea2:	f1c0 0320 	rsb	r3, r0, #32
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	f340 8085 	ble.w	800bfb6 <_dtoa_r+0x90e>
 800beac:	9b05      	ldr	r3, [sp, #20]
 800beae:	f1c0 001c 	rsb	r0, r0, #28
 800beb2:	4403      	add	r3, r0
 800beb4:	9305      	str	r3, [sp, #20]
 800beb6:	9b06      	ldr	r3, [sp, #24]
 800beb8:	4403      	add	r3, r0
 800beba:	4405      	add	r5, r0
 800bebc:	9306      	str	r3, [sp, #24]
 800bebe:	9b05      	ldr	r3, [sp, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	dd05      	ble.n	800bed0 <_dtoa_r+0x828>
 800bec4:	4651      	mov	r1, sl
 800bec6:	461a      	mov	r2, r3
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 fd01 	bl	800c8d0 <__lshift>
 800bece:	4682      	mov	sl, r0
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd05      	ble.n	800bee2 <_dtoa_r+0x83a>
 800bed6:	4631      	mov	r1, r6
 800bed8:	461a      	mov	r2, r3
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fcf8 	bl	800c8d0 <__lshift>
 800bee0:	4606      	mov	r6, r0
 800bee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d072      	beq.n	800bfce <_dtoa_r+0x926>
 800bee8:	4631      	mov	r1, r6
 800beea:	4650      	mov	r0, sl
 800beec:	f000 fd5c 	bl	800c9a8 <__mcmp>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	da6c      	bge.n	800bfce <_dtoa_r+0x926>
 800bef4:	2300      	movs	r3, #0
 800bef6:	4651      	mov	r1, sl
 800bef8:	220a      	movs	r2, #10
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fb3a 	bl	800c574 <__multadd>
 800bf00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf06:	4682      	mov	sl, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 81b0 	beq.w	800c26e <_dtoa_r+0xbc6>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4639      	mov	r1, r7
 800bf12:	220a      	movs	r2, #10
 800bf14:	4620      	mov	r0, r4
 800bf16:	f000 fb2d 	bl	800c574 <__multadd>
 800bf1a:	9b01      	ldr	r3, [sp, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	4607      	mov	r7, r0
 800bf20:	f300 8096 	bgt.w	800c050 <_dtoa_r+0x9a8>
 800bf24:	9b07      	ldr	r3, [sp, #28]
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	dc59      	bgt.n	800bfde <_dtoa_r+0x936>
 800bf2a:	e091      	b.n	800c050 <_dtoa_r+0x9a8>
 800bf2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf32:	e758      	b.n	800bde6 <_dtoa_r+0x73e>
 800bf34:	9b04      	ldr	r3, [sp, #16]
 800bf36:	1e5e      	subs	r6, r3, #1
 800bf38:	9b08      	ldr	r3, [sp, #32]
 800bf3a:	42b3      	cmp	r3, r6
 800bf3c:	bfbf      	itttt	lt
 800bf3e:	9b08      	ldrlt	r3, [sp, #32]
 800bf40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bf42:	9608      	strlt	r6, [sp, #32]
 800bf44:	1af3      	sublt	r3, r6, r3
 800bf46:	bfb4      	ite	lt
 800bf48:	18d2      	addlt	r2, r2, r3
 800bf4a:	1b9e      	subge	r6, r3, r6
 800bf4c:	9b04      	ldr	r3, [sp, #16]
 800bf4e:	bfbc      	itt	lt
 800bf50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bf52:	2600      	movlt	r6, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfb7      	itett	lt
 800bf58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bf5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bf60:	1a9d      	sublt	r5, r3, r2
 800bf62:	2300      	movlt	r3, #0
 800bf64:	e741      	b.n	800bdea <_dtoa_r+0x742>
 800bf66:	9e08      	ldr	r6, [sp, #32]
 800bf68:	9d05      	ldr	r5, [sp, #20]
 800bf6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf6c:	e748      	b.n	800be00 <_dtoa_r+0x758>
 800bf6e:	9a08      	ldr	r2, [sp, #32]
 800bf70:	e770      	b.n	800be54 <_dtoa_r+0x7ac>
 800bf72:	9b07      	ldr	r3, [sp, #28]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	dc19      	bgt.n	800bfac <_dtoa_r+0x904>
 800bf78:	9b02      	ldr	r3, [sp, #8]
 800bf7a:	b9bb      	cbnz	r3, 800bfac <_dtoa_r+0x904>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf82:	b99b      	cbnz	r3, 800bfac <_dtoa_r+0x904>
 800bf84:	9b03      	ldr	r3, [sp, #12]
 800bf86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf8a:	0d1b      	lsrs	r3, r3, #20
 800bf8c:	051b      	lsls	r3, r3, #20
 800bf8e:	b183      	cbz	r3, 800bfb2 <_dtoa_r+0x90a>
 800bf90:	9b05      	ldr	r3, [sp, #20]
 800bf92:	3301      	adds	r3, #1
 800bf94:	9305      	str	r3, [sp, #20]
 800bf96:	9b06      	ldr	r3, [sp, #24]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	9306      	str	r3, [sp, #24]
 800bf9c:	f04f 0801 	mov.w	r8, #1
 800bfa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f47f af6f 	bne.w	800be86 <_dtoa_r+0x7de>
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	e774      	b.n	800be96 <_dtoa_r+0x7ee>
 800bfac:	f04f 0800 	mov.w	r8, #0
 800bfb0:	e7f6      	b.n	800bfa0 <_dtoa_r+0x8f8>
 800bfb2:	4698      	mov	r8, r3
 800bfb4:	e7f4      	b.n	800bfa0 <_dtoa_r+0x8f8>
 800bfb6:	d082      	beq.n	800bebe <_dtoa_r+0x816>
 800bfb8:	9a05      	ldr	r2, [sp, #20]
 800bfba:	331c      	adds	r3, #28
 800bfbc:	441a      	add	r2, r3
 800bfbe:	9205      	str	r2, [sp, #20]
 800bfc0:	9a06      	ldr	r2, [sp, #24]
 800bfc2:	441a      	add	r2, r3
 800bfc4:	441d      	add	r5, r3
 800bfc6:	9206      	str	r2, [sp, #24]
 800bfc8:	e779      	b.n	800bebe <_dtoa_r+0x816>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	e7f4      	b.n	800bfb8 <_dtoa_r+0x910>
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dc37      	bgt.n	800c044 <_dtoa_r+0x99c>
 800bfd4:	9b07      	ldr	r3, [sp, #28]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	dd34      	ble.n	800c044 <_dtoa_r+0x99c>
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	b963      	cbnz	r3, 800bffc <_dtoa_r+0x954>
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	2205      	movs	r2, #5
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 fac4 	bl	800c574 <__multadd>
 800bfec:	4601      	mov	r1, r0
 800bfee:	4606      	mov	r6, r0
 800bff0:	4650      	mov	r0, sl
 800bff2:	f000 fcd9 	bl	800c9a8 <__mcmp>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f73f adbb 	bgt.w	800bb72 <_dtoa_r+0x4ca>
 800bffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bffe:	9d00      	ldr	r5, [sp, #0]
 800c000:	ea6f 0b03 	mvn.w	fp, r3
 800c004:	f04f 0800 	mov.w	r8, #0
 800c008:	4631      	mov	r1, r6
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fa90 	bl	800c530 <_Bfree>
 800c010:	2f00      	cmp	r7, #0
 800c012:	f43f aeab 	beq.w	800bd6c <_dtoa_r+0x6c4>
 800c016:	f1b8 0f00 	cmp.w	r8, #0
 800c01a:	d005      	beq.n	800c028 <_dtoa_r+0x980>
 800c01c:	45b8      	cmp	r8, r7
 800c01e:	d003      	beq.n	800c028 <_dtoa_r+0x980>
 800c020:	4641      	mov	r1, r8
 800c022:	4620      	mov	r0, r4
 800c024:	f000 fa84 	bl	800c530 <_Bfree>
 800c028:	4639      	mov	r1, r7
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 fa80 	bl	800c530 <_Bfree>
 800c030:	e69c      	b.n	800bd6c <_dtoa_r+0x6c4>
 800c032:	2600      	movs	r6, #0
 800c034:	4637      	mov	r7, r6
 800c036:	e7e1      	b.n	800bffc <_dtoa_r+0x954>
 800c038:	46bb      	mov	fp, r7
 800c03a:	4637      	mov	r7, r6
 800c03c:	e599      	b.n	800bb72 <_dtoa_r+0x4ca>
 800c03e:	bf00      	nop
 800c040:	40240000 	.word	0x40240000
 800c044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 80c8 	beq.w	800c1dc <_dtoa_r+0xb34>
 800c04c:	9b04      	ldr	r3, [sp, #16]
 800c04e:	9301      	str	r3, [sp, #4]
 800c050:	2d00      	cmp	r5, #0
 800c052:	dd05      	ble.n	800c060 <_dtoa_r+0x9b8>
 800c054:	4639      	mov	r1, r7
 800c056:	462a      	mov	r2, r5
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 fc39 	bl	800c8d0 <__lshift>
 800c05e:	4607      	mov	r7, r0
 800c060:	f1b8 0f00 	cmp.w	r8, #0
 800c064:	d05b      	beq.n	800c11e <_dtoa_r+0xa76>
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fa21 	bl	800c4b0 <_Balloc>
 800c06e:	4605      	mov	r5, r0
 800c070:	b928      	cbnz	r0, 800c07e <_dtoa_r+0x9d6>
 800c072:	4b83      	ldr	r3, [pc, #524]	; (800c280 <_dtoa_r+0xbd8>)
 800c074:	4602      	mov	r2, r0
 800c076:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c07a:	f7ff bb2e 	b.w	800b6da <_dtoa_r+0x32>
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	3202      	adds	r2, #2
 800c082:	0092      	lsls	r2, r2, #2
 800c084:	f107 010c 	add.w	r1, r7, #12
 800c088:	300c      	adds	r0, #12
 800c08a:	f7ff fa74 	bl	800b576 <memcpy>
 800c08e:	2201      	movs	r2, #1
 800c090:	4629      	mov	r1, r5
 800c092:	4620      	mov	r0, r4
 800c094:	f000 fc1c 	bl	800c8d0 <__lshift>
 800c098:	9b00      	ldr	r3, [sp, #0]
 800c09a:	3301      	adds	r3, #1
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	9308      	str	r3, [sp, #32]
 800c0a6:	9b02      	ldr	r3, [sp, #8]
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	46b8      	mov	r8, r7
 800c0ae:	9306      	str	r3, [sp, #24]
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	9b04      	ldr	r3, [sp, #16]
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	4650      	mov	r0, sl
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	f7ff fa69 	bl	800b592 <quorem>
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	9002      	str	r0, [sp, #8]
 800c0c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0c8:	4650      	mov	r0, sl
 800c0ca:	f000 fc6d 	bl	800c9a8 <__mcmp>
 800c0ce:	463a      	mov	r2, r7
 800c0d0:	9005      	str	r0, [sp, #20]
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 fc83 	bl	800c9e0 <__mdiff>
 800c0da:	68c2      	ldr	r2, [r0, #12]
 800c0dc:	4605      	mov	r5, r0
 800c0de:	bb02      	cbnz	r2, 800c122 <_dtoa_r+0xa7a>
 800c0e0:	4601      	mov	r1, r0
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	f000 fc60 	bl	800c9a8 <__mcmp>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	9209      	str	r2, [sp, #36]	; 0x24
 800c0f0:	f000 fa1e 	bl	800c530 <_Bfree>
 800c0f4:	9b07      	ldr	r3, [sp, #28]
 800c0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0f8:	9d04      	ldr	r5, [sp, #16]
 800c0fa:	ea43 0102 	orr.w	r1, r3, r2
 800c0fe:	9b06      	ldr	r3, [sp, #24]
 800c100:	4319      	orrs	r1, r3
 800c102:	d110      	bne.n	800c126 <_dtoa_r+0xa7e>
 800c104:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c108:	d029      	beq.n	800c15e <_dtoa_r+0xab6>
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dd02      	ble.n	800c116 <_dtoa_r+0xa6e>
 800c110:	9b02      	ldr	r3, [sp, #8]
 800c112:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	f883 9000 	strb.w	r9, [r3]
 800c11c:	e774      	b.n	800c008 <_dtoa_r+0x960>
 800c11e:	4638      	mov	r0, r7
 800c120:	e7ba      	b.n	800c098 <_dtoa_r+0x9f0>
 800c122:	2201      	movs	r2, #1
 800c124:	e7e1      	b.n	800c0ea <_dtoa_r+0xa42>
 800c126:	9b05      	ldr	r3, [sp, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	db04      	blt.n	800c136 <_dtoa_r+0xa8e>
 800c12c:	9907      	ldr	r1, [sp, #28]
 800c12e:	430b      	orrs	r3, r1
 800c130:	9906      	ldr	r1, [sp, #24]
 800c132:	430b      	orrs	r3, r1
 800c134:	d120      	bne.n	800c178 <_dtoa_r+0xad0>
 800c136:	2a00      	cmp	r2, #0
 800c138:	dded      	ble.n	800c116 <_dtoa_r+0xa6e>
 800c13a:	4651      	mov	r1, sl
 800c13c:	2201      	movs	r2, #1
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 fbc6 	bl	800c8d0 <__lshift>
 800c144:	4631      	mov	r1, r6
 800c146:	4682      	mov	sl, r0
 800c148:	f000 fc2e 	bl	800c9a8 <__mcmp>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	dc03      	bgt.n	800c158 <_dtoa_r+0xab0>
 800c150:	d1e1      	bne.n	800c116 <_dtoa_r+0xa6e>
 800c152:	f019 0f01 	tst.w	r9, #1
 800c156:	d0de      	beq.n	800c116 <_dtoa_r+0xa6e>
 800c158:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c15c:	d1d8      	bne.n	800c110 <_dtoa_r+0xa68>
 800c15e:	9a01      	ldr	r2, [sp, #4]
 800c160:	2339      	movs	r3, #57	; 0x39
 800c162:	7013      	strb	r3, [r2, #0]
 800c164:	462b      	mov	r3, r5
 800c166:	461d      	mov	r5, r3
 800c168:	3b01      	subs	r3, #1
 800c16a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c16e:	2a39      	cmp	r2, #57	; 0x39
 800c170:	d06c      	beq.n	800c24c <_dtoa_r+0xba4>
 800c172:	3201      	adds	r2, #1
 800c174:	701a      	strb	r2, [r3, #0]
 800c176:	e747      	b.n	800c008 <_dtoa_r+0x960>
 800c178:	2a00      	cmp	r2, #0
 800c17a:	dd07      	ble.n	800c18c <_dtoa_r+0xae4>
 800c17c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c180:	d0ed      	beq.n	800c15e <_dtoa_r+0xab6>
 800c182:	9a01      	ldr	r2, [sp, #4]
 800c184:	f109 0301 	add.w	r3, r9, #1
 800c188:	7013      	strb	r3, [r2, #0]
 800c18a:	e73d      	b.n	800c008 <_dtoa_r+0x960>
 800c18c:	9b04      	ldr	r3, [sp, #16]
 800c18e:	9a08      	ldr	r2, [sp, #32]
 800c190:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c194:	4293      	cmp	r3, r2
 800c196:	d043      	beq.n	800c220 <_dtoa_r+0xb78>
 800c198:	4651      	mov	r1, sl
 800c19a:	2300      	movs	r3, #0
 800c19c:	220a      	movs	r2, #10
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 f9e8 	bl	800c574 <__multadd>
 800c1a4:	45b8      	cmp	r8, r7
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	f04f 0300 	mov.w	r3, #0
 800c1ac:	f04f 020a 	mov.w	r2, #10
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	d107      	bne.n	800c1c6 <_dtoa_r+0xb1e>
 800c1b6:	f000 f9dd 	bl	800c574 <__multadd>
 800c1ba:	4680      	mov	r8, r0
 800c1bc:	4607      	mov	r7, r0
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	e775      	b.n	800c0b2 <_dtoa_r+0xa0a>
 800c1c6:	f000 f9d5 	bl	800c574 <__multadd>
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	4680      	mov	r8, r0
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	220a      	movs	r2, #10
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f000 f9ce 	bl	800c574 <__multadd>
 800c1d8:	4607      	mov	r7, r0
 800c1da:	e7f0      	b.n	800c1be <_dtoa_r+0xb16>
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	9d00      	ldr	r5, [sp, #0]
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4650      	mov	r0, sl
 800c1e6:	f7ff f9d4 	bl	800b592 <quorem>
 800c1ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c1ee:	9b00      	ldr	r3, [sp, #0]
 800c1f0:	f805 9b01 	strb.w	r9, [r5], #1
 800c1f4:	1aea      	subs	r2, r5, r3
 800c1f6:	9b01      	ldr	r3, [sp, #4]
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	dd07      	ble.n	800c20c <_dtoa_r+0xb64>
 800c1fc:	4651      	mov	r1, sl
 800c1fe:	2300      	movs	r3, #0
 800c200:	220a      	movs	r2, #10
 800c202:	4620      	mov	r0, r4
 800c204:	f000 f9b6 	bl	800c574 <__multadd>
 800c208:	4682      	mov	sl, r0
 800c20a:	e7ea      	b.n	800c1e2 <_dtoa_r+0xb3a>
 800c20c:	9b01      	ldr	r3, [sp, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfc8      	it	gt
 800c212:	461d      	movgt	r5, r3
 800c214:	9b00      	ldr	r3, [sp, #0]
 800c216:	bfd8      	it	le
 800c218:	2501      	movle	r5, #1
 800c21a:	441d      	add	r5, r3
 800c21c:	f04f 0800 	mov.w	r8, #0
 800c220:	4651      	mov	r1, sl
 800c222:	2201      	movs	r2, #1
 800c224:	4620      	mov	r0, r4
 800c226:	f000 fb53 	bl	800c8d0 <__lshift>
 800c22a:	4631      	mov	r1, r6
 800c22c:	4682      	mov	sl, r0
 800c22e:	f000 fbbb 	bl	800c9a8 <__mcmp>
 800c232:	2800      	cmp	r0, #0
 800c234:	dc96      	bgt.n	800c164 <_dtoa_r+0xabc>
 800c236:	d102      	bne.n	800c23e <_dtoa_r+0xb96>
 800c238:	f019 0f01 	tst.w	r9, #1
 800c23c:	d192      	bne.n	800c164 <_dtoa_r+0xabc>
 800c23e:	462b      	mov	r3, r5
 800c240:	461d      	mov	r5, r3
 800c242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c246:	2a30      	cmp	r2, #48	; 0x30
 800c248:	d0fa      	beq.n	800c240 <_dtoa_r+0xb98>
 800c24a:	e6dd      	b.n	800c008 <_dtoa_r+0x960>
 800c24c:	9a00      	ldr	r2, [sp, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d189      	bne.n	800c166 <_dtoa_r+0xabe>
 800c252:	f10b 0b01 	add.w	fp, fp, #1
 800c256:	2331      	movs	r3, #49	; 0x31
 800c258:	e796      	b.n	800c188 <_dtoa_r+0xae0>
 800c25a:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <_dtoa_r+0xbdc>)
 800c25c:	f7ff ba99 	b.w	800b792 <_dtoa_r+0xea>
 800c260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c262:	2b00      	cmp	r3, #0
 800c264:	f47f aa6d 	bne.w	800b742 <_dtoa_r+0x9a>
 800c268:	4b07      	ldr	r3, [pc, #28]	; (800c288 <_dtoa_r+0xbe0>)
 800c26a:	f7ff ba92 	b.w	800b792 <_dtoa_r+0xea>
 800c26e:	9b01      	ldr	r3, [sp, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	dcb5      	bgt.n	800c1e0 <_dtoa_r+0xb38>
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	2b02      	cmp	r3, #2
 800c278:	f73f aeb1 	bgt.w	800bfde <_dtoa_r+0x936>
 800c27c:	e7b0      	b.n	800c1e0 <_dtoa_r+0xb38>
 800c27e:	bf00      	nop
 800c280:	0800e843 	.word	0x0800e843
 800c284:	0800e799 	.word	0x0800e799
 800c288:	0800e7c7 	.word	0x0800e7c7

0800c28c <_free_r>:
 800c28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c28e:	2900      	cmp	r1, #0
 800c290:	d044      	beq.n	800c31c <_free_r+0x90>
 800c292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c296:	9001      	str	r0, [sp, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f1a1 0404 	sub.w	r4, r1, #4
 800c29e:	bfb8      	it	lt
 800c2a0:	18e4      	addlt	r4, r4, r3
 800c2a2:	f000 f8f9 	bl	800c498 <__malloc_lock>
 800c2a6:	4a1e      	ldr	r2, [pc, #120]	; (800c320 <_free_r+0x94>)
 800c2a8:	9801      	ldr	r0, [sp, #4]
 800c2aa:	6813      	ldr	r3, [r2, #0]
 800c2ac:	b933      	cbnz	r3, 800c2bc <_free_r+0x30>
 800c2ae:	6063      	str	r3, [r4, #4]
 800c2b0:	6014      	str	r4, [r2, #0]
 800c2b2:	b003      	add	sp, #12
 800c2b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2b8:	f000 b8f4 	b.w	800c4a4 <__malloc_unlock>
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	d908      	bls.n	800c2d2 <_free_r+0x46>
 800c2c0:	6825      	ldr	r5, [r4, #0]
 800c2c2:	1961      	adds	r1, r4, r5
 800c2c4:	428b      	cmp	r3, r1
 800c2c6:	bf01      	itttt	eq
 800c2c8:	6819      	ldreq	r1, [r3, #0]
 800c2ca:	685b      	ldreq	r3, [r3, #4]
 800c2cc:	1949      	addeq	r1, r1, r5
 800c2ce:	6021      	streq	r1, [r4, #0]
 800c2d0:	e7ed      	b.n	800c2ae <_free_r+0x22>
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	b10b      	cbz	r3, 800c2dc <_free_r+0x50>
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	d9fa      	bls.n	800c2d2 <_free_r+0x46>
 800c2dc:	6811      	ldr	r1, [r2, #0]
 800c2de:	1855      	adds	r5, r2, r1
 800c2e0:	42a5      	cmp	r5, r4
 800c2e2:	d10b      	bne.n	800c2fc <_free_r+0x70>
 800c2e4:	6824      	ldr	r4, [r4, #0]
 800c2e6:	4421      	add	r1, r4
 800c2e8:	1854      	adds	r4, r2, r1
 800c2ea:	42a3      	cmp	r3, r4
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	d1e0      	bne.n	800c2b2 <_free_r+0x26>
 800c2f0:	681c      	ldr	r4, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	6053      	str	r3, [r2, #4]
 800c2f6:	440c      	add	r4, r1
 800c2f8:	6014      	str	r4, [r2, #0]
 800c2fa:	e7da      	b.n	800c2b2 <_free_r+0x26>
 800c2fc:	d902      	bls.n	800c304 <_free_r+0x78>
 800c2fe:	230c      	movs	r3, #12
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	e7d6      	b.n	800c2b2 <_free_r+0x26>
 800c304:	6825      	ldr	r5, [r4, #0]
 800c306:	1961      	adds	r1, r4, r5
 800c308:	428b      	cmp	r3, r1
 800c30a:	bf04      	itt	eq
 800c30c:	6819      	ldreq	r1, [r3, #0]
 800c30e:	685b      	ldreq	r3, [r3, #4]
 800c310:	6063      	str	r3, [r4, #4]
 800c312:	bf04      	itt	eq
 800c314:	1949      	addeq	r1, r1, r5
 800c316:	6021      	streq	r1, [r4, #0]
 800c318:	6054      	str	r4, [r2, #4]
 800c31a:	e7ca      	b.n	800c2b2 <_free_r+0x26>
 800c31c:	b003      	add	sp, #12
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	20005324 	.word	0x20005324

0800c324 <malloc>:
 800c324:	4b02      	ldr	r3, [pc, #8]	; (800c330 <malloc+0xc>)
 800c326:	4601      	mov	r1, r0
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	f000 b823 	b.w	800c374 <_malloc_r>
 800c32e:	bf00      	nop
 800c330:	200001dc 	.word	0x200001dc

0800c334 <sbrk_aligned>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	4e0e      	ldr	r6, [pc, #56]	; (800c370 <sbrk_aligned+0x3c>)
 800c338:	460c      	mov	r4, r1
 800c33a:	6831      	ldr	r1, [r6, #0]
 800c33c:	4605      	mov	r5, r0
 800c33e:	b911      	cbnz	r1, 800c346 <sbrk_aligned+0x12>
 800c340:	f000 fe60 	bl	800d004 <_sbrk_r>
 800c344:	6030      	str	r0, [r6, #0]
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f000 fe5b 	bl	800d004 <_sbrk_r>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d00a      	beq.n	800c368 <sbrk_aligned+0x34>
 800c352:	1cc4      	adds	r4, r0, #3
 800c354:	f024 0403 	bic.w	r4, r4, #3
 800c358:	42a0      	cmp	r0, r4
 800c35a:	d007      	beq.n	800c36c <sbrk_aligned+0x38>
 800c35c:	1a21      	subs	r1, r4, r0
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 fe50 	bl	800d004 <_sbrk_r>
 800c364:	3001      	adds	r0, #1
 800c366:	d101      	bne.n	800c36c <sbrk_aligned+0x38>
 800c368:	f04f 34ff 	mov.w	r4, #4294967295
 800c36c:	4620      	mov	r0, r4
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	20005328 	.word	0x20005328

0800c374 <_malloc_r>:
 800c374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c378:	1ccd      	adds	r5, r1, #3
 800c37a:	f025 0503 	bic.w	r5, r5, #3
 800c37e:	3508      	adds	r5, #8
 800c380:	2d0c      	cmp	r5, #12
 800c382:	bf38      	it	cc
 800c384:	250c      	movcc	r5, #12
 800c386:	2d00      	cmp	r5, #0
 800c388:	4607      	mov	r7, r0
 800c38a:	db01      	blt.n	800c390 <_malloc_r+0x1c>
 800c38c:	42a9      	cmp	r1, r5
 800c38e:	d905      	bls.n	800c39c <_malloc_r+0x28>
 800c390:	230c      	movs	r3, #12
 800c392:	603b      	str	r3, [r7, #0]
 800c394:	2600      	movs	r6, #0
 800c396:	4630      	mov	r0, r6
 800c398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c470 <_malloc_r+0xfc>
 800c3a0:	f000 f87a 	bl	800c498 <__malloc_lock>
 800c3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3a8:	461c      	mov	r4, r3
 800c3aa:	bb5c      	cbnz	r4, 800c404 <_malloc_r+0x90>
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	f7ff ffc0 	bl	800c334 <sbrk_aligned>
 800c3b4:	1c43      	adds	r3, r0, #1
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	d155      	bne.n	800c466 <_malloc_r+0xf2>
 800c3ba:	f8d8 4000 	ldr.w	r4, [r8]
 800c3be:	4626      	mov	r6, r4
 800c3c0:	2e00      	cmp	r6, #0
 800c3c2:	d145      	bne.n	800c450 <_malloc_r+0xdc>
 800c3c4:	2c00      	cmp	r4, #0
 800c3c6:	d048      	beq.n	800c45a <_malloc_r+0xe6>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	eb04 0903 	add.w	r9, r4, r3
 800c3d2:	f000 fe17 	bl	800d004 <_sbrk_r>
 800c3d6:	4581      	cmp	r9, r0
 800c3d8:	d13f      	bne.n	800c45a <_malloc_r+0xe6>
 800c3da:	6821      	ldr	r1, [r4, #0]
 800c3dc:	1a6d      	subs	r5, r5, r1
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7ff ffa7 	bl	800c334 <sbrk_aligned>
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d037      	beq.n	800c45a <_malloc_r+0xe6>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	442b      	add	r3, r5
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d038      	beq.n	800c46a <_malloc_r+0xf6>
 800c3f8:	685a      	ldr	r2, [r3, #4]
 800c3fa:	42a2      	cmp	r2, r4
 800c3fc:	d12b      	bne.n	800c456 <_malloc_r+0xe2>
 800c3fe:	2200      	movs	r2, #0
 800c400:	605a      	str	r2, [r3, #4]
 800c402:	e00f      	b.n	800c424 <_malloc_r+0xb0>
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	1b52      	subs	r2, r2, r5
 800c408:	d41f      	bmi.n	800c44a <_malloc_r+0xd6>
 800c40a:	2a0b      	cmp	r2, #11
 800c40c:	d917      	bls.n	800c43e <_malloc_r+0xca>
 800c40e:	1961      	adds	r1, r4, r5
 800c410:	42a3      	cmp	r3, r4
 800c412:	6025      	str	r5, [r4, #0]
 800c414:	bf18      	it	ne
 800c416:	6059      	strne	r1, [r3, #4]
 800c418:	6863      	ldr	r3, [r4, #4]
 800c41a:	bf08      	it	eq
 800c41c:	f8c8 1000 	streq.w	r1, [r8]
 800c420:	5162      	str	r2, [r4, r5]
 800c422:	604b      	str	r3, [r1, #4]
 800c424:	4638      	mov	r0, r7
 800c426:	f104 060b 	add.w	r6, r4, #11
 800c42a:	f000 f83b 	bl	800c4a4 <__malloc_unlock>
 800c42e:	f026 0607 	bic.w	r6, r6, #7
 800c432:	1d23      	adds	r3, r4, #4
 800c434:	1af2      	subs	r2, r6, r3
 800c436:	d0ae      	beq.n	800c396 <_malloc_r+0x22>
 800c438:	1b9b      	subs	r3, r3, r6
 800c43a:	50a3      	str	r3, [r4, r2]
 800c43c:	e7ab      	b.n	800c396 <_malloc_r+0x22>
 800c43e:	42a3      	cmp	r3, r4
 800c440:	6862      	ldr	r2, [r4, #4]
 800c442:	d1dd      	bne.n	800c400 <_malloc_r+0x8c>
 800c444:	f8c8 2000 	str.w	r2, [r8]
 800c448:	e7ec      	b.n	800c424 <_malloc_r+0xb0>
 800c44a:	4623      	mov	r3, r4
 800c44c:	6864      	ldr	r4, [r4, #4]
 800c44e:	e7ac      	b.n	800c3aa <_malloc_r+0x36>
 800c450:	4634      	mov	r4, r6
 800c452:	6876      	ldr	r6, [r6, #4]
 800c454:	e7b4      	b.n	800c3c0 <_malloc_r+0x4c>
 800c456:	4613      	mov	r3, r2
 800c458:	e7cc      	b.n	800c3f4 <_malloc_r+0x80>
 800c45a:	230c      	movs	r3, #12
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	4638      	mov	r0, r7
 800c460:	f000 f820 	bl	800c4a4 <__malloc_unlock>
 800c464:	e797      	b.n	800c396 <_malloc_r+0x22>
 800c466:	6025      	str	r5, [r4, #0]
 800c468:	e7dc      	b.n	800c424 <_malloc_r+0xb0>
 800c46a:	605b      	str	r3, [r3, #4]
 800c46c:	deff      	udf	#255	; 0xff
 800c46e:	bf00      	nop
 800c470:	20005324 	.word	0x20005324

0800c474 <__ascii_mbtowc>:
 800c474:	b082      	sub	sp, #8
 800c476:	b901      	cbnz	r1, 800c47a <__ascii_mbtowc+0x6>
 800c478:	a901      	add	r1, sp, #4
 800c47a:	b142      	cbz	r2, 800c48e <__ascii_mbtowc+0x1a>
 800c47c:	b14b      	cbz	r3, 800c492 <__ascii_mbtowc+0x1e>
 800c47e:	7813      	ldrb	r3, [r2, #0]
 800c480:	600b      	str	r3, [r1, #0]
 800c482:	7812      	ldrb	r2, [r2, #0]
 800c484:	1e10      	subs	r0, r2, #0
 800c486:	bf18      	it	ne
 800c488:	2001      	movne	r0, #1
 800c48a:	b002      	add	sp, #8
 800c48c:	4770      	bx	lr
 800c48e:	4610      	mov	r0, r2
 800c490:	e7fb      	b.n	800c48a <__ascii_mbtowc+0x16>
 800c492:	f06f 0001 	mvn.w	r0, #1
 800c496:	e7f8      	b.n	800c48a <__ascii_mbtowc+0x16>

0800c498 <__malloc_lock>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__malloc_lock+0x8>)
 800c49a:	f7ff b86a 	b.w	800b572 <__retarget_lock_acquire_recursive>
 800c49e:	bf00      	nop
 800c4a0:	20005320 	.word	0x20005320

0800c4a4 <__malloc_unlock>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__malloc_unlock+0x8>)
 800c4a6:	f7ff b865 	b.w	800b574 <__retarget_lock_release_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	20005320 	.word	0x20005320

0800c4b0 <_Balloc>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	69c6      	ldr	r6, [r0, #28]
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	b976      	cbnz	r6, 800c4d8 <_Balloc+0x28>
 800c4ba:	2010      	movs	r0, #16
 800c4bc:	f7ff ff32 	bl	800c324 <malloc>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	61e0      	str	r0, [r4, #28]
 800c4c4:	b920      	cbnz	r0, 800c4d0 <_Balloc+0x20>
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <_Balloc+0x78>)
 800c4c8:	4818      	ldr	r0, [pc, #96]	; (800c52c <_Balloc+0x7c>)
 800c4ca:	216b      	movs	r1, #107	; 0x6b
 800c4cc:	f000 fdaa 	bl	800d024 <__assert_func>
 800c4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d4:	6006      	str	r6, [r0, #0]
 800c4d6:	60c6      	str	r6, [r0, #12]
 800c4d8:	69e6      	ldr	r6, [r4, #28]
 800c4da:	68f3      	ldr	r3, [r6, #12]
 800c4dc:	b183      	cbz	r3, 800c500 <_Balloc+0x50>
 800c4de:	69e3      	ldr	r3, [r4, #28]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4e6:	b9b8      	cbnz	r0, 800c518 <_Balloc+0x68>
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c4ee:	1d72      	adds	r2, r6, #5
 800c4f0:	0092      	lsls	r2, r2, #2
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 fdb4 	bl	800d060 <_calloc_r>
 800c4f8:	b160      	cbz	r0, 800c514 <_Balloc+0x64>
 800c4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4fe:	e00e      	b.n	800c51e <_Balloc+0x6e>
 800c500:	2221      	movs	r2, #33	; 0x21
 800c502:	2104      	movs	r1, #4
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fdab 	bl	800d060 <_calloc_r>
 800c50a:	69e3      	ldr	r3, [r4, #28]
 800c50c:	60f0      	str	r0, [r6, #12]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e4      	bne.n	800c4de <_Balloc+0x2e>
 800c514:	2000      	movs	r0, #0
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	6802      	ldr	r2, [r0, #0]
 800c51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c51e:	2300      	movs	r3, #0
 800c520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c524:	e7f7      	b.n	800c516 <_Balloc+0x66>
 800c526:	bf00      	nop
 800c528:	0800e7d4 	.word	0x0800e7d4
 800c52c:	0800e854 	.word	0x0800e854

0800c530 <_Bfree>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	69c6      	ldr	r6, [r0, #28]
 800c534:	4605      	mov	r5, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b976      	cbnz	r6, 800c558 <_Bfree+0x28>
 800c53a:	2010      	movs	r0, #16
 800c53c:	f7ff fef2 	bl	800c324 <malloc>
 800c540:	4602      	mov	r2, r0
 800c542:	61e8      	str	r0, [r5, #28]
 800c544:	b920      	cbnz	r0, 800c550 <_Bfree+0x20>
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <_Bfree+0x3c>)
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <_Bfree+0x40>)
 800c54a:	218f      	movs	r1, #143	; 0x8f
 800c54c:	f000 fd6a 	bl	800d024 <__assert_func>
 800c550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c554:	6006      	str	r6, [r0, #0]
 800c556:	60c6      	str	r6, [r0, #12]
 800c558:	b13c      	cbz	r4, 800c56a <_Bfree+0x3a>
 800c55a:	69eb      	ldr	r3, [r5, #28]
 800c55c:	6862      	ldr	r2, [r4, #4]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c564:	6021      	str	r1, [r4, #0]
 800c566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	0800e7d4 	.word	0x0800e7d4
 800c570:	0800e854 	.word	0x0800e854

0800c574 <__multadd>:
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	690d      	ldr	r5, [r1, #16]
 800c57a:	4607      	mov	r7, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	461e      	mov	r6, r3
 800c580:	f101 0c14 	add.w	ip, r1, #20
 800c584:	2000      	movs	r0, #0
 800c586:	f8dc 3000 	ldr.w	r3, [ip]
 800c58a:	b299      	uxth	r1, r3
 800c58c:	fb02 6101 	mla	r1, r2, r1, r6
 800c590:	0c1e      	lsrs	r6, r3, #16
 800c592:	0c0b      	lsrs	r3, r1, #16
 800c594:	fb02 3306 	mla	r3, r2, r6, r3
 800c598:	b289      	uxth	r1, r1
 800c59a:	3001      	adds	r0, #1
 800c59c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a0:	4285      	cmp	r5, r0
 800c5a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5aa:	dcec      	bgt.n	800c586 <__multadd+0x12>
 800c5ac:	b30e      	cbz	r6, 800c5f2 <__multadd+0x7e>
 800c5ae:	68a3      	ldr	r3, [r4, #8]
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	dc19      	bgt.n	800c5e8 <__multadd+0x74>
 800c5b4:	6861      	ldr	r1, [r4, #4]
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	3101      	adds	r1, #1
 800c5ba:	f7ff ff79 	bl	800c4b0 <_Balloc>
 800c5be:	4680      	mov	r8, r0
 800c5c0:	b928      	cbnz	r0, 800c5ce <__multadd+0x5a>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <__multadd+0x84>)
 800c5c6:	480d      	ldr	r0, [pc, #52]	; (800c5fc <__multadd+0x88>)
 800c5c8:	21ba      	movs	r1, #186	; 0xba
 800c5ca:	f000 fd2b 	bl	800d024 <__assert_func>
 800c5ce:	6922      	ldr	r2, [r4, #16]
 800c5d0:	3202      	adds	r2, #2
 800c5d2:	f104 010c 	add.w	r1, r4, #12
 800c5d6:	0092      	lsls	r2, r2, #2
 800c5d8:	300c      	adds	r0, #12
 800c5da:	f7fe ffcc 	bl	800b576 <memcpy>
 800c5de:	4621      	mov	r1, r4
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ffa5 	bl	800c530 <_Bfree>
 800c5e6:	4644      	mov	r4, r8
 800c5e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5ec:	3501      	adds	r5, #1
 800c5ee:	615e      	str	r6, [r3, #20]
 800c5f0:	6125      	str	r5, [r4, #16]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	0800e843 	.word	0x0800e843
 800c5fc:	0800e854 	.word	0x0800e854

0800c600 <__hi0bits>:
 800c600:	0c03      	lsrs	r3, r0, #16
 800c602:	041b      	lsls	r3, r3, #16
 800c604:	b9d3      	cbnz	r3, 800c63c <__hi0bits+0x3c>
 800c606:	0400      	lsls	r0, r0, #16
 800c608:	2310      	movs	r3, #16
 800c60a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c60e:	bf04      	itt	eq
 800c610:	0200      	lsleq	r0, r0, #8
 800c612:	3308      	addeq	r3, #8
 800c614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c618:	bf04      	itt	eq
 800c61a:	0100      	lsleq	r0, r0, #4
 800c61c:	3304      	addeq	r3, #4
 800c61e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c622:	bf04      	itt	eq
 800c624:	0080      	lsleq	r0, r0, #2
 800c626:	3302      	addeq	r3, #2
 800c628:	2800      	cmp	r0, #0
 800c62a:	db05      	blt.n	800c638 <__hi0bits+0x38>
 800c62c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c630:	f103 0301 	add.w	r3, r3, #1
 800c634:	bf08      	it	eq
 800c636:	2320      	moveq	r3, #32
 800c638:	4618      	mov	r0, r3
 800c63a:	4770      	bx	lr
 800c63c:	2300      	movs	r3, #0
 800c63e:	e7e4      	b.n	800c60a <__hi0bits+0xa>

0800c640 <__lo0bits>:
 800c640:	6803      	ldr	r3, [r0, #0]
 800c642:	f013 0207 	ands.w	r2, r3, #7
 800c646:	d00c      	beq.n	800c662 <__lo0bits+0x22>
 800c648:	07d9      	lsls	r1, r3, #31
 800c64a:	d422      	bmi.n	800c692 <__lo0bits+0x52>
 800c64c:	079a      	lsls	r2, r3, #30
 800c64e:	bf49      	itett	mi
 800c650:	085b      	lsrmi	r3, r3, #1
 800c652:	089b      	lsrpl	r3, r3, #2
 800c654:	6003      	strmi	r3, [r0, #0]
 800c656:	2201      	movmi	r2, #1
 800c658:	bf5c      	itt	pl
 800c65a:	6003      	strpl	r3, [r0, #0]
 800c65c:	2202      	movpl	r2, #2
 800c65e:	4610      	mov	r0, r2
 800c660:	4770      	bx	lr
 800c662:	b299      	uxth	r1, r3
 800c664:	b909      	cbnz	r1, 800c66a <__lo0bits+0x2a>
 800c666:	0c1b      	lsrs	r3, r3, #16
 800c668:	2210      	movs	r2, #16
 800c66a:	b2d9      	uxtb	r1, r3
 800c66c:	b909      	cbnz	r1, 800c672 <__lo0bits+0x32>
 800c66e:	3208      	adds	r2, #8
 800c670:	0a1b      	lsrs	r3, r3, #8
 800c672:	0719      	lsls	r1, r3, #28
 800c674:	bf04      	itt	eq
 800c676:	091b      	lsreq	r3, r3, #4
 800c678:	3204      	addeq	r2, #4
 800c67a:	0799      	lsls	r1, r3, #30
 800c67c:	bf04      	itt	eq
 800c67e:	089b      	lsreq	r3, r3, #2
 800c680:	3202      	addeq	r2, #2
 800c682:	07d9      	lsls	r1, r3, #31
 800c684:	d403      	bmi.n	800c68e <__lo0bits+0x4e>
 800c686:	085b      	lsrs	r3, r3, #1
 800c688:	f102 0201 	add.w	r2, r2, #1
 800c68c:	d003      	beq.n	800c696 <__lo0bits+0x56>
 800c68e:	6003      	str	r3, [r0, #0]
 800c690:	e7e5      	b.n	800c65e <__lo0bits+0x1e>
 800c692:	2200      	movs	r2, #0
 800c694:	e7e3      	b.n	800c65e <__lo0bits+0x1e>
 800c696:	2220      	movs	r2, #32
 800c698:	e7e1      	b.n	800c65e <__lo0bits+0x1e>
	...

0800c69c <__i2b>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	460c      	mov	r4, r1
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	f7ff ff05 	bl	800c4b0 <_Balloc>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	b928      	cbnz	r0, 800c6b6 <__i2b+0x1a>
 800c6aa:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <__i2b+0x24>)
 800c6ac:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <__i2b+0x28>)
 800c6ae:	f240 1145 	movw	r1, #325	; 0x145
 800c6b2:	f000 fcb7 	bl	800d024 <__assert_func>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	6144      	str	r4, [r0, #20]
 800c6ba:	6103      	str	r3, [r0, #16]
 800c6bc:	bd10      	pop	{r4, pc}
 800c6be:	bf00      	nop
 800c6c0:	0800e843 	.word	0x0800e843
 800c6c4:	0800e854 	.word	0x0800e854

0800c6c8 <__multiply>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	4691      	mov	r9, r2
 800c6ce:	690a      	ldr	r2, [r1, #16]
 800c6d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	bfb8      	it	lt
 800c6d8:	460b      	movlt	r3, r1
 800c6da:	460c      	mov	r4, r1
 800c6dc:	bfbc      	itt	lt
 800c6de:	464c      	movlt	r4, r9
 800c6e0:	4699      	movlt	r9, r3
 800c6e2:	6927      	ldr	r7, [r4, #16]
 800c6e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6e8:	68a3      	ldr	r3, [r4, #8]
 800c6ea:	6861      	ldr	r1, [r4, #4]
 800c6ec:	eb07 060a 	add.w	r6, r7, sl
 800c6f0:	42b3      	cmp	r3, r6
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	bfb8      	it	lt
 800c6f6:	3101      	addlt	r1, #1
 800c6f8:	f7ff feda 	bl	800c4b0 <_Balloc>
 800c6fc:	b930      	cbnz	r0, 800c70c <__multiply+0x44>
 800c6fe:	4602      	mov	r2, r0
 800c700:	4b44      	ldr	r3, [pc, #272]	; (800c814 <__multiply+0x14c>)
 800c702:	4845      	ldr	r0, [pc, #276]	; (800c818 <__multiply+0x150>)
 800c704:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c708:	f000 fc8c 	bl	800d024 <__assert_func>
 800c70c:	f100 0514 	add.w	r5, r0, #20
 800c710:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c714:	462b      	mov	r3, r5
 800c716:	2200      	movs	r2, #0
 800c718:	4543      	cmp	r3, r8
 800c71a:	d321      	bcc.n	800c760 <__multiply+0x98>
 800c71c:	f104 0314 	add.w	r3, r4, #20
 800c720:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c724:	f109 0314 	add.w	r3, r9, #20
 800c728:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c72c:	9202      	str	r2, [sp, #8]
 800c72e:	1b3a      	subs	r2, r7, r4
 800c730:	3a15      	subs	r2, #21
 800c732:	f022 0203 	bic.w	r2, r2, #3
 800c736:	3204      	adds	r2, #4
 800c738:	f104 0115 	add.w	r1, r4, #21
 800c73c:	428f      	cmp	r7, r1
 800c73e:	bf38      	it	cc
 800c740:	2204      	movcc	r2, #4
 800c742:	9201      	str	r2, [sp, #4]
 800c744:	9a02      	ldr	r2, [sp, #8]
 800c746:	9303      	str	r3, [sp, #12]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d80c      	bhi.n	800c766 <__multiply+0x9e>
 800c74c:	2e00      	cmp	r6, #0
 800c74e:	dd03      	ble.n	800c758 <__multiply+0x90>
 800c750:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c754:	2b00      	cmp	r3, #0
 800c756:	d05b      	beq.n	800c810 <__multiply+0x148>
 800c758:	6106      	str	r6, [r0, #16]
 800c75a:	b005      	add	sp, #20
 800c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c760:	f843 2b04 	str.w	r2, [r3], #4
 800c764:	e7d8      	b.n	800c718 <__multiply+0x50>
 800c766:	f8b3 a000 	ldrh.w	sl, [r3]
 800c76a:	f1ba 0f00 	cmp.w	sl, #0
 800c76e:	d024      	beq.n	800c7ba <__multiply+0xf2>
 800c770:	f104 0e14 	add.w	lr, r4, #20
 800c774:	46a9      	mov	r9, r5
 800c776:	f04f 0c00 	mov.w	ip, #0
 800c77a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c77e:	f8d9 1000 	ldr.w	r1, [r9]
 800c782:	fa1f fb82 	uxth.w	fp, r2
 800c786:	b289      	uxth	r1, r1
 800c788:	fb0a 110b 	mla	r1, sl, fp, r1
 800c78c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c790:	f8d9 2000 	ldr.w	r2, [r9]
 800c794:	4461      	add	r1, ip
 800c796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c79a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c79e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7a2:	b289      	uxth	r1, r1
 800c7a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7a8:	4577      	cmp	r7, lr
 800c7aa:	f849 1b04 	str.w	r1, [r9], #4
 800c7ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7b2:	d8e2      	bhi.n	800c77a <__multiply+0xb2>
 800c7b4:	9a01      	ldr	r2, [sp, #4]
 800c7b6:	f845 c002 	str.w	ip, [r5, r2]
 800c7ba:	9a03      	ldr	r2, [sp, #12]
 800c7bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	d021      	beq.n	800c80c <__multiply+0x144>
 800c7c8:	6829      	ldr	r1, [r5, #0]
 800c7ca:	f104 0c14 	add.w	ip, r4, #20
 800c7ce:	46ae      	mov	lr, r5
 800c7d0:	f04f 0a00 	mov.w	sl, #0
 800c7d4:	f8bc b000 	ldrh.w	fp, [ip]
 800c7d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7dc:	fb09 220b 	mla	r2, r9, fp, r2
 800c7e0:	4452      	add	r2, sl
 800c7e2:	b289      	uxth	r1, r1
 800c7e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7e8:	f84e 1b04 	str.w	r1, [lr], #4
 800c7ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7f4:	f8be 1000 	ldrh.w	r1, [lr]
 800c7f8:	fb09 110a 	mla	r1, r9, sl, r1
 800c7fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c800:	4567      	cmp	r7, ip
 800c802:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c806:	d8e5      	bhi.n	800c7d4 <__multiply+0x10c>
 800c808:	9a01      	ldr	r2, [sp, #4]
 800c80a:	50a9      	str	r1, [r5, r2]
 800c80c:	3504      	adds	r5, #4
 800c80e:	e799      	b.n	800c744 <__multiply+0x7c>
 800c810:	3e01      	subs	r6, #1
 800c812:	e79b      	b.n	800c74c <__multiply+0x84>
 800c814:	0800e843 	.word	0x0800e843
 800c818:	0800e854 	.word	0x0800e854

0800c81c <__pow5mult>:
 800c81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c820:	4615      	mov	r5, r2
 800c822:	f012 0203 	ands.w	r2, r2, #3
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	d007      	beq.n	800c83c <__pow5mult+0x20>
 800c82c:	4c25      	ldr	r4, [pc, #148]	; (800c8c4 <__pow5mult+0xa8>)
 800c82e:	3a01      	subs	r2, #1
 800c830:	2300      	movs	r3, #0
 800c832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c836:	f7ff fe9d 	bl	800c574 <__multadd>
 800c83a:	4607      	mov	r7, r0
 800c83c:	10ad      	asrs	r5, r5, #2
 800c83e:	d03d      	beq.n	800c8bc <__pow5mult+0xa0>
 800c840:	69f4      	ldr	r4, [r6, #28]
 800c842:	b97c      	cbnz	r4, 800c864 <__pow5mult+0x48>
 800c844:	2010      	movs	r0, #16
 800c846:	f7ff fd6d 	bl	800c324 <malloc>
 800c84a:	4602      	mov	r2, r0
 800c84c:	61f0      	str	r0, [r6, #28]
 800c84e:	b928      	cbnz	r0, 800c85c <__pow5mult+0x40>
 800c850:	4b1d      	ldr	r3, [pc, #116]	; (800c8c8 <__pow5mult+0xac>)
 800c852:	481e      	ldr	r0, [pc, #120]	; (800c8cc <__pow5mult+0xb0>)
 800c854:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c858:	f000 fbe4 	bl	800d024 <__assert_func>
 800c85c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c860:	6004      	str	r4, [r0, #0]
 800c862:	60c4      	str	r4, [r0, #12]
 800c864:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c86c:	b94c      	cbnz	r4, 800c882 <__pow5mult+0x66>
 800c86e:	f240 2171 	movw	r1, #625	; 0x271
 800c872:	4630      	mov	r0, r6
 800c874:	f7ff ff12 	bl	800c69c <__i2b>
 800c878:	2300      	movs	r3, #0
 800c87a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c87e:	4604      	mov	r4, r0
 800c880:	6003      	str	r3, [r0, #0]
 800c882:	f04f 0900 	mov.w	r9, #0
 800c886:	07eb      	lsls	r3, r5, #31
 800c888:	d50a      	bpl.n	800c8a0 <__pow5mult+0x84>
 800c88a:	4639      	mov	r1, r7
 800c88c:	4622      	mov	r2, r4
 800c88e:	4630      	mov	r0, r6
 800c890:	f7ff ff1a 	bl	800c6c8 <__multiply>
 800c894:	4639      	mov	r1, r7
 800c896:	4680      	mov	r8, r0
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff fe49 	bl	800c530 <_Bfree>
 800c89e:	4647      	mov	r7, r8
 800c8a0:	106d      	asrs	r5, r5, #1
 800c8a2:	d00b      	beq.n	800c8bc <__pow5mult+0xa0>
 800c8a4:	6820      	ldr	r0, [r4, #0]
 800c8a6:	b938      	cbnz	r0, 800c8b8 <__pow5mult+0x9c>
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7ff ff0b 	bl	800c6c8 <__multiply>
 800c8b2:	6020      	str	r0, [r4, #0]
 800c8b4:	f8c0 9000 	str.w	r9, [r0]
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	e7e4      	b.n	800c886 <__pow5mult+0x6a>
 800c8bc:	4638      	mov	r0, r7
 800c8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c2:	bf00      	nop
 800c8c4:	0800e9a0 	.word	0x0800e9a0
 800c8c8:	0800e7d4 	.word	0x0800e7d4
 800c8cc:	0800e854 	.word	0x0800e854

0800c8d0 <__lshift>:
 800c8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	6849      	ldr	r1, [r1, #4]
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8de:	68a3      	ldr	r3, [r4, #8]
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	4691      	mov	r9, r2
 800c8e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8e8:	f108 0601 	add.w	r6, r8, #1
 800c8ec:	42b3      	cmp	r3, r6
 800c8ee:	db0b      	blt.n	800c908 <__lshift+0x38>
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f7ff fddd 	bl	800c4b0 <_Balloc>
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	b948      	cbnz	r0, 800c90e <__lshift+0x3e>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	4b28      	ldr	r3, [pc, #160]	; (800c9a0 <__lshift+0xd0>)
 800c8fe:	4829      	ldr	r0, [pc, #164]	; (800c9a4 <__lshift+0xd4>)
 800c900:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c904:	f000 fb8e 	bl	800d024 <__assert_func>
 800c908:	3101      	adds	r1, #1
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	e7ee      	b.n	800c8ec <__lshift+0x1c>
 800c90e:	2300      	movs	r3, #0
 800c910:	f100 0114 	add.w	r1, r0, #20
 800c914:	f100 0210 	add.w	r2, r0, #16
 800c918:	4618      	mov	r0, r3
 800c91a:	4553      	cmp	r3, sl
 800c91c:	db33      	blt.n	800c986 <__lshift+0xb6>
 800c91e:	6920      	ldr	r0, [r4, #16]
 800c920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c924:	f104 0314 	add.w	r3, r4, #20
 800c928:	f019 091f 	ands.w	r9, r9, #31
 800c92c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c930:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c934:	d02b      	beq.n	800c98e <__lshift+0xbe>
 800c936:	f1c9 0e20 	rsb	lr, r9, #32
 800c93a:	468a      	mov	sl, r1
 800c93c:	2200      	movs	r2, #0
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	fa00 f009 	lsl.w	r0, r0, r9
 800c944:	4310      	orrs	r0, r2
 800c946:	f84a 0b04 	str.w	r0, [sl], #4
 800c94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c94e:	459c      	cmp	ip, r3
 800c950:	fa22 f20e 	lsr.w	r2, r2, lr
 800c954:	d8f3      	bhi.n	800c93e <__lshift+0x6e>
 800c956:	ebac 0304 	sub.w	r3, ip, r4
 800c95a:	3b15      	subs	r3, #21
 800c95c:	f023 0303 	bic.w	r3, r3, #3
 800c960:	3304      	adds	r3, #4
 800c962:	f104 0015 	add.w	r0, r4, #21
 800c966:	4584      	cmp	ip, r0
 800c968:	bf38      	it	cc
 800c96a:	2304      	movcc	r3, #4
 800c96c:	50ca      	str	r2, [r1, r3]
 800c96e:	b10a      	cbz	r2, 800c974 <__lshift+0xa4>
 800c970:	f108 0602 	add.w	r6, r8, #2
 800c974:	3e01      	subs	r6, #1
 800c976:	4638      	mov	r0, r7
 800c978:	612e      	str	r6, [r5, #16]
 800c97a:	4621      	mov	r1, r4
 800c97c:	f7ff fdd8 	bl	800c530 <_Bfree>
 800c980:	4628      	mov	r0, r5
 800c982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c986:	f842 0f04 	str.w	r0, [r2, #4]!
 800c98a:	3301      	adds	r3, #1
 800c98c:	e7c5      	b.n	800c91a <__lshift+0x4a>
 800c98e:	3904      	subs	r1, #4
 800c990:	f853 2b04 	ldr.w	r2, [r3], #4
 800c994:	f841 2f04 	str.w	r2, [r1, #4]!
 800c998:	459c      	cmp	ip, r3
 800c99a:	d8f9      	bhi.n	800c990 <__lshift+0xc0>
 800c99c:	e7ea      	b.n	800c974 <__lshift+0xa4>
 800c99e:	bf00      	nop
 800c9a0:	0800e843 	.word	0x0800e843
 800c9a4:	0800e854 	.word	0x0800e854

0800c9a8 <__mcmp>:
 800c9a8:	b530      	push	{r4, r5, lr}
 800c9aa:	6902      	ldr	r2, [r0, #16]
 800c9ac:	690c      	ldr	r4, [r1, #16]
 800c9ae:	1b12      	subs	r2, r2, r4
 800c9b0:	d10e      	bne.n	800c9d0 <__mcmp+0x28>
 800c9b2:	f100 0314 	add.w	r3, r0, #20
 800c9b6:	3114      	adds	r1, #20
 800c9b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9c8:	42a5      	cmp	r5, r4
 800c9ca:	d003      	beq.n	800c9d4 <__mcmp+0x2c>
 800c9cc:	d305      	bcc.n	800c9da <__mcmp+0x32>
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	bd30      	pop	{r4, r5, pc}
 800c9d4:	4283      	cmp	r3, r0
 800c9d6:	d3f3      	bcc.n	800c9c0 <__mcmp+0x18>
 800c9d8:	e7fa      	b.n	800c9d0 <__mcmp+0x28>
 800c9da:	f04f 32ff 	mov.w	r2, #4294967295
 800c9de:	e7f7      	b.n	800c9d0 <__mcmp+0x28>

0800c9e0 <__mdiff>:
 800c9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4690      	mov	r8, r2
 800c9ee:	f7ff ffdb 	bl	800c9a8 <__mcmp>
 800c9f2:	1e05      	subs	r5, r0, #0
 800c9f4:	d110      	bne.n	800ca18 <__mdiff+0x38>
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff fd59 	bl	800c4b0 <_Balloc>
 800c9fe:	b930      	cbnz	r0, 800ca0e <__mdiff+0x2e>
 800ca00:	4b3a      	ldr	r3, [pc, #232]	; (800caec <__mdiff+0x10c>)
 800ca02:	4602      	mov	r2, r0
 800ca04:	f240 2137 	movw	r1, #567	; 0x237
 800ca08:	4839      	ldr	r0, [pc, #228]	; (800caf0 <__mdiff+0x110>)
 800ca0a:	f000 fb0b 	bl	800d024 <__assert_func>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca18:	bfa4      	itt	ge
 800ca1a:	4643      	movge	r3, r8
 800ca1c:	46a0      	movge	r8, r4
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca24:	bfa6      	itte	ge
 800ca26:	461c      	movge	r4, r3
 800ca28:	2500      	movge	r5, #0
 800ca2a:	2501      	movlt	r5, #1
 800ca2c:	f7ff fd40 	bl	800c4b0 <_Balloc>
 800ca30:	b920      	cbnz	r0, 800ca3c <__mdiff+0x5c>
 800ca32:	4b2e      	ldr	r3, [pc, #184]	; (800caec <__mdiff+0x10c>)
 800ca34:	4602      	mov	r2, r0
 800ca36:	f240 2145 	movw	r1, #581	; 0x245
 800ca3a:	e7e5      	b.n	800ca08 <__mdiff+0x28>
 800ca3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca40:	6926      	ldr	r6, [r4, #16]
 800ca42:	60c5      	str	r5, [r0, #12]
 800ca44:	f104 0914 	add.w	r9, r4, #20
 800ca48:	f108 0514 	add.w	r5, r8, #20
 800ca4c:	f100 0e14 	add.w	lr, r0, #20
 800ca50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca58:	f108 0210 	add.w	r2, r8, #16
 800ca5c:	46f2      	mov	sl, lr
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca68:	fa11 f88b 	uxtah	r8, r1, fp
 800ca6c:	b299      	uxth	r1, r3
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	eba8 0801 	sub.w	r8, r8, r1
 800ca74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca7c:	fa1f f888 	uxth.w	r8, r8
 800ca80:	1419      	asrs	r1, r3, #16
 800ca82:	454e      	cmp	r6, r9
 800ca84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca88:	f84a 3b04 	str.w	r3, [sl], #4
 800ca8c:	d8e8      	bhi.n	800ca60 <__mdiff+0x80>
 800ca8e:	1b33      	subs	r3, r6, r4
 800ca90:	3b15      	subs	r3, #21
 800ca92:	f023 0303 	bic.w	r3, r3, #3
 800ca96:	3304      	adds	r3, #4
 800ca98:	3415      	adds	r4, #21
 800ca9a:	42a6      	cmp	r6, r4
 800ca9c:	bf38      	it	cc
 800ca9e:	2304      	movcc	r3, #4
 800caa0:	441d      	add	r5, r3
 800caa2:	4473      	add	r3, lr
 800caa4:	469e      	mov	lr, r3
 800caa6:	462e      	mov	r6, r5
 800caa8:	4566      	cmp	r6, ip
 800caaa:	d30e      	bcc.n	800caca <__mdiff+0xea>
 800caac:	f10c 0203 	add.w	r2, ip, #3
 800cab0:	1b52      	subs	r2, r2, r5
 800cab2:	f022 0203 	bic.w	r2, r2, #3
 800cab6:	3d03      	subs	r5, #3
 800cab8:	45ac      	cmp	ip, r5
 800caba:	bf38      	it	cc
 800cabc:	2200      	movcc	r2, #0
 800cabe:	4413      	add	r3, r2
 800cac0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cac4:	b17a      	cbz	r2, 800cae6 <__mdiff+0x106>
 800cac6:	6107      	str	r7, [r0, #16]
 800cac8:	e7a4      	b.n	800ca14 <__mdiff+0x34>
 800caca:	f856 8b04 	ldr.w	r8, [r6], #4
 800cace:	fa11 f288 	uxtah	r2, r1, r8
 800cad2:	1414      	asrs	r4, r2, #16
 800cad4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cad8:	b292      	uxth	r2, r2
 800cada:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cade:	f84e 2b04 	str.w	r2, [lr], #4
 800cae2:	1421      	asrs	r1, r4, #16
 800cae4:	e7e0      	b.n	800caa8 <__mdiff+0xc8>
 800cae6:	3f01      	subs	r7, #1
 800cae8:	e7ea      	b.n	800cac0 <__mdiff+0xe0>
 800caea:	bf00      	nop
 800caec:	0800e843 	.word	0x0800e843
 800caf0:	0800e854 	.word	0x0800e854

0800caf4 <__d2b>:
 800caf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	460f      	mov	r7, r1
 800cafa:	2101      	movs	r1, #1
 800cafc:	ec59 8b10 	vmov	r8, r9, d0
 800cb00:	4616      	mov	r6, r2
 800cb02:	f7ff fcd5 	bl	800c4b0 <_Balloc>
 800cb06:	4604      	mov	r4, r0
 800cb08:	b930      	cbnz	r0, 800cb18 <__d2b+0x24>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4b24      	ldr	r3, [pc, #144]	; (800cba0 <__d2b+0xac>)
 800cb0e:	4825      	ldr	r0, [pc, #148]	; (800cba4 <__d2b+0xb0>)
 800cb10:	f240 310f 	movw	r1, #783	; 0x30f
 800cb14:	f000 fa86 	bl	800d024 <__assert_func>
 800cb18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb20:	bb2d      	cbnz	r5, 800cb6e <__d2b+0x7a>
 800cb22:	9301      	str	r3, [sp, #4]
 800cb24:	f1b8 0300 	subs.w	r3, r8, #0
 800cb28:	d026      	beq.n	800cb78 <__d2b+0x84>
 800cb2a:	4668      	mov	r0, sp
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	f7ff fd87 	bl	800c640 <__lo0bits>
 800cb32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb36:	b1e8      	cbz	r0, 800cb74 <__d2b+0x80>
 800cb38:	f1c0 0320 	rsb	r3, r0, #32
 800cb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb40:	430b      	orrs	r3, r1
 800cb42:	40c2      	lsrs	r2, r0
 800cb44:	6163      	str	r3, [r4, #20]
 800cb46:	9201      	str	r2, [sp, #4]
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	61a3      	str	r3, [r4, #24]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bf14      	ite	ne
 800cb50:	2202      	movne	r2, #2
 800cb52:	2201      	moveq	r2, #1
 800cb54:	6122      	str	r2, [r4, #16]
 800cb56:	b1bd      	cbz	r5, 800cb88 <__d2b+0x94>
 800cb58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb5c:	4405      	add	r5, r0
 800cb5e:	603d      	str	r5, [r7, #0]
 800cb60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb64:	6030      	str	r0, [r6, #0]
 800cb66:	4620      	mov	r0, r4
 800cb68:	b003      	add	sp, #12
 800cb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb72:	e7d6      	b.n	800cb22 <__d2b+0x2e>
 800cb74:	6161      	str	r1, [r4, #20]
 800cb76:	e7e7      	b.n	800cb48 <__d2b+0x54>
 800cb78:	a801      	add	r0, sp, #4
 800cb7a:	f7ff fd61 	bl	800c640 <__lo0bits>
 800cb7e:	9b01      	ldr	r3, [sp, #4]
 800cb80:	6163      	str	r3, [r4, #20]
 800cb82:	3020      	adds	r0, #32
 800cb84:	2201      	movs	r2, #1
 800cb86:	e7e5      	b.n	800cb54 <__d2b+0x60>
 800cb88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb90:	6038      	str	r0, [r7, #0]
 800cb92:	6918      	ldr	r0, [r3, #16]
 800cb94:	f7ff fd34 	bl	800c600 <__hi0bits>
 800cb98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb9c:	e7e2      	b.n	800cb64 <__d2b+0x70>
 800cb9e:	bf00      	nop
 800cba0:	0800e843 	.word	0x0800e843
 800cba4:	0800e854 	.word	0x0800e854

0800cba8 <__ascii_wctomb>:
 800cba8:	b149      	cbz	r1, 800cbbe <__ascii_wctomb+0x16>
 800cbaa:	2aff      	cmp	r2, #255	; 0xff
 800cbac:	bf85      	ittet	hi
 800cbae:	238a      	movhi	r3, #138	; 0x8a
 800cbb0:	6003      	strhi	r3, [r0, #0]
 800cbb2:	700a      	strbls	r2, [r1, #0]
 800cbb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbb8:	bf98      	it	ls
 800cbba:	2001      	movls	r0, #1
 800cbbc:	4770      	bx	lr
 800cbbe:	4608      	mov	r0, r1
 800cbc0:	4770      	bx	lr

0800cbc2 <__ssputs_r>:
 800cbc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc6:	688e      	ldr	r6, [r1, #8]
 800cbc8:	461f      	mov	r7, r3
 800cbca:	42be      	cmp	r6, r7
 800cbcc:	680b      	ldr	r3, [r1, #0]
 800cbce:	4682      	mov	sl, r0
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	4690      	mov	r8, r2
 800cbd4:	d82c      	bhi.n	800cc30 <__ssputs_r+0x6e>
 800cbd6:	898a      	ldrh	r2, [r1, #12]
 800cbd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbdc:	d026      	beq.n	800cc2c <__ssputs_r+0x6a>
 800cbde:	6965      	ldr	r5, [r4, #20]
 800cbe0:	6909      	ldr	r1, [r1, #16]
 800cbe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbe6:	eba3 0901 	sub.w	r9, r3, r1
 800cbea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbee:	1c7b      	adds	r3, r7, #1
 800cbf0:	444b      	add	r3, r9
 800cbf2:	106d      	asrs	r5, r5, #1
 800cbf4:	429d      	cmp	r5, r3
 800cbf6:	bf38      	it	cc
 800cbf8:	461d      	movcc	r5, r3
 800cbfa:	0553      	lsls	r3, r2, #21
 800cbfc:	d527      	bpl.n	800cc4e <__ssputs_r+0x8c>
 800cbfe:	4629      	mov	r1, r5
 800cc00:	f7ff fbb8 	bl	800c374 <_malloc_r>
 800cc04:	4606      	mov	r6, r0
 800cc06:	b360      	cbz	r0, 800cc62 <__ssputs_r+0xa0>
 800cc08:	6921      	ldr	r1, [r4, #16]
 800cc0a:	464a      	mov	r2, r9
 800cc0c:	f7fe fcb3 	bl	800b576 <memcpy>
 800cc10:	89a3      	ldrh	r3, [r4, #12]
 800cc12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	6126      	str	r6, [r4, #16]
 800cc1e:	6165      	str	r5, [r4, #20]
 800cc20:	444e      	add	r6, r9
 800cc22:	eba5 0509 	sub.w	r5, r5, r9
 800cc26:	6026      	str	r6, [r4, #0]
 800cc28:	60a5      	str	r5, [r4, #8]
 800cc2a:	463e      	mov	r6, r7
 800cc2c:	42be      	cmp	r6, r7
 800cc2e:	d900      	bls.n	800cc32 <__ssputs_r+0x70>
 800cc30:	463e      	mov	r6, r7
 800cc32:	6820      	ldr	r0, [r4, #0]
 800cc34:	4632      	mov	r2, r6
 800cc36:	4641      	mov	r1, r8
 800cc38:	f000 f9ca 	bl	800cfd0 <memmove>
 800cc3c:	68a3      	ldr	r3, [r4, #8]
 800cc3e:	1b9b      	subs	r3, r3, r6
 800cc40:	60a3      	str	r3, [r4, #8]
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	4433      	add	r3, r6
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4e:	462a      	mov	r2, r5
 800cc50:	f000 fa1c 	bl	800d08c <_realloc_r>
 800cc54:	4606      	mov	r6, r0
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d1e0      	bne.n	800cc1c <__ssputs_r+0x5a>
 800cc5a:	6921      	ldr	r1, [r4, #16]
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	f7ff fb15 	bl	800c28c <_free_r>
 800cc62:	230c      	movs	r3, #12
 800cc64:	f8ca 3000 	str.w	r3, [sl]
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc6e:	81a3      	strh	r3, [r4, #12]
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295
 800cc74:	e7e9      	b.n	800cc4a <__ssputs_r+0x88>
	...

0800cc78 <_svfiprintf_r>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	4698      	mov	r8, r3
 800cc7e:	898b      	ldrh	r3, [r1, #12]
 800cc80:	061b      	lsls	r3, r3, #24
 800cc82:	b09d      	sub	sp, #116	; 0x74
 800cc84:	4607      	mov	r7, r0
 800cc86:	460d      	mov	r5, r1
 800cc88:	4614      	mov	r4, r2
 800cc8a:	d50e      	bpl.n	800ccaa <_svfiprintf_r+0x32>
 800cc8c:	690b      	ldr	r3, [r1, #16]
 800cc8e:	b963      	cbnz	r3, 800ccaa <_svfiprintf_r+0x32>
 800cc90:	2140      	movs	r1, #64	; 0x40
 800cc92:	f7ff fb6f 	bl	800c374 <_malloc_r>
 800cc96:	6028      	str	r0, [r5, #0]
 800cc98:	6128      	str	r0, [r5, #16]
 800cc9a:	b920      	cbnz	r0, 800cca6 <_svfiprintf_r+0x2e>
 800cc9c:	230c      	movs	r3, #12
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	e0d0      	b.n	800ce48 <_svfiprintf_r+0x1d0>
 800cca6:	2340      	movs	r3, #64	; 0x40
 800cca8:	616b      	str	r3, [r5, #20]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	9309      	str	r3, [sp, #36]	; 0x24
 800ccae:	2320      	movs	r3, #32
 800ccb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccb8:	2330      	movs	r3, #48	; 0x30
 800ccba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce60 <_svfiprintf_r+0x1e8>
 800ccbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccc2:	f04f 0901 	mov.w	r9, #1
 800ccc6:	4623      	mov	r3, r4
 800ccc8:	469a      	mov	sl, r3
 800ccca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccce:	b10a      	cbz	r2, 800ccd4 <_svfiprintf_r+0x5c>
 800ccd0:	2a25      	cmp	r2, #37	; 0x25
 800ccd2:	d1f9      	bne.n	800ccc8 <_svfiprintf_r+0x50>
 800ccd4:	ebba 0b04 	subs.w	fp, sl, r4
 800ccd8:	d00b      	beq.n	800ccf2 <_svfiprintf_r+0x7a>
 800ccda:	465b      	mov	r3, fp
 800ccdc:	4622      	mov	r2, r4
 800ccde:	4629      	mov	r1, r5
 800cce0:	4638      	mov	r0, r7
 800cce2:	f7ff ff6e 	bl	800cbc2 <__ssputs_r>
 800cce6:	3001      	adds	r0, #1
 800cce8:	f000 80a9 	beq.w	800ce3e <_svfiprintf_r+0x1c6>
 800ccec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccee:	445a      	add	r2, fp
 800ccf0:	9209      	str	r2, [sp, #36]	; 0x24
 800ccf2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 80a1 	beq.w	800ce3e <_svfiprintf_r+0x1c6>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cd02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd06:	f10a 0a01 	add.w	sl, sl, #1
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	9307      	str	r3, [sp, #28]
 800cd0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd12:	931a      	str	r3, [sp, #104]	; 0x68
 800cd14:	4654      	mov	r4, sl
 800cd16:	2205      	movs	r2, #5
 800cd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1c:	4850      	ldr	r0, [pc, #320]	; (800ce60 <_svfiprintf_r+0x1e8>)
 800cd1e:	f7f3 fa77 	bl	8000210 <memchr>
 800cd22:	9a04      	ldr	r2, [sp, #16]
 800cd24:	b9d8      	cbnz	r0, 800cd5e <_svfiprintf_r+0xe6>
 800cd26:	06d0      	lsls	r0, r2, #27
 800cd28:	bf44      	itt	mi
 800cd2a:	2320      	movmi	r3, #32
 800cd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd30:	0711      	lsls	r1, r2, #28
 800cd32:	bf44      	itt	mi
 800cd34:	232b      	movmi	r3, #43	; 0x2b
 800cd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd40:	d015      	beq.n	800cd6e <_svfiprintf_r+0xf6>
 800cd42:	9a07      	ldr	r2, [sp, #28]
 800cd44:	4654      	mov	r4, sl
 800cd46:	2000      	movs	r0, #0
 800cd48:	f04f 0c0a 	mov.w	ip, #10
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd52:	3b30      	subs	r3, #48	; 0x30
 800cd54:	2b09      	cmp	r3, #9
 800cd56:	d94d      	bls.n	800cdf4 <_svfiprintf_r+0x17c>
 800cd58:	b1b0      	cbz	r0, 800cd88 <_svfiprintf_r+0x110>
 800cd5a:	9207      	str	r2, [sp, #28]
 800cd5c:	e014      	b.n	800cd88 <_svfiprintf_r+0x110>
 800cd5e:	eba0 0308 	sub.w	r3, r0, r8
 800cd62:	fa09 f303 	lsl.w	r3, r9, r3
 800cd66:	4313      	orrs	r3, r2
 800cd68:	9304      	str	r3, [sp, #16]
 800cd6a:	46a2      	mov	sl, r4
 800cd6c:	e7d2      	b.n	800cd14 <_svfiprintf_r+0x9c>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	1d19      	adds	r1, r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	9103      	str	r1, [sp, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	bfbb      	ittet	lt
 800cd7a:	425b      	neglt	r3, r3
 800cd7c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd80:	9307      	strge	r3, [sp, #28]
 800cd82:	9307      	strlt	r3, [sp, #28]
 800cd84:	bfb8      	it	lt
 800cd86:	9204      	strlt	r2, [sp, #16]
 800cd88:	7823      	ldrb	r3, [r4, #0]
 800cd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd8c:	d10c      	bne.n	800cda8 <_svfiprintf_r+0x130>
 800cd8e:	7863      	ldrb	r3, [r4, #1]
 800cd90:	2b2a      	cmp	r3, #42	; 0x2a
 800cd92:	d134      	bne.n	800cdfe <_svfiprintf_r+0x186>
 800cd94:	9b03      	ldr	r3, [sp, #12]
 800cd96:	1d1a      	adds	r2, r3, #4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	9203      	str	r2, [sp, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	bfb8      	it	lt
 800cda0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cda4:	3402      	adds	r4, #2
 800cda6:	9305      	str	r3, [sp, #20]
 800cda8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce70 <_svfiprintf_r+0x1f8>
 800cdac:	7821      	ldrb	r1, [r4, #0]
 800cdae:	2203      	movs	r2, #3
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	f7f3 fa2d 	bl	8000210 <memchr>
 800cdb6:	b138      	cbz	r0, 800cdc8 <_svfiprintf_r+0x150>
 800cdb8:	9b04      	ldr	r3, [sp, #16]
 800cdba:	eba0 000a 	sub.w	r0, r0, sl
 800cdbe:	2240      	movs	r2, #64	; 0x40
 800cdc0:	4082      	lsls	r2, r0
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	3401      	adds	r4, #1
 800cdc6:	9304      	str	r3, [sp, #16]
 800cdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdcc:	4825      	ldr	r0, [pc, #148]	; (800ce64 <_svfiprintf_r+0x1ec>)
 800cdce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdd2:	2206      	movs	r2, #6
 800cdd4:	f7f3 fa1c 	bl	8000210 <memchr>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d038      	beq.n	800ce4e <_svfiprintf_r+0x1d6>
 800cddc:	4b22      	ldr	r3, [pc, #136]	; (800ce68 <_svfiprintf_r+0x1f0>)
 800cdde:	bb1b      	cbnz	r3, 800ce28 <_svfiprintf_r+0x1b0>
 800cde0:	9b03      	ldr	r3, [sp, #12]
 800cde2:	3307      	adds	r3, #7
 800cde4:	f023 0307 	bic.w	r3, r3, #7
 800cde8:	3308      	adds	r3, #8
 800cdea:	9303      	str	r3, [sp, #12]
 800cdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdee:	4433      	add	r3, r6
 800cdf0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf2:	e768      	b.n	800ccc6 <_svfiprintf_r+0x4e>
 800cdf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	2001      	movs	r0, #1
 800cdfc:	e7a6      	b.n	800cd4c <_svfiprintf_r+0xd4>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	3401      	adds	r4, #1
 800ce02:	9305      	str	r3, [sp, #20]
 800ce04:	4619      	mov	r1, r3
 800ce06:	f04f 0c0a 	mov.w	ip, #10
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce10:	3a30      	subs	r2, #48	; 0x30
 800ce12:	2a09      	cmp	r2, #9
 800ce14:	d903      	bls.n	800ce1e <_svfiprintf_r+0x1a6>
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0c6      	beq.n	800cda8 <_svfiprintf_r+0x130>
 800ce1a:	9105      	str	r1, [sp, #20]
 800ce1c:	e7c4      	b.n	800cda8 <_svfiprintf_r+0x130>
 800ce1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce22:	4604      	mov	r4, r0
 800ce24:	2301      	movs	r3, #1
 800ce26:	e7f0      	b.n	800ce0a <_svfiprintf_r+0x192>
 800ce28:	ab03      	add	r3, sp, #12
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	462a      	mov	r2, r5
 800ce2e:	4b0f      	ldr	r3, [pc, #60]	; (800ce6c <_svfiprintf_r+0x1f4>)
 800ce30:	a904      	add	r1, sp, #16
 800ce32:	4638      	mov	r0, r7
 800ce34:	f7fd fdca 	bl	800a9cc <_printf_float>
 800ce38:	1c42      	adds	r2, r0, #1
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	d1d6      	bne.n	800cdec <_svfiprintf_r+0x174>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	065b      	lsls	r3, r3, #25
 800ce42:	f53f af2d 	bmi.w	800cca0 <_svfiprintf_r+0x28>
 800ce46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce48:	b01d      	add	sp, #116	; 0x74
 800ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4e:	ab03      	add	r3, sp, #12
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	462a      	mov	r2, r5
 800ce54:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <_svfiprintf_r+0x1f4>)
 800ce56:	a904      	add	r1, sp, #16
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7fe f85b 	bl	800af14 <_printf_i>
 800ce5e:	e7eb      	b.n	800ce38 <_svfiprintf_r+0x1c0>
 800ce60:	0800e9ac 	.word	0x0800e9ac
 800ce64:	0800e9b6 	.word	0x0800e9b6
 800ce68:	0800a9cd 	.word	0x0800a9cd
 800ce6c:	0800cbc3 	.word	0x0800cbc3
 800ce70:	0800e9b2 	.word	0x0800e9b2

0800ce74 <__sflush_r>:
 800ce74:	898a      	ldrh	r2, [r1, #12]
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	0710      	lsls	r0, r2, #28
 800ce7e:	460c      	mov	r4, r1
 800ce80:	d458      	bmi.n	800cf34 <__sflush_r+0xc0>
 800ce82:	684b      	ldr	r3, [r1, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	dc05      	bgt.n	800ce94 <__sflush_r+0x20>
 800ce88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dc02      	bgt.n	800ce94 <__sflush_r+0x20>
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce96:	2e00      	cmp	r6, #0
 800ce98:	d0f9      	beq.n	800ce8e <__sflush_r+0x1a>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cea0:	682f      	ldr	r7, [r5, #0]
 800cea2:	6a21      	ldr	r1, [r4, #32]
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	d032      	beq.n	800cf0e <__sflush_r+0x9a>
 800cea8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	075a      	lsls	r2, r3, #29
 800ceae:	d505      	bpl.n	800cebc <__sflush_r+0x48>
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	1ac0      	subs	r0, r0, r3
 800ceb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceb6:	b10b      	cbz	r3, 800cebc <__sflush_r+0x48>
 800ceb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ceba:	1ac0      	subs	r0, r0, r3
 800cebc:	2300      	movs	r3, #0
 800cebe:	4602      	mov	r2, r0
 800cec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cec2:	6a21      	ldr	r1, [r4, #32]
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b0      	blx	r6
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	89a3      	ldrh	r3, [r4, #12]
 800cecc:	d106      	bne.n	800cedc <__sflush_r+0x68>
 800cece:	6829      	ldr	r1, [r5, #0]
 800ced0:	291d      	cmp	r1, #29
 800ced2:	d82b      	bhi.n	800cf2c <__sflush_r+0xb8>
 800ced4:	4a29      	ldr	r2, [pc, #164]	; (800cf7c <__sflush_r+0x108>)
 800ced6:	410a      	asrs	r2, r1
 800ced8:	07d6      	lsls	r6, r2, #31
 800ceda:	d427      	bmi.n	800cf2c <__sflush_r+0xb8>
 800cedc:	2200      	movs	r2, #0
 800cede:	6062      	str	r2, [r4, #4]
 800cee0:	04d9      	lsls	r1, r3, #19
 800cee2:	6922      	ldr	r2, [r4, #16]
 800cee4:	6022      	str	r2, [r4, #0]
 800cee6:	d504      	bpl.n	800cef2 <__sflush_r+0x7e>
 800cee8:	1c42      	adds	r2, r0, #1
 800ceea:	d101      	bne.n	800cef0 <__sflush_r+0x7c>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b903      	cbnz	r3, 800cef2 <__sflush_r+0x7e>
 800cef0:	6560      	str	r0, [r4, #84]	; 0x54
 800cef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cef4:	602f      	str	r7, [r5, #0]
 800cef6:	2900      	cmp	r1, #0
 800cef8:	d0c9      	beq.n	800ce8e <__sflush_r+0x1a>
 800cefa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cefe:	4299      	cmp	r1, r3
 800cf00:	d002      	beq.n	800cf08 <__sflush_r+0x94>
 800cf02:	4628      	mov	r0, r5
 800cf04:	f7ff f9c2 	bl	800c28c <_free_r>
 800cf08:	2000      	movs	r0, #0
 800cf0a:	6360      	str	r0, [r4, #52]	; 0x34
 800cf0c:	e7c0      	b.n	800ce90 <__sflush_r+0x1c>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	4628      	mov	r0, r5
 800cf12:	47b0      	blx	r6
 800cf14:	1c41      	adds	r1, r0, #1
 800cf16:	d1c8      	bne.n	800ceaa <__sflush_r+0x36>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d0c5      	beq.n	800ceaa <__sflush_r+0x36>
 800cf1e:	2b1d      	cmp	r3, #29
 800cf20:	d001      	beq.n	800cf26 <__sflush_r+0xb2>
 800cf22:	2b16      	cmp	r3, #22
 800cf24:	d101      	bne.n	800cf2a <__sflush_r+0xb6>
 800cf26:	602f      	str	r7, [r5, #0]
 800cf28:	e7b1      	b.n	800ce8e <__sflush_r+0x1a>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	e7ad      	b.n	800ce90 <__sflush_r+0x1c>
 800cf34:	690f      	ldr	r7, [r1, #16]
 800cf36:	2f00      	cmp	r7, #0
 800cf38:	d0a9      	beq.n	800ce8e <__sflush_r+0x1a>
 800cf3a:	0793      	lsls	r3, r2, #30
 800cf3c:	680e      	ldr	r6, [r1, #0]
 800cf3e:	bf08      	it	eq
 800cf40:	694b      	ldreq	r3, [r1, #20]
 800cf42:	600f      	str	r7, [r1, #0]
 800cf44:	bf18      	it	ne
 800cf46:	2300      	movne	r3, #0
 800cf48:	eba6 0807 	sub.w	r8, r6, r7
 800cf4c:	608b      	str	r3, [r1, #8]
 800cf4e:	f1b8 0f00 	cmp.w	r8, #0
 800cf52:	dd9c      	ble.n	800ce8e <__sflush_r+0x1a>
 800cf54:	6a21      	ldr	r1, [r4, #32]
 800cf56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf58:	4643      	mov	r3, r8
 800cf5a:	463a      	mov	r2, r7
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b0      	blx	r6
 800cf60:	2800      	cmp	r0, #0
 800cf62:	dc06      	bgt.n	800cf72 <__sflush_r+0xfe>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf70:	e78e      	b.n	800ce90 <__sflush_r+0x1c>
 800cf72:	4407      	add	r7, r0
 800cf74:	eba8 0800 	sub.w	r8, r8, r0
 800cf78:	e7e9      	b.n	800cf4e <__sflush_r+0xda>
 800cf7a:	bf00      	nop
 800cf7c:	dfbffffe 	.word	0xdfbffffe

0800cf80 <_fflush_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	690b      	ldr	r3, [r1, #16]
 800cf84:	4605      	mov	r5, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	b913      	cbnz	r3, 800cf90 <_fflush_r+0x10>
 800cf8a:	2500      	movs	r5, #0
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	bd38      	pop	{r3, r4, r5, pc}
 800cf90:	b118      	cbz	r0, 800cf9a <_fflush_r+0x1a>
 800cf92:	6a03      	ldr	r3, [r0, #32]
 800cf94:	b90b      	cbnz	r3, 800cf9a <_fflush_r+0x1a>
 800cf96:	f7fe f96b 	bl	800b270 <__sinit>
 800cf9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0f3      	beq.n	800cf8a <_fflush_r+0xa>
 800cfa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfa4:	07d0      	lsls	r0, r2, #31
 800cfa6:	d404      	bmi.n	800cfb2 <_fflush_r+0x32>
 800cfa8:	0599      	lsls	r1, r3, #22
 800cfaa:	d402      	bmi.n	800cfb2 <_fflush_r+0x32>
 800cfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfae:	f7fe fae0 	bl	800b572 <__retarget_lock_acquire_recursive>
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f7ff ff5d 	bl	800ce74 <__sflush_r>
 800cfba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfbc:	07da      	lsls	r2, r3, #31
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	d4e4      	bmi.n	800cf8c <_fflush_r+0xc>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	059b      	lsls	r3, r3, #22
 800cfc6:	d4e1      	bmi.n	800cf8c <_fflush_r+0xc>
 800cfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfca:	f7fe fad3 	bl	800b574 <__retarget_lock_release_recursive>
 800cfce:	e7dd      	b.n	800cf8c <_fflush_r+0xc>

0800cfd0 <memmove>:
 800cfd0:	4288      	cmp	r0, r1
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	eb01 0402 	add.w	r4, r1, r2
 800cfd8:	d902      	bls.n	800cfe0 <memmove+0x10>
 800cfda:	4284      	cmp	r4, r0
 800cfdc:	4623      	mov	r3, r4
 800cfde:	d807      	bhi.n	800cff0 <memmove+0x20>
 800cfe0:	1e43      	subs	r3, r0, #1
 800cfe2:	42a1      	cmp	r1, r4
 800cfe4:	d008      	beq.n	800cff8 <memmove+0x28>
 800cfe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfee:	e7f8      	b.n	800cfe2 <memmove+0x12>
 800cff0:	4402      	add	r2, r0
 800cff2:	4601      	mov	r1, r0
 800cff4:	428a      	cmp	r2, r1
 800cff6:	d100      	bne.n	800cffa <memmove+0x2a>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d002:	e7f7      	b.n	800cff4 <memmove+0x24>

0800d004 <_sbrk_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d06      	ldr	r5, [pc, #24]	; (800d020 <_sbrk_r+0x1c>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	602b      	str	r3, [r5, #0]
 800d010:	f7f6 fc5e 	bl	80038d0 <_sbrk>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	d102      	bne.n	800d01e <_sbrk_r+0x1a>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	b103      	cbz	r3, 800d01e <_sbrk_r+0x1a>
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	2000531c 	.word	0x2000531c

0800d024 <__assert_func>:
 800d024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d026:	4614      	mov	r4, r2
 800d028:	461a      	mov	r2, r3
 800d02a:	4b09      	ldr	r3, [pc, #36]	; (800d050 <__assert_func+0x2c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4605      	mov	r5, r0
 800d030:	68d8      	ldr	r0, [r3, #12]
 800d032:	b14c      	cbz	r4, 800d048 <__assert_func+0x24>
 800d034:	4b07      	ldr	r3, [pc, #28]	; (800d054 <__assert_func+0x30>)
 800d036:	9100      	str	r1, [sp, #0]
 800d038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d03c:	4906      	ldr	r1, [pc, #24]	; (800d058 <__assert_func+0x34>)
 800d03e:	462b      	mov	r3, r5
 800d040:	f000 f854 	bl	800d0ec <fiprintf>
 800d044:	f000 f864 	bl	800d110 <abort>
 800d048:	4b04      	ldr	r3, [pc, #16]	; (800d05c <__assert_func+0x38>)
 800d04a:	461c      	mov	r4, r3
 800d04c:	e7f3      	b.n	800d036 <__assert_func+0x12>
 800d04e:	bf00      	nop
 800d050:	200001dc 	.word	0x200001dc
 800d054:	0800e9bd 	.word	0x0800e9bd
 800d058:	0800e9ca 	.word	0x0800e9ca
 800d05c:	0800e9f8 	.word	0x0800e9f8

0800d060 <_calloc_r>:
 800d060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d062:	fba1 2402 	umull	r2, r4, r1, r2
 800d066:	b94c      	cbnz	r4, 800d07c <_calloc_r+0x1c>
 800d068:	4611      	mov	r1, r2
 800d06a:	9201      	str	r2, [sp, #4]
 800d06c:	f7ff f982 	bl	800c374 <_malloc_r>
 800d070:	9a01      	ldr	r2, [sp, #4]
 800d072:	4605      	mov	r5, r0
 800d074:	b930      	cbnz	r0, 800d084 <_calloc_r+0x24>
 800d076:	4628      	mov	r0, r5
 800d078:	b003      	add	sp, #12
 800d07a:	bd30      	pop	{r4, r5, pc}
 800d07c:	220c      	movs	r2, #12
 800d07e:	6002      	str	r2, [r0, #0]
 800d080:	2500      	movs	r5, #0
 800d082:	e7f8      	b.n	800d076 <_calloc_r+0x16>
 800d084:	4621      	mov	r1, r4
 800d086:	f7fe f9a0 	bl	800b3ca <memset>
 800d08a:	e7f4      	b.n	800d076 <_calloc_r+0x16>

0800d08c <_realloc_r>:
 800d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d090:	4680      	mov	r8, r0
 800d092:	4614      	mov	r4, r2
 800d094:	460e      	mov	r6, r1
 800d096:	b921      	cbnz	r1, 800d0a2 <_realloc_r+0x16>
 800d098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d09c:	4611      	mov	r1, r2
 800d09e:	f7ff b969 	b.w	800c374 <_malloc_r>
 800d0a2:	b92a      	cbnz	r2, 800d0b0 <_realloc_r+0x24>
 800d0a4:	f7ff f8f2 	bl	800c28c <_free_r>
 800d0a8:	4625      	mov	r5, r4
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	f000 f835 	bl	800d11e <_malloc_usable_size_r>
 800d0b4:	4284      	cmp	r4, r0
 800d0b6:	4607      	mov	r7, r0
 800d0b8:	d802      	bhi.n	800d0c0 <_realloc_r+0x34>
 800d0ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0be:	d812      	bhi.n	800d0e6 <_realloc_r+0x5a>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	f7ff f956 	bl	800c374 <_malloc_r>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d0ed      	beq.n	800d0aa <_realloc_r+0x1e>
 800d0ce:	42bc      	cmp	r4, r7
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	4631      	mov	r1, r6
 800d0d4:	bf28      	it	cs
 800d0d6:	463a      	movcs	r2, r7
 800d0d8:	f7fe fa4d 	bl	800b576 <memcpy>
 800d0dc:	4631      	mov	r1, r6
 800d0de:	4640      	mov	r0, r8
 800d0e0:	f7ff f8d4 	bl	800c28c <_free_r>
 800d0e4:	e7e1      	b.n	800d0aa <_realloc_r+0x1e>
 800d0e6:	4635      	mov	r5, r6
 800d0e8:	e7df      	b.n	800d0aa <_realloc_r+0x1e>
	...

0800d0ec <fiprintf>:
 800d0ec:	b40e      	push	{r1, r2, r3}
 800d0ee:	b503      	push	{r0, r1, lr}
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	ab03      	add	r3, sp, #12
 800d0f4:	4805      	ldr	r0, [pc, #20]	; (800d10c <fiprintf+0x20>)
 800d0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0fa:	6800      	ldr	r0, [r0, #0]
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	f000 f83f 	bl	800d180 <_vfiprintf_r>
 800d102:	b002      	add	sp, #8
 800d104:	f85d eb04 	ldr.w	lr, [sp], #4
 800d108:	b003      	add	sp, #12
 800d10a:	4770      	bx	lr
 800d10c:	200001dc 	.word	0x200001dc

0800d110 <abort>:
 800d110:	b508      	push	{r3, lr}
 800d112:	2006      	movs	r0, #6
 800d114:	f000 fa0c 	bl	800d530 <raise>
 800d118:	2001      	movs	r0, #1
 800d11a:	f7f6 fb61 	bl	80037e0 <_exit>

0800d11e <_malloc_usable_size_r>:
 800d11e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d122:	1f18      	subs	r0, r3, #4
 800d124:	2b00      	cmp	r3, #0
 800d126:	bfbc      	itt	lt
 800d128:	580b      	ldrlt	r3, [r1, r0]
 800d12a:	18c0      	addlt	r0, r0, r3
 800d12c:	4770      	bx	lr

0800d12e <__sfputc_r>:
 800d12e:	6893      	ldr	r3, [r2, #8]
 800d130:	3b01      	subs	r3, #1
 800d132:	2b00      	cmp	r3, #0
 800d134:	b410      	push	{r4}
 800d136:	6093      	str	r3, [r2, #8]
 800d138:	da08      	bge.n	800d14c <__sfputc_r+0x1e>
 800d13a:	6994      	ldr	r4, [r2, #24]
 800d13c:	42a3      	cmp	r3, r4
 800d13e:	db01      	blt.n	800d144 <__sfputc_r+0x16>
 800d140:	290a      	cmp	r1, #10
 800d142:	d103      	bne.n	800d14c <__sfputc_r+0x1e>
 800d144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d148:	f000 b934 	b.w	800d3b4 <__swbuf_r>
 800d14c:	6813      	ldr	r3, [r2, #0]
 800d14e:	1c58      	adds	r0, r3, #1
 800d150:	6010      	str	r0, [r2, #0]
 800d152:	7019      	strb	r1, [r3, #0]
 800d154:	4608      	mov	r0, r1
 800d156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <__sfputs_r>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	4606      	mov	r6, r0
 800d160:	460f      	mov	r7, r1
 800d162:	4614      	mov	r4, r2
 800d164:	18d5      	adds	r5, r2, r3
 800d166:	42ac      	cmp	r4, r5
 800d168:	d101      	bne.n	800d16e <__sfputs_r+0x12>
 800d16a:	2000      	movs	r0, #0
 800d16c:	e007      	b.n	800d17e <__sfputs_r+0x22>
 800d16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d172:	463a      	mov	r2, r7
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff ffda 	bl	800d12e <__sfputc_r>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	d1f3      	bne.n	800d166 <__sfputs_r+0xa>
 800d17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d180 <_vfiprintf_r>:
 800d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	460d      	mov	r5, r1
 800d186:	b09d      	sub	sp, #116	; 0x74
 800d188:	4614      	mov	r4, r2
 800d18a:	4698      	mov	r8, r3
 800d18c:	4606      	mov	r6, r0
 800d18e:	b118      	cbz	r0, 800d198 <_vfiprintf_r+0x18>
 800d190:	6a03      	ldr	r3, [r0, #32]
 800d192:	b90b      	cbnz	r3, 800d198 <_vfiprintf_r+0x18>
 800d194:	f7fe f86c 	bl	800b270 <__sinit>
 800d198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d19a:	07d9      	lsls	r1, r3, #31
 800d19c:	d405      	bmi.n	800d1aa <_vfiprintf_r+0x2a>
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	059a      	lsls	r2, r3, #22
 800d1a2:	d402      	bmi.n	800d1aa <_vfiprintf_r+0x2a>
 800d1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1a6:	f7fe f9e4 	bl	800b572 <__retarget_lock_acquire_recursive>
 800d1aa:	89ab      	ldrh	r3, [r5, #12]
 800d1ac:	071b      	lsls	r3, r3, #28
 800d1ae:	d501      	bpl.n	800d1b4 <_vfiprintf_r+0x34>
 800d1b0:	692b      	ldr	r3, [r5, #16]
 800d1b2:	b99b      	cbnz	r3, 800d1dc <_vfiprintf_r+0x5c>
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f000 f93a 	bl	800d430 <__swsetup_r>
 800d1bc:	b170      	cbz	r0, 800d1dc <_vfiprintf_r+0x5c>
 800d1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c0:	07dc      	lsls	r4, r3, #31
 800d1c2:	d504      	bpl.n	800d1ce <_vfiprintf_r+0x4e>
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c8:	b01d      	add	sp, #116	; 0x74
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	0598      	lsls	r0, r3, #22
 800d1d2:	d4f7      	bmi.n	800d1c4 <_vfiprintf_r+0x44>
 800d1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d6:	f7fe f9cd 	bl	800b574 <__retarget_lock_release_recursive>
 800d1da:	e7f3      	b.n	800d1c4 <_vfiprintf_r+0x44>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e0:	2320      	movs	r3, #32
 800d1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ea:	2330      	movs	r3, #48	; 0x30
 800d1ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d3a0 <_vfiprintf_r+0x220>
 800d1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1f4:	f04f 0901 	mov.w	r9, #1
 800d1f8:	4623      	mov	r3, r4
 800d1fa:	469a      	mov	sl, r3
 800d1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d200:	b10a      	cbz	r2, 800d206 <_vfiprintf_r+0x86>
 800d202:	2a25      	cmp	r2, #37	; 0x25
 800d204:	d1f9      	bne.n	800d1fa <_vfiprintf_r+0x7a>
 800d206:	ebba 0b04 	subs.w	fp, sl, r4
 800d20a:	d00b      	beq.n	800d224 <_vfiprintf_r+0xa4>
 800d20c:	465b      	mov	r3, fp
 800d20e:	4622      	mov	r2, r4
 800d210:	4629      	mov	r1, r5
 800d212:	4630      	mov	r0, r6
 800d214:	f7ff ffa2 	bl	800d15c <__sfputs_r>
 800d218:	3001      	adds	r0, #1
 800d21a:	f000 80a9 	beq.w	800d370 <_vfiprintf_r+0x1f0>
 800d21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d220:	445a      	add	r2, fp
 800d222:	9209      	str	r2, [sp, #36]	; 0x24
 800d224:	f89a 3000 	ldrb.w	r3, [sl]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 80a1 	beq.w	800d370 <_vfiprintf_r+0x1f0>
 800d22e:	2300      	movs	r3, #0
 800d230:	f04f 32ff 	mov.w	r2, #4294967295
 800d234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d238:	f10a 0a01 	add.w	sl, sl, #1
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	9307      	str	r3, [sp, #28]
 800d240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d244:	931a      	str	r3, [sp, #104]	; 0x68
 800d246:	4654      	mov	r4, sl
 800d248:	2205      	movs	r2, #5
 800d24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24e:	4854      	ldr	r0, [pc, #336]	; (800d3a0 <_vfiprintf_r+0x220>)
 800d250:	f7f2 ffde 	bl	8000210 <memchr>
 800d254:	9a04      	ldr	r2, [sp, #16]
 800d256:	b9d8      	cbnz	r0, 800d290 <_vfiprintf_r+0x110>
 800d258:	06d1      	lsls	r1, r2, #27
 800d25a:	bf44      	itt	mi
 800d25c:	2320      	movmi	r3, #32
 800d25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d262:	0713      	lsls	r3, r2, #28
 800d264:	bf44      	itt	mi
 800d266:	232b      	movmi	r3, #43	; 0x2b
 800d268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26c:	f89a 3000 	ldrb.w	r3, [sl]
 800d270:	2b2a      	cmp	r3, #42	; 0x2a
 800d272:	d015      	beq.n	800d2a0 <_vfiprintf_r+0x120>
 800d274:	9a07      	ldr	r2, [sp, #28]
 800d276:	4654      	mov	r4, sl
 800d278:	2000      	movs	r0, #0
 800d27a:	f04f 0c0a 	mov.w	ip, #10
 800d27e:	4621      	mov	r1, r4
 800d280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d284:	3b30      	subs	r3, #48	; 0x30
 800d286:	2b09      	cmp	r3, #9
 800d288:	d94d      	bls.n	800d326 <_vfiprintf_r+0x1a6>
 800d28a:	b1b0      	cbz	r0, 800d2ba <_vfiprintf_r+0x13a>
 800d28c:	9207      	str	r2, [sp, #28]
 800d28e:	e014      	b.n	800d2ba <_vfiprintf_r+0x13a>
 800d290:	eba0 0308 	sub.w	r3, r0, r8
 800d294:	fa09 f303 	lsl.w	r3, r9, r3
 800d298:	4313      	orrs	r3, r2
 800d29a:	9304      	str	r3, [sp, #16]
 800d29c:	46a2      	mov	sl, r4
 800d29e:	e7d2      	b.n	800d246 <_vfiprintf_r+0xc6>
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	1d19      	adds	r1, r3, #4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	9103      	str	r1, [sp, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	bfbb      	ittet	lt
 800d2ac:	425b      	neglt	r3, r3
 800d2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d2b2:	9307      	strge	r3, [sp, #28]
 800d2b4:	9307      	strlt	r3, [sp, #28]
 800d2b6:	bfb8      	it	lt
 800d2b8:	9204      	strlt	r2, [sp, #16]
 800d2ba:	7823      	ldrb	r3, [r4, #0]
 800d2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2be:	d10c      	bne.n	800d2da <_vfiprintf_r+0x15a>
 800d2c0:	7863      	ldrb	r3, [r4, #1]
 800d2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c4:	d134      	bne.n	800d330 <_vfiprintf_r+0x1b0>
 800d2c6:	9b03      	ldr	r3, [sp, #12]
 800d2c8:	1d1a      	adds	r2, r3, #4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	9203      	str	r2, [sp, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	bfb8      	it	lt
 800d2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2d6:	3402      	adds	r4, #2
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d3b0 <_vfiprintf_r+0x230>
 800d2de:	7821      	ldrb	r1, [r4, #0]
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	f7f2 ff94 	bl	8000210 <memchr>
 800d2e8:	b138      	cbz	r0, 800d2fa <_vfiprintf_r+0x17a>
 800d2ea:	9b04      	ldr	r3, [sp, #16]
 800d2ec:	eba0 000a 	sub.w	r0, r0, sl
 800d2f0:	2240      	movs	r2, #64	; 0x40
 800d2f2:	4082      	lsls	r2, r0
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	3401      	adds	r4, #1
 800d2f8:	9304      	str	r3, [sp, #16]
 800d2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2fe:	4829      	ldr	r0, [pc, #164]	; (800d3a4 <_vfiprintf_r+0x224>)
 800d300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d304:	2206      	movs	r2, #6
 800d306:	f7f2 ff83 	bl	8000210 <memchr>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d03f      	beq.n	800d38e <_vfiprintf_r+0x20e>
 800d30e:	4b26      	ldr	r3, [pc, #152]	; (800d3a8 <_vfiprintf_r+0x228>)
 800d310:	bb1b      	cbnz	r3, 800d35a <_vfiprintf_r+0x1da>
 800d312:	9b03      	ldr	r3, [sp, #12]
 800d314:	3307      	adds	r3, #7
 800d316:	f023 0307 	bic.w	r3, r3, #7
 800d31a:	3308      	adds	r3, #8
 800d31c:	9303      	str	r3, [sp, #12]
 800d31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d320:	443b      	add	r3, r7
 800d322:	9309      	str	r3, [sp, #36]	; 0x24
 800d324:	e768      	b.n	800d1f8 <_vfiprintf_r+0x78>
 800d326:	fb0c 3202 	mla	r2, ip, r2, r3
 800d32a:	460c      	mov	r4, r1
 800d32c:	2001      	movs	r0, #1
 800d32e:	e7a6      	b.n	800d27e <_vfiprintf_r+0xfe>
 800d330:	2300      	movs	r3, #0
 800d332:	3401      	adds	r4, #1
 800d334:	9305      	str	r3, [sp, #20]
 800d336:	4619      	mov	r1, r3
 800d338:	f04f 0c0a 	mov.w	ip, #10
 800d33c:	4620      	mov	r0, r4
 800d33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d342:	3a30      	subs	r2, #48	; 0x30
 800d344:	2a09      	cmp	r2, #9
 800d346:	d903      	bls.n	800d350 <_vfiprintf_r+0x1d0>
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0c6      	beq.n	800d2da <_vfiprintf_r+0x15a>
 800d34c:	9105      	str	r1, [sp, #20]
 800d34e:	e7c4      	b.n	800d2da <_vfiprintf_r+0x15a>
 800d350:	fb0c 2101 	mla	r1, ip, r1, r2
 800d354:	4604      	mov	r4, r0
 800d356:	2301      	movs	r3, #1
 800d358:	e7f0      	b.n	800d33c <_vfiprintf_r+0x1bc>
 800d35a:	ab03      	add	r3, sp, #12
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	462a      	mov	r2, r5
 800d360:	4b12      	ldr	r3, [pc, #72]	; (800d3ac <_vfiprintf_r+0x22c>)
 800d362:	a904      	add	r1, sp, #16
 800d364:	4630      	mov	r0, r6
 800d366:	f7fd fb31 	bl	800a9cc <_printf_float>
 800d36a:	4607      	mov	r7, r0
 800d36c:	1c78      	adds	r0, r7, #1
 800d36e:	d1d6      	bne.n	800d31e <_vfiprintf_r+0x19e>
 800d370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d372:	07d9      	lsls	r1, r3, #31
 800d374:	d405      	bmi.n	800d382 <_vfiprintf_r+0x202>
 800d376:	89ab      	ldrh	r3, [r5, #12]
 800d378:	059a      	lsls	r2, r3, #22
 800d37a:	d402      	bmi.n	800d382 <_vfiprintf_r+0x202>
 800d37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d37e:	f7fe f8f9 	bl	800b574 <__retarget_lock_release_recursive>
 800d382:	89ab      	ldrh	r3, [r5, #12]
 800d384:	065b      	lsls	r3, r3, #25
 800d386:	f53f af1d 	bmi.w	800d1c4 <_vfiprintf_r+0x44>
 800d38a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d38c:	e71c      	b.n	800d1c8 <_vfiprintf_r+0x48>
 800d38e:	ab03      	add	r3, sp, #12
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	462a      	mov	r2, r5
 800d394:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <_vfiprintf_r+0x22c>)
 800d396:	a904      	add	r1, sp, #16
 800d398:	4630      	mov	r0, r6
 800d39a:	f7fd fdbb 	bl	800af14 <_printf_i>
 800d39e:	e7e4      	b.n	800d36a <_vfiprintf_r+0x1ea>
 800d3a0:	0800e9ac 	.word	0x0800e9ac
 800d3a4:	0800e9b6 	.word	0x0800e9b6
 800d3a8:	0800a9cd 	.word	0x0800a9cd
 800d3ac:	0800d15d 	.word	0x0800d15d
 800d3b0:	0800e9b2 	.word	0x0800e9b2

0800d3b4 <__swbuf_r>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	460e      	mov	r6, r1
 800d3b8:	4614      	mov	r4, r2
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	b118      	cbz	r0, 800d3c6 <__swbuf_r+0x12>
 800d3be:	6a03      	ldr	r3, [r0, #32]
 800d3c0:	b90b      	cbnz	r3, 800d3c6 <__swbuf_r+0x12>
 800d3c2:	f7fd ff55 	bl	800b270 <__sinit>
 800d3c6:	69a3      	ldr	r3, [r4, #24]
 800d3c8:	60a3      	str	r3, [r4, #8]
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	071a      	lsls	r2, r3, #28
 800d3ce:	d525      	bpl.n	800d41c <__swbuf_r+0x68>
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	b31b      	cbz	r3, 800d41c <__swbuf_r+0x68>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	6922      	ldr	r2, [r4, #16]
 800d3d8:	1a98      	subs	r0, r3, r2
 800d3da:	6963      	ldr	r3, [r4, #20]
 800d3dc:	b2f6      	uxtb	r6, r6
 800d3de:	4283      	cmp	r3, r0
 800d3e0:	4637      	mov	r7, r6
 800d3e2:	dc04      	bgt.n	800d3ee <__swbuf_r+0x3a>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f7ff fdca 	bl	800cf80 <_fflush_r>
 800d3ec:	b9e0      	cbnz	r0, 800d428 <__swbuf_r+0x74>
 800d3ee:	68a3      	ldr	r3, [r4, #8]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	60a3      	str	r3, [r4, #8]
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	6022      	str	r2, [r4, #0]
 800d3fa:	701e      	strb	r6, [r3, #0]
 800d3fc:	6962      	ldr	r2, [r4, #20]
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	429a      	cmp	r2, r3
 800d402:	d004      	beq.n	800d40e <__swbuf_r+0x5a>
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	07db      	lsls	r3, r3, #31
 800d408:	d506      	bpl.n	800d418 <__swbuf_r+0x64>
 800d40a:	2e0a      	cmp	r6, #10
 800d40c:	d104      	bne.n	800d418 <__swbuf_r+0x64>
 800d40e:	4621      	mov	r1, r4
 800d410:	4628      	mov	r0, r5
 800d412:	f7ff fdb5 	bl	800cf80 <_fflush_r>
 800d416:	b938      	cbnz	r0, 800d428 <__swbuf_r+0x74>
 800d418:	4638      	mov	r0, r7
 800d41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d41c:	4621      	mov	r1, r4
 800d41e:	4628      	mov	r0, r5
 800d420:	f000 f806 	bl	800d430 <__swsetup_r>
 800d424:	2800      	cmp	r0, #0
 800d426:	d0d5      	beq.n	800d3d4 <__swbuf_r+0x20>
 800d428:	f04f 37ff 	mov.w	r7, #4294967295
 800d42c:	e7f4      	b.n	800d418 <__swbuf_r+0x64>
	...

0800d430 <__swsetup_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4b2a      	ldr	r3, [pc, #168]	; (800d4dc <__swsetup_r+0xac>)
 800d434:	4605      	mov	r5, r0
 800d436:	6818      	ldr	r0, [r3, #0]
 800d438:	460c      	mov	r4, r1
 800d43a:	b118      	cbz	r0, 800d444 <__swsetup_r+0x14>
 800d43c:	6a03      	ldr	r3, [r0, #32]
 800d43e:	b90b      	cbnz	r3, 800d444 <__swsetup_r+0x14>
 800d440:	f7fd ff16 	bl	800b270 <__sinit>
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d44a:	0718      	lsls	r0, r3, #28
 800d44c:	d422      	bmi.n	800d494 <__swsetup_r+0x64>
 800d44e:	06d9      	lsls	r1, r3, #27
 800d450:	d407      	bmi.n	800d462 <__swsetup_r+0x32>
 800d452:	2309      	movs	r3, #9
 800d454:	602b      	str	r3, [r5, #0]
 800d456:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d45a:	81a3      	strh	r3, [r4, #12]
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	e034      	b.n	800d4cc <__swsetup_r+0x9c>
 800d462:	0758      	lsls	r0, r3, #29
 800d464:	d512      	bpl.n	800d48c <__swsetup_r+0x5c>
 800d466:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d468:	b141      	cbz	r1, 800d47c <__swsetup_r+0x4c>
 800d46a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d46e:	4299      	cmp	r1, r3
 800d470:	d002      	beq.n	800d478 <__swsetup_r+0x48>
 800d472:	4628      	mov	r0, r5
 800d474:	f7fe ff0a 	bl	800c28c <_free_r>
 800d478:	2300      	movs	r3, #0
 800d47a:	6363      	str	r3, [r4, #52]	; 0x34
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	2300      	movs	r3, #0
 800d486:	6063      	str	r3, [r4, #4]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	f043 0308 	orr.w	r3, r3, #8
 800d492:	81a3      	strh	r3, [r4, #12]
 800d494:	6923      	ldr	r3, [r4, #16]
 800d496:	b94b      	cbnz	r3, 800d4ac <__swsetup_r+0x7c>
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d49e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4a2:	d003      	beq.n	800d4ac <__swsetup_r+0x7c>
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f000 f884 	bl	800d5b4 <__smakebuf_r>
 800d4ac:	89a0      	ldrh	r0, [r4, #12]
 800d4ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4b2:	f010 0301 	ands.w	r3, r0, #1
 800d4b6:	d00a      	beq.n	800d4ce <__swsetup_r+0x9e>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	60a3      	str	r3, [r4, #8]
 800d4bc:	6963      	ldr	r3, [r4, #20]
 800d4be:	425b      	negs	r3, r3
 800d4c0:	61a3      	str	r3, [r4, #24]
 800d4c2:	6923      	ldr	r3, [r4, #16]
 800d4c4:	b943      	cbnz	r3, 800d4d8 <__swsetup_r+0xa8>
 800d4c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4ca:	d1c4      	bne.n	800d456 <__swsetup_r+0x26>
 800d4cc:	bd38      	pop	{r3, r4, r5, pc}
 800d4ce:	0781      	lsls	r1, r0, #30
 800d4d0:	bf58      	it	pl
 800d4d2:	6963      	ldrpl	r3, [r4, #20]
 800d4d4:	60a3      	str	r3, [r4, #8]
 800d4d6:	e7f4      	b.n	800d4c2 <__swsetup_r+0x92>
 800d4d8:	2000      	movs	r0, #0
 800d4da:	e7f7      	b.n	800d4cc <__swsetup_r+0x9c>
 800d4dc:	200001dc 	.word	0x200001dc

0800d4e0 <_raise_r>:
 800d4e0:	291f      	cmp	r1, #31
 800d4e2:	b538      	push	{r3, r4, r5, lr}
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	460d      	mov	r5, r1
 800d4e8:	d904      	bls.n	800d4f4 <_raise_r+0x14>
 800d4ea:	2316      	movs	r3, #22
 800d4ec:	6003      	str	r3, [r0, #0]
 800d4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4f6:	b112      	cbz	r2, 800d4fe <_raise_r+0x1e>
 800d4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4fc:	b94b      	cbnz	r3, 800d512 <_raise_r+0x32>
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 f830 	bl	800d564 <_getpid_r>
 800d504:	462a      	mov	r2, r5
 800d506:	4601      	mov	r1, r0
 800d508:	4620      	mov	r0, r4
 800d50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d50e:	f000 b817 	b.w	800d540 <_kill_r>
 800d512:	2b01      	cmp	r3, #1
 800d514:	d00a      	beq.n	800d52c <_raise_r+0x4c>
 800d516:	1c59      	adds	r1, r3, #1
 800d518:	d103      	bne.n	800d522 <_raise_r+0x42>
 800d51a:	2316      	movs	r3, #22
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	2001      	movs	r0, #1
 800d520:	e7e7      	b.n	800d4f2 <_raise_r+0x12>
 800d522:	2400      	movs	r4, #0
 800d524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d528:	4628      	mov	r0, r5
 800d52a:	4798      	blx	r3
 800d52c:	2000      	movs	r0, #0
 800d52e:	e7e0      	b.n	800d4f2 <_raise_r+0x12>

0800d530 <raise>:
 800d530:	4b02      	ldr	r3, [pc, #8]	; (800d53c <raise+0xc>)
 800d532:	4601      	mov	r1, r0
 800d534:	6818      	ldr	r0, [r3, #0]
 800d536:	f7ff bfd3 	b.w	800d4e0 <_raise_r>
 800d53a:	bf00      	nop
 800d53c:	200001dc 	.word	0x200001dc

0800d540 <_kill_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4d07      	ldr	r5, [pc, #28]	; (800d560 <_kill_r+0x20>)
 800d544:	2300      	movs	r3, #0
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	4611      	mov	r1, r2
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	f7f6 f937 	bl	80037c0 <_kill>
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	d102      	bne.n	800d55c <_kill_r+0x1c>
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	b103      	cbz	r3, 800d55c <_kill_r+0x1c>
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	bd38      	pop	{r3, r4, r5, pc}
 800d55e:	bf00      	nop
 800d560:	2000531c 	.word	0x2000531c

0800d564 <_getpid_r>:
 800d564:	f7f6 b924 	b.w	80037b0 <_getpid>

0800d568 <__swhatbuf_r>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	460c      	mov	r4, r1
 800d56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d570:	2900      	cmp	r1, #0
 800d572:	b096      	sub	sp, #88	; 0x58
 800d574:	4615      	mov	r5, r2
 800d576:	461e      	mov	r6, r3
 800d578:	da0d      	bge.n	800d596 <__swhatbuf_r+0x2e>
 800d57a:	89a3      	ldrh	r3, [r4, #12]
 800d57c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d580:	f04f 0100 	mov.w	r1, #0
 800d584:	bf0c      	ite	eq
 800d586:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d58a:	2340      	movne	r3, #64	; 0x40
 800d58c:	2000      	movs	r0, #0
 800d58e:	6031      	str	r1, [r6, #0]
 800d590:	602b      	str	r3, [r5, #0]
 800d592:	b016      	add	sp, #88	; 0x58
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	466a      	mov	r2, sp
 800d598:	f000 f848 	bl	800d62c <_fstat_r>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	dbec      	blt.n	800d57a <__swhatbuf_r+0x12>
 800d5a0:	9901      	ldr	r1, [sp, #4]
 800d5a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5aa:	4259      	negs	r1, r3
 800d5ac:	4159      	adcs	r1, r3
 800d5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b2:	e7eb      	b.n	800d58c <__swhatbuf_r+0x24>

0800d5b4 <__smakebuf_r>:
 800d5b4:	898b      	ldrh	r3, [r1, #12]
 800d5b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5b8:	079d      	lsls	r5, r3, #30
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460c      	mov	r4, r1
 800d5be:	d507      	bpl.n	800d5d0 <__smakebuf_r+0x1c>
 800d5c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	6123      	str	r3, [r4, #16]
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	6163      	str	r3, [r4, #20]
 800d5cc:	b002      	add	sp, #8
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	ab01      	add	r3, sp, #4
 800d5d2:	466a      	mov	r2, sp
 800d5d4:	f7ff ffc8 	bl	800d568 <__swhatbuf_r>
 800d5d8:	9900      	ldr	r1, [sp, #0]
 800d5da:	4605      	mov	r5, r0
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f7fe fec9 	bl	800c374 <_malloc_r>
 800d5e2:	b948      	cbnz	r0, 800d5f8 <__smakebuf_r+0x44>
 800d5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e8:	059a      	lsls	r2, r3, #22
 800d5ea:	d4ef      	bmi.n	800d5cc <__smakebuf_r+0x18>
 800d5ec:	f023 0303 	bic.w	r3, r3, #3
 800d5f0:	f043 0302 	orr.w	r3, r3, #2
 800d5f4:	81a3      	strh	r3, [r4, #12]
 800d5f6:	e7e3      	b.n	800d5c0 <__smakebuf_r+0xc>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	6020      	str	r0, [r4, #0]
 800d5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	6163      	str	r3, [r4, #20]
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	6120      	str	r0, [r4, #16]
 800d60a:	b15b      	cbz	r3, 800d624 <__smakebuf_r+0x70>
 800d60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d610:	4630      	mov	r0, r6
 800d612:	f000 f81d 	bl	800d650 <_isatty_r>
 800d616:	b128      	cbz	r0, 800d624 <__smakebuf_r+0x70>
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	f023 0303 	bic.w	r3, r3, #3
 800d61e:	f043 0301 	orr.w	r3, r3, #1
 800d622:	81a3      	strh	r3, [r4, #12]
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	431d      	orrs	r5, r3
 800d628:	81a5      	strh	r5, [r4, #12]
 800d62a:	e7cf      	b.n	800d5cc <__smakebuf_r+0x18>

0800d62c <_fstat_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d07      	ldr	r5, [pc, #28]	; (800d64c <_fstat_r+0x20>)
 800d630:	2300      	movs	r3, #0
 800d632:	4604      	mov	r4, r0
 800d634:	4608      	mov	r0, r1
 800d636:	4611      	mov	r1, r2
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	f7f6 f920 	bl	800387e <_fstat>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	d102      	bne.n	800d648 <_fstat_r+0x1c>
 800d642:	682b      	ldr	r3, [r5, #0]
 800d644:	b103      	cbz	r3, 800d648 <_fstat_r+0x1c>
 800d646:	6023      	str	r3, [r4, #0]
 800d648:	bd38      	pop	{r3, r4, r5, pc}
 800d64a:	bf00      	nop
 800d64c:	2000531c 	.word	0x2000531c

0800d650 <_isatty_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d06      	ldr	r5, [pc, #24]	; (800d66c <_isatty_r+0x1c>)
 800d654:	2300      	movs	r3, #0
 800d656:	4604      	mov	r4, r0
 800d658:	4608      	mov	r0, r1
 800d65a:	602b      	str	r3, [r5, #0]
 800d65c:	f7f6 f91f 	bl	800389e <_isatty>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d102      	bne.n	800d66a <_isatty_r+0x1a>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b103      	cbz	r3, 800d66a <_isatty_r+0x1a>
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	2000531c 	.word	0x2000531c

0800d670 <pow>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	ed2d 8b02 	vpush	{d8}
 800d676:	eeb0 8a40 	vmov.f32	s16, s0
 800d67a:	eef0 8a60 	vmov.f32	s17, s1
 800d67e:	ec55 4b11 	vmov	r4, r5, d1
 800d682:	f000 f995 	bl	800d9b0 <__ieee754_pow>
 800d686:	4622      	mov	r2, r4
 800d688:	462b      	mov	r3, r5
 800d68a:	4620      	mov	r0, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	ec57 6b10 	vmov	r6, r7, d0
 800d692:	f7f3 fa6b 	bl	8000b6c <__aeabi_dcmpun>
 800d696:	2800      	cmp	r0, #0
 800d698:	d13b      	bne.n	800d712 <pow+0xa2>
 800d69a:	ec51 0b18 	vmov	r0, r1, d8
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f7f3 fa31 	bl	8000b08 <__aeabi_dcmpeq>
 800d6a6:	b1b8      	cbz	r0, 800d6d8 <pow+0x68>
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	f7f3 fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d146      	bne.n	800d746 <pow+0xd6>
 800d6b8:	ec45 4b10 	vmov	d0, r4, r5
 800d6bc:	f000 f848 	bl	800d750 <finite>
 800d6c0:	b338      	cbz	r0, 800d712 <pow+0xa2>
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7f3 fa27 	bl	8000b1c <__aeabi_dcmplt>
 800d6ce:	b300      	cbz	r0, 800d712 <pow+0xa2>
 800d6d0:	f7fd ff24 	bl	800b51c <__errno>
 800d6d4:	2322      	movs	r3, #34	; 0x22
 800d6d6:	e01b      	b.n	800d710 <pow+0xa0>
 800d6d8:	ec47 6b10 	vmov	d0, r6, r7
 800d6dc:	f000 f838 	bl	800d750 <finite>
 800d6e0:	b9e0      	cbnz	r0, 800d71c <pow+0xac>
 800d6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800d6e6:	eef0 0a68 	vmov.f32	s1, s17
 800d6ea:	f000 f831 	bl	800d750 <finite>
 800d6ee:	b1a8      	cbz	r0, 800d71c <pow+0xac>
 800d6f0:	ec45 4b10 	vmov	d0, r4, r5
 800d6f4:	f000 f82c 	bl	800d750 <finite>
 800d6f8:	b180      	cbz	r0, 800d71c <pow+0xac>
 800d6fa:	4632      	mov	r2, r6
 800d6fc:	463b      	mov	r3, r7
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	f7f3 fa33 	bl	8000b6c <__aeabi_dcmpun>
 800d706:	2800      	cmp	r0, #0
 800d708:	d0e2      	beq.n	800d6d0 <pow+0x60>
 800d70a:	f7fd ff07 	bl	800b51c <__errno>
 800d70e:	2321      	movs	r3, #33	; 0x21
 800d710:	6003      	str	r3, [r0, #0]
 800d712:	ecbd 8b02 	vpop	{d8}
 800d716:	ec47 6b10 	vmov	d0, r6, r7
 800d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d71c:	2200      	movs	r2, #0
 800d71e:	2300      	movs	r3, #0
 800d720:	4630      	mov	r0, r6
 800d722:	4639      	mov	r1, r7
 800d724:	f7f3 f9f0 	bl	8000b08 <__aeabi_dcmpeq>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d0f2      	beq.n	800d712 <pow+0xa2>
 800d72c:	eeb0 0a48 	vmov.f32	s0, s16
 800d730:	eef0 0a68 	vmov.f32	s1, s17
 800d734:	f000 f80c 	bl	800d750 <finite>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d0ea      	beq.n	800d712 <pow+0xa2>
 800d73c:	ec45 4b10 	vmov	d0, r4, r5
 800d740:	f000 f806 	bl	800d750 <finite>
 800d744:	e7c3      	b.n	800d6ce <pow+0x5e>
 800d746:	4f01      	ldr	r7, [pc, #4]	; (800d74c <pow+0xdc>)
 800d748:	2600      	movs	r6, #0
 800d74a:	e7e2      	b.n	800d712 <pow+0xa2>
 800d74c:	3ff00000 	.word	0x3ff00000

0800d750 <finite>:
 800d750:	b082      	sub	sp, #8
 800d752:	ed8d 0b00 	vstr	d0, [sp]
 800d756:	9801      	ldr	r0, [sp, #4]
 800d758:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d75c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d760:	0fc0      	lsrs	r0, r0, #31
 800d762:	b002      	add	sp, #8
 800d764:	4770      	bx	lr
	...

0800d768 <__ieee754_sqrt>:
 800d768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	ec55 4b10 	vmov	r4, r5, d0
 800d770:	4e67      	ldr	r6, [pc, #412]	; (800d910 <__ieee754_sqrt+0x1a8>)
 800d772:	43ae      	bics	r6, r5
 800d774:	ee10 0a10 	vmov	r0, s0
 800d778:	ee10 2a10 	vmov	r2, s0
 800d77c:	4629      	mov	r1, r5
 800d77e:	462b      	mov	r3, r5
 800d780:	d10d      	bne.n	800d79e <__ieee754_sqrt+0x36>
 800d782:	f7f2 ff59 	bl	8000638 <__aeabi_dmul>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f2 fd9d 	bl	80002cc <__adddf3>
 800d792:	4604      	mov	r4, r0
 800d794:	460d      	mov	r5, r1
 800d796:	ec45 4b10 	vmov	d0, r4, r5
 800d79a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	dc0b      	bgt.n	800d7ba <__ieee754_sqrt+0x52>
 800d7a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d7a6:	4326      	orrs	r6, r4
 800d7a8:	d0f5      	beq.n	800d796 <__ieee754_sqrt+0x2e>
 800d7aa:	b135      	cbz	r5, 800d7ba <__ieee754_sqrt+0x52>
 800d7ac:	f7f2 fd8c 	bl	80002c8 <__aeabi_dsub>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	f7f3 f86a 	bl	800088c <__aeabi_ddiv>
 800d7b8:	e7eb      	b.n	800d792 <__ieee754_sqrt+0x2a>
 800d7ba:	1509      	asrs	r1, r1, #20
 800d7bc:	f000 808d 	beq.w	800d8da <__ieee754_sqrt+0x172>
 800d7c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7c4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d7c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7cc:	07c9      	lsls	r1, r1, #31
 800d7ce:	bf5c      	itt	pl
 800d7d0:	005b      	lslpl	r3, r3, #1
 800d7d2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d7d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d7da:	bf58      	it	pl
 800d7dc:	0052      	lslpl	r2, r2, #1
 800d7de:	2500      	movs	r5, #0
 800d7e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d7e4:	1076      	asrs	r6, r6, #1
 800d7e6:	0052      	lsls	r2, r2, #1
 800d7e8:	f04f 0e16 	mov.w	lr, #22
 800d7ec:	46ac      	mov	ip, r5
 800d7ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7f2:	eb0c 0001 	add.w	r0, ip, r1
 800d7f6:	4298      	cmp	r0, r3
 800d7f8:	bfde      	ittt	le
 800d7fa:	1a1b      	suble	r3, r3, r0
 800d7fc:	eb00 0c01 	addle.w	ip, r0, r1
 800d800:	186d      	addle	r5, r5, r1
 800d802:	005b      	lsls	r3, r3, #1
 800d804:	f1be 0e01 	subs.w	lr, lr, #1
 800d808:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d80c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d810:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d814:	d1ed      	bne.n	800d7f2 <__ieee754_sqrt+0x8a>
 800d816:	4674      	mov	r4, lr
 800d818:	2720      	movs	r7, #32
 800d81a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d81e:	4563      	cmp	r3, ip
 800d820:	eb01 000e 	add.w	r0, r1, lr
 800d824:	dc02      	bgt.n	800d82c <__ieee754_sqrt+0xc4>
 800d826:	d113      	bne.n	800d850 <__ieee754_sqrt+0xe8>
 800d828:	4290      	cmp	r0, r2
 800d82a:	d811      	bhi.n	800d850 <__ieee754_sqrt+0xe8>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	eb00 0e01 	add.w	lr, r0, r1
 800d832:	da57      	bge.n	800d8e4 <__ieee754_sqrt+0x17c>
 800d834:	f1be 0f00 	cmp.w	lr, #0
 800d838:	db54      	blt.n	800d8e4 <__ieee754_sqrt+0x17c>
 800d83a:	f10c 0801 	add.w	r8, ip, #1
 800d83e:	eba3 030c 	sub.w	r3, r3, ip
 800d842:	4290      	cmp	r0, r2
 800d844:	bf88      	it	hi
 800d846:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d84a:	1a12      	subs	r2, r2, r0
 800d84c:	440c      	add	r4, r1
 800d84e:	46c4      	mov	ip, r8
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	3f01      	subs	r7, #1
 800d854:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d858:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d85c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d860:	d1dd      	bne.n	800d81e <__ieee754_sqrt+0xb6>
 800d862:	4313      	orrs	r3, r2
 800d864:	d01b      	beq.n	800d89e <__ieee754_sqrt+0x136>
 800d866:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d914 <__ieee754_sqrt+0x1ac>
 800d86a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d918 <__ieee754_sqrt+0x1b0>
 800d86e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d872:	e9db 2300 	ldrd	r2, r3, [fp]
 800d876:	f7f2 fd27 	bl	80002c8 <__aeabi_dsub>
 800d87a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	4640      	mov	r0, r8
 800d884:	4649      	mov	r1, r9
 800d886:	f7f3 f953 	bl	8000b30 <__aeabi_dcmple>
 800d88a:	b140      	cbz	r0, 800d89e <__ieee754_sqrt+0x136>
 800d88c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d890:	e9da 0100 	ldrd	r0, r1, [sl]
 800d894:	e9db 2300 	ldrd	r2, r3, [fp]
 800d898:	d126      	bne.n	800d8e8 <__ieee754_sqrt+0x180>
 800d89a:	3501      	adds	r5, #1
 800d89c:	463c      	mov	r4, r7
 800d89e:	106a      	asrs	r2, r5, #1
 800d8a0:	0863      	lsrs	r3, r4, #1
 800d8a2:	07e9      	lsls	r1, r5, #31
 800d8a4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d8a8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d8ac:	bf48      	it	mi
 800d8ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d8b2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d8b6:	461c      	mov	r4, r3
 800d8b8:	e76d      	b.n	800d796 <__ieee754_sqrt+0x2e>
 800d8ba:	0ad3      	lsrs	r3, r2, #11
 800d8bc:	3815      	subs	r0, #21
 800d8be:	0552      	lsls	r2, r2, #21
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0fa      	beq.n	800d8ba <__ieee754_sqrt+0x152>
 800d8c4:	02dc      	lsls	r4, r3, #11
 800d8c6:	d50a      	bpl.n	800d8de <__ieee754_sqrt+0x176>
 800d8c8:	f1c1 0420 	rsb	r4, r1, #32
 800d8cc:	fa22 f404 	lsr.w	r4, r2, r4
 800d8d0:	1e4d      	subs	r5, r1, #1
 800d8d2:	408a      	lsls	r2, r1
 800d8d4:	4323      	orrs	r3, r4
 800d8d6:	1b41      	subs	r1, r0, r5
 800d8d8:	e772      	b.n	800d7c0 <__ieee754_sqrt+0x58>
 800d8da:	4608      	mov	r0, r1
 800d8dc:	e7f0      	b.n	800d8c0 <__ieee754_sqrt+0x158>
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	3101      	adds	r1, #1
 800d8e2:	e7ef      	b.n	800d8c4 <__ieee754_sqrt+0x15c>
 800d8e4:	46e0      	mov	r8, ip
 800d8e6:	e7aa      	b.n	800d83e <__ieee754_sqrt+0xd6>
 800d8e8:	f7f2 fcf0 	bl	80002cc <__adddf3>
 800d8ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	f7f3 f910 	bl	8000b1c <__aeabi_dcmplt>
 800d8fc:	b120      	cbz	r0, 800d908 <__ieee754_sqrt+0x1a0>
 800d8fe:	1ca0      	adds	r0, r4, #2
 800d900:	bf08      	it	eq
 800d902:	3501      	addeq	r5, #1
 800d904:	3402      	adds	r4, #2
 800d906:	e7ca      	b.n	800d89e <__ieee754_sqrt+0x136>
 800d908:	3401      	adds	r4, #1
 800d90a:	f024 0401 	bic.w	r4, r4, #1
 800d90e:	e7c6      	b.n	800d89e <__ieee754_sqrt+0x136>
 800d910:	7ff00000 	.word	0x7ff00000
 800d914:	200001e0 	.word	0x200001e0
 800d918:	200001e8 	.word	0x200001e8

0800d91c <round>:
 800d91c:	ec53 2b10 	vmov	r2, r3, d0
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800d926:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800d92a:	2813      	cmp	r0, #19
 800d92c:	ee10 5a10 	vmov	r5, s0
 800d930:	4619      	mov	r1, r3
 800d932:	dc18      	bgt.n	800d966 <round+0x4a>
 800d934:	2800      	cmp	r0, #0
 800d936:	da09      	bge.n	800d94c <round+0x30>
 800d938:	3001      	adds	r0, #1
 800d93a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800d93e:	d103      	bne.n	800d948 <round+0x2c>
 800d940:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d944:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d948:	2300      	movs	r3, #0
 800d94a:	e02a      	b.n	800d9a2 <round+0x86>
 800d94c:	4c16      	ldr	r4, [pc, #88]	; (800d9a8 <round+0x8c>)
 800d94e:	4104      	asrs	r4, r0
 800d950:	ea03 0604 	and.w	r6, r3, r4
 800d954:	4316      	orrs	r6, r2
 800d956:	d011      	beq.n	800d97c <round+0x60>
 800d958:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d95c:	4103      	asrs	r3, r0
 800d95e:	440b      	add	r3, r1
 800d960:	ea23 0104 	bic.w	r1, r3, r4
 800d964:	e7f0      	b.n	800d948 <round+0x2c>
 800d966:	2833      	cmp	r0, #51	; 0x33
 800d968:	dd0b      	ble.n	800d982 <round+0x66>
 800d96a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d96e:	d105      	bne.n	800d97c <round+0x60>
 800d970:	ee10 0a10 	vmov	r0, s0
 800d974:	f7f2 fcaa 	bl	80002cc <__adddf3>
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	ec43 2b10 	vmov	d0, r2, r3
 800d980:	bd70      	pop	{r4, r5, r6, pc}
 800d982:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800d986:	f04f 34ff 	mov.w	r4, #4294967295
 800d98a:	40f4      	lsrs	r4, r6
 800d98c:	4214      	tst	r4, r2
 800d98e:	d0f5      	beq.n	800d97c <round+0x60>
 800d990:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800d994:	2301      	movs	r3, #1
 800d996:	4083      	lsls	r3, r0
 800d998:	195b      	adds	r3, r3, r5
 800d99a:	bf28      	it	cs
 800d99c:	3101      	addcs	r1, #1
 800d99e:	ea23 0304 	bic.w	r3, r3, r4
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	e7e9      	b.n	800d97c <round+0x60>
 800d9a8:	000fffff 	.word	0x000fffff
 800d9ac:	00000000 	.word	0x00000000

0800d9b0 <__ieee754_pow>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	ed2d 8b06 	vpush	{d8-d10}
 800d9b8:	b089      	sub	sp, #36	; 0x24
 800d9ba:	ed8d 1b00 	vstr	d1, [sp]
 800d9be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d9c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d9c6:	ea58 0102 	orrs.w	r1, r8, r2
 800d9ca:	ec57 6b10 	vmov	r6, r7, d0
 800d9ce:	d115      	bne.n	800d9fc <__ieee754_pow+0x4c>
 800d9d0:	19b3      	adds	r3, r6, r6
 800d9d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d9d6:	4152      	adcs	r2, r2
 800d9d8:	4299      	cmp	r1, r3
 800d9da:	4b89      	ldr	r3, [pc, #548]	; (800dc00 <__ieee754_pow+0x250>)
 800d9dc:	4193      	sbcs	r3, r2
 800d9de:	f080 84d1 	bcs.w	800e384 <__ieee754_pow+0x9d4>
 800d9e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	4639      	mov	r1, r7
 800d9ea:	f7f2 fc6f 	bl	80002cc <__adddf3>
 800d9ee:	ec41 0b10 	vmov	d0, r0, r1
 800d9f2:	b009      	add	sp, #36	; 0x24
 800d9f4:	ecbd 8b06 	vpop	{d8-d10}
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	4b81      	ldr	r3, [pc, #516]	; (800dc04 <__ieee754_pow+0x254>)
 800d9fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800da02:	429c      	cmp	r4, r3
 800da04:	ee10 aa10 	vmov	sl, s0
 800da08:	463d      	mov	r5, r7
 800da0a:	dc06      	bgt.n	800da1a <__ieee754_pow+0x6a>
 800da0c:	d101      	bne.n	800da12 <__ieee754_pow+0x62>
 800da0e:	2e00      	cmp	r6, #0
 800da10:	d1e7      	bne.n	800d9e2 <__ieee754_pow+0x32>
 800da12:	4598      	cmp	r8, r3
 800da14:	dc01      	bgt.n	800da1a <__ieee754_pow+0x6a>
 800da16:	d10f      	bne.n	800da38 <__ieee754_pow+0x88>
 800da18:	b172      	cbz	r2, 800da38 <__ieee754_pow+0x88>
 800da1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800da1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800da22:	ea55 050a 	orrs.w	r5, r5, sl
 800da26:	d1dc      	bne.n	800d9e2 <__ieee754_pow+0x32>
 800da28:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da2c:	18db      	adds	r3, r3, r3
 800da2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800da32:	4152      	adcs	r2, r2
 800da34:	429d      	cmp	r5, r3
 800da36:	e7d0      	b.n	800d9da <__ieee754_pow+0x2a>
 800da38:	2d00      	cmp	r5, #0
 800da3a:	da3b      	bge.n	800dab4 <__ieee754_pow+0x104>
 800da3c:	4b72      	ldr	r3, [pc, #456]	; (800dc08 <__ieee754_pow+0x258>)
 800da3e:	4598      	cmp	r8, r3
 800da40:	dc51      	bgt.n	800dae6 <__ieee754_pow+0x136>
 800da42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800da46:	4598      	cmp	r8, r3
 800da48:	f340 84ab 	ble.w	800e3a2 <__ieee754_pow+0x9f2>
 800da4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da54:	2b14      	cmp	r3, #20
 800da56:	dd0f      	ble.n	800da78 <__ieee754_pow+0xc8>
 800da58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800da5c:	fa22 f103 	lsr.w	r1, r2, r3
 800da60:	fa01 f303 	lsl.w	r3, r1, r3
 800da64:	4293      	cmp	r3, r2
 800da66:	f040 849c 	bne.w	800e3a2 <__ieee754_pow+0x9f2>
 800da6a:	f001 0101 	and.w	r1, r1, #1
 800da6e:	f1c1 0302 	rsb	r3, r1, #2
 800da72:	9304      	str	r3, [sp, #16]
 800da74:	b182      	cbz	r2, 800da98 <__ieee754_pow+0xe8>
 800da76:	e05f      	b.n	800db38 <__ieee754_pow+0x188>
 800da78:	2a00      	cmp	r2, #0
 800da7a:	d15b      	bne.n	800db34 <__ieee754_pow+0x184>
 800da7c:	f1c3 0314 	rsb	r3, r3, #20
 800da80:	fa48 f103 	asr.w	r1, r8, r3
 800da84:	fa01 f303 	lsl.w	r3, r1, r3
 800da88:	4543      	cmp	r3, r8
 800da8a:	f040 8487 	bne.w	800e39c <__ieee754_pow+0x9ec>
 800da8e:	f001 0101 	and.w	r1, r1, #1
 800da92:	f1c1 0302 	rsb	r3, r1, #2
 800da96:	9304      	str	r3, [sp, #16]
 800da98:	4b5c      	ldr	r3, [pc, #368]	; (800dc0c <__ieee754_pow+0x25c>)
 800da9a:	4598      	cmp	r8, r3
 800da9c:	d132      	bne.n	800db04 <__ieee754_pow+0x154>
 800da9e:	f1b9 0f00 	cmp.w	r9, #0
 800daa2:	f280 8477 	bge.w	800e394 <__ieee754_pow+0x9e4>
 800daa6:	4959      	ldr	r1, [pc, #356]	; (800dc0c <__ieee754_pow+0x25c>)
 800daa8:	4632      	mov	r2, r6
 800daaa:	463b      	mov	r3, r7
 800daac:	2000      	movs	r0, #0
 800daae:	f7f2 feed 	bl	800088c <__aeabi_ddiv>
 800dab2:	e79c      	b.n	800d9ee <__ieee754_pow+0x3e>
 800dab4:	2300      	movs	r3, #0
 800dab6:	9304      	str	r3, [sp, #16]
 800dab8:	2a00      	cmp	r2, #0
 800daba:	d13d      	bne.n	800db38 <__ieee754_pow+0x188>
 800dabc:	4b51      	ldr	r3, [pc, #324]	; (800dc04 <__ieee754_pow+0x254>)
 800dabe:	4598      	cmp	r8, r3
 800dac0:	d1ea      	bne.n	800da98 <__ieee754_pow+0xe8>
 800dac2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dac6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800daca:	ea53 030a 	orrs.w	r3, r3, sl
 800dace:	f000 8459 	beq.w	800e384 <__ieee754_pow+0x9d4>
 800dad2:	4b4f      	ldr	r3, [pc, #316]	; (800dc10 <__ieee754_pow+0x260>)
 800dad4:	429c      	cmp	r4, r3
 800dad6:	dd08      	ble.n	800daea <__ieee754_pow+0x13a>
 800dad8:	f1b9 0f00 	cmp.w	r9, #0
 800dadc:	f2c0 8456 	blt.w	800e38c <__ieee754_pow+0x9dc>
 800dae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dae4:	e783      	b.n	800d9ee <__ieee754_pow+0x3e>
 800dae6:	2302      	movs	r3, #2
 800dae8:	e7e5      	b.n	800dab6 <__ieee754_pow+0x106>
 800daea:	f1b9 0f00 	cmp.w	r9, #0
 800daee:	f04f 0000 	mov.w	r0, #0
 800daf2:	f04f 0100 	mov.w	r1, #0
 800daf6:	f6bf af7a 	bge.w	800d9ee <__ieee754_pow+0x3e>
 800dafa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dafe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db02:	e774      	b.n	800d9ee <__ieee754_pow+0x3e>
 800db04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800db08:	d106      	bne.n	800db18 <__ieee754_pow+0x168>
 800db0a:	4632      	mov	r2, r6
 800db0c:	463b      	mov	r3, r7
 800db0e:	4630      	mov	r0, r6
 800db10:	4639      	mov	r1, r7
 800db12:	f7f2 fd91 	bl	8000638 <__aeabi_dmul>
 800db16:	e76a      	b.n	800d9ee <__ieee754_pow+0x3e>
 800db18:	4b3e      	ldr	r3, [pc, #248]	; (800dc14 <__ieee754_pow+0x264>)
 800db1a:	4599      	cmp	r9, r3
 800db1c:	d10c      	bne.n	800db38 <__ieee754_pow+0x188>
 800db1e:	2d00      	cmp	r5, #0
 800db20:	db0a      	blt.n	800db38 <__ieee754_pow+0x188>
 800db22:	ec47 6b10 	vmov	d0, r6, r7
 800db26:	b009      	add	sp, #36	; 0x24
 800db28:	ecbd 8b06 	vpop	{d8-d10}
 800db2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db30:	f7ff be1a 	b.w	800d768 <__ieee754_sqrt>
 800db34:	2300      	movs	r3, #0
 800db36:	9304      	str	r3, [sp, #16]
 800db38:	ec47 6b10 	vmov	d0, r6, r7
 800db3c:	f000 fc62 	bl	800e404 <fabs>
 800db40:	ec51 0b10 	vmov	r0, r1, d0
 800db44:	f1ba 0f00 	cmp.w	sl, #0
 800db48:	d129      	bne.n	800db9e <__ieee754_pow+0x1ee>
 800db4a:	b124      	cbz	r4, 800db56 <__ieee754_pow+0x1a6>
 800db4c:	4b2f      	ldr	r3, [pc, #188]	; (800dc0c <__ieee754_pow+0x25c>)
 800db4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800db52:	429a      	cmp	r2, r3
 800db54:	d123      	bne.n	800db9e <__ieee754_pow+0x1ee>
 800db56:	f1b9 0f00 	cmp.w	r9, #0
 800db5a:	da05      	bge.n	800db68 <__ieee754_pow+0x1b8>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	2000      	movs	r0, #0
 800db62:	492a      	ldr	r1, [pc, #168]	; (800dc0c <__ieee754_pow+0x25c>)
 800db64:	f7f2 fe92 	bl	800088c <__aeabi_ddiv>
 800db68:	2d00      	cmp	r5, #0
 800db6a:	f6bf af40 	bge.w	800d9ee <__ieee754_pow+0x3e>
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800db74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db78:	431c      	orrs	r4, r3
 800db7a:	d108      	bne.n	800db8e <__ieee754_pow+0x1de>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4610      	mov	r0, r2
 800db82:	4619      	mov	r1, r3
 800db84:	f7f2 fba0 	bl	80002c8 <__aeabi_dsub>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	e78f      	b.n	800daae <__ieee754_pow+0xfe>
 800db8e:	9b04      	ldr	r3, [sp, #16]
 800db90:	2b01      	cmp	r3, #1
 800db92:	f47f af2c 	bne.w	800d9ee <__ieee754_pow+0x3e>
 800db96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db9a:	4619      	mov	r1, r3
 800db9c:	e727      	b.n	800d9ee <__ieee754_pow+0x3e>
 800db9e:	0feb      	lsrs	r3, r5, #31
 800dba0:	3b01      	subs	r3, #1
 800dba2:	9306      	str	r3, [sp, #24]
 800dba4:	9a06      	ldr	r2, [sp, #24]
 800dba6:	9b04      	ldr	r3, [sp, #16]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	d102      	bne.n	800dbb2 <__ieee754_pow+0x202>
 800dbac:	4632      	mov	r2, r6
 800dbae:	463b      	mov	r3, r7
 800dbb0:	e7e6      	b.n	800db80 <__ieee754_pow+0x1d0>
 800dbb2:	4b19      	ldr	r3, [pc, #100]	; (800dc18 <__ieee754_pow+0x268>)
 800dbb4:	4598      	cmp	r8, r3
 800dbb6:	f340 80fb 	ble.w	800ddb0 <__ieee754_pow+0x400>
 800dbba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dbbe:	4598      	cmp	r8, r3
 800dbc0:	4b13      	ldr	r3, [pc, #76]	; (800dc10 <__ieee754_pow+0x260>)
 800dbc2:	dd0c      	ble.n	800dbde <__ieee754_pow+0x22e>
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	dc0f      	bgt.n	800dbe8 <__ieee754_pow+0x238>
 800dbc8:	f1b9 0f00 	cmp.w	r9, #0
 800dbcc:	da0f      	bge.n	800dbee <__ieee754_pow+0x23e>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	b009      	add	sp, #36	; 0x24
 800dbd2:	ecbd 8b06 	vpop	{d8-d10}
 800dbd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbda:	f000 bcc2 	b.w	800e562 <__math_oflow>
 800dbde:	429c      	cmp	r4, r3
 800dbe0:	dbf2      	blt.n	800dbc8 <__ieee754_pow+0x218>
 800dbe2:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <__ieee754_pow+0x25c>)
 800dbe4:	429c      	cmp	r4, r3
 800dbe6:	dd19      	ble.n	800dc1c <__ieee754_pow+0x26c>
 800dbe8:	f1b9 0f00 	cmp.w	r9, #0
 800dbec:	dcef      	bgt.n	800dbce <__ieee754_pow+0x21e>
 800dbee:	2000      	movs	r0, #0
 800dbf0:	b009      	add	sp, #36	; 0x24
 800dbf2:	ecbd 8b06 	vpop	{d8-d10}
 800dbf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfa:	f000 bca9 	b.w	800e550 <__math_uflow>
 800dbfe:	bf00      	nop
 800dc00:	fff00000 	.word	0xfff00000
 800dc04:	7ff00000 	.word	0x7ff00000
 800dc08:	433fffff 	.word	0x433fffff
 800dc0c:	3ff00000 	.word	0x3ff00000
 800dc10:	3fefffff 	.word	0x3fefffff
 800dc14:	3fe00000 	.word	0x3fe00000
 800dc18:	41e00000 	.word	0x41e00000
 800dc1c:	4b60      	ldr	r3, [pc, #384]	; (800dda0 <__ieee754_pow+0x3f0>)
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f7f2 fb52 	bl	80002c8 <__aeabi_dsub>
 800dc24:	a354      	add	r3, pc, #336	; (adr r3, 800dd78 <__ieee754_pow+0x3c8>)
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	f7f2 fd03 	bl	8000638 <__aeabi_dmul>
 800dc32:	a353      	add	r3, pc, #332	; (adr r3, 800dd80 <__ieee754_pow+0x3d0>)
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	4606      	mov	r6, r0
 800dc3a:	460f      	mov	r7, r1
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	4629      	mov	r1, r5
 800dc40:	f7f2 fcfa 	bl	8000638 <__aeabi_dmul>
 800dc44:	4b57      	ldr	r3, [pc, #348]	; (800dda4 <__ieee754_pow+0x3f4>)
 800dc46:	4682      	mov	sl, r0
 800dc48:	468b      	mov	fp, r1
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	f7f2 fcf2 	bl	8000638 <__aeabi_dmul>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	a14b      	add	r1, pc, #300	; (adr r1, 800dd88 <__ieee754_pow+0x3d8>)
 800dc5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc5e:	f7f2 fb33 	bl	80002c8 <__aeabi_dsub>
 800dc62:	4622      	mov	r2, r4
 800dc64:	462b      	mov	r3, r5
 800dc66:	f7f2 fce7 	bl	8000638 <__aeabi_dmul>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	2000      	movs	r0, #0
 800dc70:	494d      	ldr	r1, [pc, #308]	; (800dda8 <__ieee754_pow+0x3f8>)
 800dc72:	f7f2 fb29 	bl	80002c8 <__aeabi_dsub>
 800dc76:	4622      	mov	r2, r4
 800dc78:	4680      	mov	r8, r0
 800dc7a:	4689      	mov	r9, r1
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	4620      	mov	r0, r4
 800dc80:	4629      	mov	r1, r5
 800dc82:	f7f2 fcd9 	bl	8000638 <__aeabi_dmul>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	f7f2 fcd3 	bl	8000638 <__aeabi_dmul>
 800dc92:	a33f      	add	r3, pc, #252	; (adr r3, 800dd90 <__ieee754_pow+0x3e0>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	f7f2 fcce 	bl	8000638 <__aeabi_dmul>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4650      	mov	r0, sl
 800dca2:	4659      	mov	r1, fp
 800dca4:	f7f2 fb10 	bl	80002c8 <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	4680      	mov	r8, r0
 800dcae:	4689      	mov	r9, r1
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 fb0a 	bl	80002cc <__adddf3>
 800dcb8:	2000      	movs	r0, #0
 800dcba:	4632      	mov	r2, r6
 800dcbc:	463b      	mov	r3, r7
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	f7f2 fb01 	bl	80002c8 <__aeabi_dsub>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	f7f2 fafb 	bl	80002c8 <__aeabi_dsub>
 800dcd2:	9b04      	ldr	r3, [sp, #16]
 800dcd4:	9a06      	ldr	r2, [sp, #24]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	4682      	mov	sl, r0
 800dcdc:	468b      	mov	fp, r1
 800dcde:	f040 81e7 	bne.w	800e0b0 <__ieee754_pow+0x700>
 800dce2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dd98 <__ieee754_pow+0x3e8>
 800dce6:	eeb0 8a47 	vmov.f32	s16, s14
 800dcea:	eef0 8a67 	vmov.f32	s17, s15
 800dcee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dcf2:	2600      	movs	r6, #0
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	463b      	mov	r3, r7
 800dcf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcfc:	f7f2 fae4 	bl	80002c8 <__aeabi_dsub>
 800dd00:	4622      	mov	r2, r4
 800dd02:	462b      	mov	r3, r5
 800dd04:	f7f2 fc98 	bl	8000638 <__aeabi_dmul>
 800dd08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd0c:	4680      	mov	r8, r0
 800dd0e:	4689      	mov	r9, r1
 800dd10:	4650      	mov	r0, sl
 800dd12:	4659      	mov	r1, fp
 800dd14:	f7f2 fc90 	bl	8000638 <__aeabi_dmul>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 fad4 	bl	80002cc <__adddf3>
 800dd24:	4632      	mov	r2, r6
 800dd26:	463b      	mov	r3, r7
 800dd28:	4680      	mov	r8, r0
 800dd2a:	4689      	mov	r9, r1
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f2 fc82 	bl	8000638 <__aeabi_dmul>
 800dd34:	460b      	mov	r3, r1
 800dd36:	4604      	mov	r4, r0
 800dd38:	460d      	mov	r5, r1
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	4640      	mov	r0, r8
 800dd40:	f7f2 fac4 	bl	80002cc <__adddf3>
 800dd44:	4b19      	ldr	r3, [pc, #100]	; (800ddac <__ieee754_pow+0x3fc>)
 800dd46:	4299      	cmp	r1, r3
 800dd48:	ec45 4b19 	vmov	d9, r4, r5
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	460f      	mov	r7, r1
 800dd50:	468b      	mov	fp, r1
 800dd52:	f340 82f0 	ble.w	800e336 <__ieee754_pow+0x986>
 800dd56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dd5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dd5e:	4303      	orrs	r3, r0
 800dd60:	f000 81e4 	beq.w	800e12c <__ieee754_pow+0x77c>
 800dd64:	ec51 0b18 	vmov	r0, r1, d8
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f7f2 fed6 	bl	8000b1c <__aeabi_dcmplt>
 800dd70:	3800      	subs	r0, #0
 800dd72:	bf18      	it	ne
 800dd74:	2001      	movne	r0, #1
 800dd76:	e72b      	b.n	800dbd0 <__ieee754_pow+0x220>
 800dd78:	60000000 	.word	0x60000000
 800dd7c:	3ff71547 	.word	0x3ff71547
 800dd80:	f85ddf44 	.word	0xf85ddf44
 800dd84:	3e54ae0b 	.word	0x3e54ae0b
 800dd88:	55555555 	.word	0x55555555
 800dd8c:	3fd55555 	.word	0x3fd55555
 800dd90:	652b82fe 	.word	0x652b82fe
 800dd94:	3ff71547 	.word	0x3ff71547
 800dd98:	00000000 	.word	0x00000000
 800dd9c:	bff00000 	.word	0xbff00000
 800dda0:	3ff00000 	.word	0x3ff00000
 800dda4:	3fd00000 	.word	0x3fd00000
 800dda8:	3fe00000 	.word	0x3fe00000
 800ddac:	408fffff 	.word	0x408fffff
 800ddb0:	4bd5      	ldr	r3, [pc, #852]	; (800e108 <__ieee754_pow+0x758>)
 800ddb2:	402b      	ands	r3, r5
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	b92b      	cbnz	r3, 800ddc4 <__ieee754_pow+0x414>
 800ddb8:	4bd4      	ldr	r3, [pc, #848]	; (800e10c <__ieee754_pow+0x75c>)
 800ddba:	f7f2 fc3d 	bl	8000638 <__aeabi_dmul>
 800ddbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	1523      	asrs	r3, r4, #20
 800ddc6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ddca:	4413      	add	r3, r2
 800ddcc:	9305      	str	r3, [sp, #20]
 800ddce:	4bd0      	ldr	r3, [pc, #832]	; (800e110 <__ieee754_pow+0x760>)
 800ddd0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ddd4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ddd8:	429c      	cmp	r4, r3
 800ddda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ddde:	dd08      	ble.n	800ddf2 <__ieee754_pow+0x442>
 800dde0:	4bcc      	ldr	r3, [pc, #816]	; (800e114 <__ieee754_pow+0x764>)
 800dde2:	429c      	cmp	r4, r3
 800dde4:	f340 8162 	ble.w	800e0ac <__ieee754_pow+0x6fc>
 800dde8:	9b05      	ldr	r3, [sp, #20]
 800ddea:	3301      	adds	r3, #1
 800ddec:	9305      	str	r3, [sp, #20]
 800ddee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ddf2:	2400      	movs	r4, #0
 800ddf4:	00e3      	lsls	r3, r4, #3
 800ddf6:	9307      	str	r3, [sp, #28]
 800ddf8:	4bc7      	ldr	r3, [pc, #796]	; (800e118 <__ieee754_pow+0x768>)
 800ddfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddfe:	ed93 7b00 	vldr	d7, [r3]
 800de02:	4629      	mov	r1, r5
 800de04:	ec53 2b17 	vmov	r2, r3, d7
 800de08:	eeb0 9a47 	vmov.f32	s18, s14
 800de0c:	eef0 9a67 	vmov.f32	s19, s15
 800de10:	4682      	mov	sl, r0
 800de12:	f7f2 fa59 	bl	80002c8 <__aeabi_dsub>
 800de16:	4652      	mov	r2, sl
 800de18:	4606      	mov	r6, r0
 800de1a:	460f      	mov	r7, r1
 800de1c:	462b      	mov	r3, r5
 800de1e:	ec51 0b19 	vmov	r0, r1, d9
 800de22:	f7f2 fa53 	bl	80002cc <__adddf3>
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	2000      	movs	r0, #0
 800de2c:	49bb      	ldr	r1, [pc, #748]	; (800e11c <__ieee754_pow+0x76c>)
 800de2e:	f7f2 fd2d 	bl	800088c <__aeabi_ddiv>
 800de32:	ec41 0b1a 	vmov	d10, r0, r1
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	4630      	mov	r0, r6
 800de3c:	4639      	mov	r1, r7
 800de3e:	f7f2 fbfb 	bl	8000638 <__aeabi_dmul>
 800de42:	2300      	movs	r3, #0
 800de44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de48:	9302      	str	r3, [sp, #8]
 800de4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de4e:	46ab      	mov	fp, r5
 800de50:	106d      	asrs	r5, r5, #1
 800de52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800de56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800de5a:	ec41 0b18 	vmov	d8, r0, r1
 800de5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800de62:	2200      	movs	r2, #0
 800de64:	4640      	mov	r0, r8
 800de66:	4649      	mov	r1, r9
 800de68:	4614      	mov	r4, r2
 800de6a:	461d      	mov	r5, r3
 800de6c:	f7f2 fbe4 	bl	8000638 <__aeabi_dmul>
 800de70:	4602      	mov	r2, r0
 800de72:	460b      	mov	r3, r1
 800de74:	4630      	mov	r0, r6
 800de76:	4639      	mov	r1, r7
 800de78:	f7f2 fa26 	bl	80002c8 <__aeabi_dsub>
 800de7c:	ec53 2b19 	vmov	r2, r3, d9
 800de80:	4606      	mov	r6, r0
 800de82:	460f      	mov	r7, r1
 800de84:	4620      	mov	r0, r4
 800de86:	4629      	mov	r1, r5
 800de88:	f7f2 fa1e 	bl	80002c8 <__aeabi_dsub>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4650      	mov	r0, sl
 800de92:	4659      	mov	r1, fp
 800de94:	f7f2 fa18 	bl	80002c8 <__aeabi_dsub>
 800de98:	4642      	mov	r2, r8
 800de9a:	464b      	mov	r3, r9
 800de9c:	f7f2 fbcc 	bl	8000638 <__aeabi_dmul>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	4630      	mov	r0, r6
 800dea6:	4639      	mov	r1, r7
 800dea8:	f7f2 fa0e 	bl	80002c8 <__aeabi_dsub>
 800deac:	ec53 2b1a 	vmov	r2, r3, d10
 800deb0:	f7f2 fbc2 	bl	8000638 <__aeabi_dmul>
 800deb4:	ec53 2b18 	vmov	r2, r3, d8
 800deb8:	ec41 0b19 	vmov	d9, r0, r1
 800debc:	ec51 0b18 	vmov	r0, r1, d8
 800dec0:	f7f2 fbba 	bl	8000638 <__aeabi_dmul>
 800dec4:	a37c      	add	r3, pc, #496	; (adr r3, 800e0b8 <__ieee754_pow+0x708>)
 800dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deca:	4604      	mov	r4, r0
 800decc:	460d      	mov	r5, r1
 800dece:	f7f2 fbb3 	bl	8000638 <__aeabi_dmul>
 800ded2:	a37b      	add	r3, pc, #492	; (adr r3, 800e0c0 <__ieee754_pow+0x710>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 f9f8 	bl	80002cc <__adddf3>
 800dedc:	4622      	mov	r2, r4
 800dede:	462b      	mov	r3, r5
 800dee0:	f7f2 fbaa 	bl	8000638 <__aeabi_dmul>
 800dee4:	a378      	add	r3, pc, #480	; (adr r3, 800e0c8 <__ieee754_pow+0x718>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	f7f2 f9ef 	bl	80002cc <__adddf3>
 800deee:	4622      	mov	r2, r4
 800def0:	462b      	mov	r3, r5
 800def2:	f7f2 fba1 	bl	8000638 <__aeabi_dmul>
 800def6:	a376      	add	r3, pc, #472	; (adr r3, 800e0d0 <__ieee754_pow+0x720>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f7f2 f9e6 	bl	80002cc <__adddf3>
 800df00:	4622      	mov	r2, r4
 800df02:	462b      	mov	r3, r5
 800df04:	f7f2 fb98 	bl	8000638 <__aeabi_dmul>
 800df08:	a373      	add	r3, pc, #460	; (adr r3, 800e0d8 <__ieee754_pow+0x728>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 f9dd 	bl	80002cc <__adddf3>
 800df12:	4622      	mov	r2, r4
 800df14:	462b      	mov	r3, r5
 800df16:	f7f2 fb8f 	bl	8000638 <__aeabi_dmul>
 800df1a:	a371      	add	r3, pc, #452	; (adr r3, 800e0e0 <__ieee754_pow+0x730>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	f7f2 f9d4 	bl	80002cc <__adddf3>
 800df24:	4622      	mov	r2, r4
 800df26:	4606      	mov	r6, r0
 800df28:	460f      	mov	r7, r1
 800df2a:	462b      	mov	r3, r5
 800df2c:	4620      	mov	r0, r4
 800df2e:	4629      	mov	r1, r5
 800df30:	f7f2 fb82 	bl	8000638 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4630      	mov	r0, r6
 800df3a:	4639      	mov	r1, r7
 800df3c:	f7f2 fb7c 	bl	8000638 <__aeabi_dmul>
 800df40:	4642      	mov	r2, r8
 800df42:	4604      	mov	r4, r0
 800df44:	460d      	mov	r5, r1
 800df46:	464b      	mov	r3, r9
 800df48:	ec51 0b18 	vmov	r0, r1, d8
 800df4c:	f7f2 f9be 	bl	80002cc <__adddf3>
 800df50:	ec53 2b19 	vmov	r2, r3, d9
 800df54:	f7f2 fb70 	bl	8000638 <__aeabi_dmul>
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	f7f2 f9b6 	bl	80002cc <__adddf3>
 800df60:	4642      	mov	r2, r8
 800df62:	4682      	mov	sl, r0
 800df64:	468b      	mov	fp, r1
 800df66:	464b      	mov	r3, r9
 800df68:	4640      	mov	r0, r8
 800df6a:	4649      	mov	r1, r9
 800df6c:	f7f2 fb64 	bl	8000638 <__aeabi_dmul>
 800df70:	4b6b      	ldr	r3, [pc, #428]	; (800e120 <__ieee754_pow+0x770>)
 800df72:	2200      	movs	r2, #0
 800df74:	4606      	mov	r6, r0
 800df76:	460f      	mov	r7, r1
 800df78:	f7f2 f9a8 	bl	80002cc <__adddf3>
 800df7c:	4652      	mov	r2, sl
 800df7e:	465b      	mov	r3, fp
 800df80:	f7f2 f9a4 	bl	80002cc <__adddf3>
 800df84:	2000      	movs	r0, #0
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	4640      	mov	r0, r8
 800df90:	4649      	mov	r1, r9
 800df92:	f7f2 fb51 	bl	8000638 <__aeabi_dmul>
 800df96:	4b62      	ldr	r3, [pc, #392]	; (800e120 <__ieee754_pow+0x770>)
 800df98:	4680      	mov	r8, r0
 800df9a:	4689      	mov	r9, r1
 800df9c:	2200      	movs	r2, #0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 f991 	bl	80002c8 <__aeabi_dsub>
 800dfa6:	4632      	mov	r2, r6
 800dfa8:	463b      	mov	r3, r7
 800dfaa:	f7f2 f98d 	bl	80002c8 <__aeabi_dsub>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	f7f2 f987 	bl	80002c8 <__aeabi_dsub>
 800dfba:	ec53 2b18 	vmov	r2, r3, d8
 800dfbe:	f7f2 fb3b 	bl	8000638 <__aeabi_dmul>
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	460f      	mov	r7, r1
 800dfc8:	462b      	mov	r3, r5
 800dfca:	ec51 0b19 	vmov	r0, r1, d9
 800dfce:	f7f2 fb33 	bl	8000638 <__aeabi_dmul>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	4639      	mov	r1, r7
 800dfda:	f7f2 f977 	bl	80002cc <__adddf3>
 800dfde:	4606      	mov	r6, r0
 800dfe0:	460f      	mov	r7, r1
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4640      	mov	r0, r8
 800dfe8:	4649      	mov	r1, r9
 800dfea:	f7f2 f96f 	bl	80002cc <__adddf3>
 800dfee:	a33e      	add	r3, pc, #248	; (adr r3, 800e0e8 <__ieee754_pow+0x738>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	2000      	movs	r0, #0
 800dff6:	4604      	mov	r4, r0
 800dff8:	460d      	mov	r5, r1
 800dffa:	f7f2 fb1d 	bl	8000638 <__aeabi_dmul>
 800dffe:	4642      	mov	r2, r8
 800e000:	ec41 0b18 	vmov	d8, r0, r1
 800e004:	464b      	mov	r3, r9
 800e006:	4620      	mov	r0, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	f7f2 f95d 	bl	80002c8 <__aeabi_dsub>
 800e00e:	4602      	mov	r2, r0
 800e010:	460b      	mov	r3, r1
 800e012:	4630      	mov	r0, r6
 800e014:	4639      	mov	r1, r7
 800e016:	f7f2 f957 	bl	80002c8 <__aeabi_dsub>
 800e01a:	a335      	add	r3, pc, #212	; (adr r3, 800e0f0 <__ieee754_pow+0x740>)
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	f7f2 fb0a 	bl	8000638 <__aeabi_dmul>
 800e024:	a334      	add	r3, pc, #208	; (adr r3, 800e0f8 <__ieee754_pow+0x748>)
 800e026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02a:	4606      	mov	r6, r0
 800e02c:	460f      	mov	r7, r1
 800e02e:	4620      	mov	r0, r4
 800e030:	4629      	mov	r1, r5
 800e032:	f7f2 fb01 	bl	8000638 <__aeabi_dmul>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4630      	mov	r0, r6
 800e03c:	4639      	mov	r1, r7
 800e03e:	f7f2 f945 	bl	80002cc <__adddf3>
 800e042:	9a07      	ldr	r2, [sp, #28]
 800e044:	4b37      	ldr	r3, [pc, #220]	; (800e124 <__ieee754_pow+0x774>)
 800e046:	4413      	add	r3, r2
 800e048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04c:	f7f2 f93e 	bl	80002cc <__adddf3>
 800e050:	4682      	mov	sl, r0
 800e052:	9805      	ldr	r0, [sp, #20]
 800e054:	468b      	mov	fp, r1
 800e056:	f7f2 fa85 	bl	8000564 <__aeabi_i2d>
 800e05a:	9a07      	ldr	r2, [sp, #28]
 800e05c:	4b32      	ldr	r3, [pc, #200]	; (800e128 <__ieee754_pow+0x778>)
 800e05e:	4413      	add	r3, r2
 800e060:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e064:	4606      	mov	r6, r0
 800e066:	460f      	mov	r7, r1
 800e068:	4652      	mov	r2, sl
 800e06a:	465b      	mov	r3, fp
 800e06c:	ec51 0b18 	vmov	r0, r1, d8
 800e070:	f7f2 f92c 	bl	80002cc <__adddf3>
 800e074:	4642      	mov	r2, r8
 800e076:	464b      	mov	r3, r9
 800e078:	f7f2 f928 	bl	80002cc <__adddf3>
 800e07c:	4632      	mov	r2, r6
 800e07e:	463b      	mov	r3, r7
 800e080:	f7f2 f924 	bl	80002cc <__adddf3>
 800e084:	2000      	movs	r0, #0
 800e086:	4632      	mov	r2, r6
 800e088:	463b      	mov	r3, r7
 800e08a:	4604      	mov	r4, r0
 800e08c:	460d      	mov	r5, r1
 800e08e:	f7f2 f91b 	bl	80002c8 <__aeabi_dsub>
 800e092:	4642      	mov	r2, r8
 800e094:	464b      	mov	r3, r9
 800e096:	f7f2 f917 	bl	80002c8 <__aeabi_dsub>
 800e09a:	ec53 2b18 	vmov	r2, r3, d8
 800e09e:	f7f2 f913 	bl	80002c8 <__aeabi_dsub>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4650      	mov	r0, sl
 800e0a8:	4659      	mov	r1, fp
 800e0aa:	e610      	b.n	800dcce <__ieee754_pow+0x31e>
 800e0ac:	2401      	movs	r4, #1
 800e0ae:	e6a1      	b.n	800ddf4 <__ieee754_pow+0x444>
 800e0b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e100 <__ieee754_pow+0x750>
 800e0b4:	e617      	b.n	800dce6 <__ieee754_pow+0x336>
 800e0b6:	bf00      	nop
 800e0b8:	4a454eef 	.word	0x4a454eef
 800e0bc:	3fca7e28 	.word	0x3fca7e28
 800e0c0:	93c9db65 	.word	0x93c9db65
 800e0c4:	3fcd864a 	.word	0x3fcd864a
 800e0c8:	a91d4101 	.word	0xa91d4101
 800e0cc:	3fd17460 	.word	0x3fd17460
 800e0d0:	518f264d 	.word	0x518f264d
 800e0d4:	3fd55555 	.word	0x3fd55555
 800e0d8:	db6fabff 	.word	0xdb6fabff
 800e0dc:	3fdb6db6 	.word	0x3fdb6db6
 800e0e0:	33333303 	.word	0x33333303
 800e0e4:	3fe33333 	.word	0x3fe33333
 800e0e8:	e0000000 	.word	0xe0000000
 800e0ec:	3feec709 	.word	0x3feec709
 800e0f0:	dc3a03fd 	.word	0xdc3a03fd
 800e0f4:	3feec709 	.word	0x3feec709
 800e0f8:	145b01f5 	.word	0x145b01f5
 800e0fc:	be3e2fe0 	.word	0xbe3e2fe0
 800e100:	00000000 	.word	0x00000000
 800e104:	3ff00000 	.word	0x3ff00000
 800e108:	7ff00000 	.word	0x7ff00000
 800e10c:	43400000 	.word	0x43400000
 800e110:	0003988e 	.word	0x0003988e
 800e114:	000bb679 	.word	0x000bb679
 800e118:	0800ea00 	.word	0x0800ea00
 800e11c:	3ff00000 	.word	0x3ff00000
 800e120:	40080000 	.word	0x40080000
 800e124:	0800ea20 	.word	0x0800ea20
 800e128:	0800ea10 	.word	0x0800ea10
 800e12c:	a3b3      	add	r3, pc, #716	; (adr r3, 800e3fc <__ieee754_pow+0xa4c>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	4640      	mov	r0, r8
 800e134:	4649      	mov	r1, r9
 800e136:	f7f2 f8c9 	bl	80002cc <__adddf3>
 800e13a:	4622      	mov	r2, r4
 800e13c:	ec41 0b1a 	vmov	d10, r0, r1
 800e140:	462b      	mov	r3, r5
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	f7f2 f8bf 	bl	80002c8 <__aeabi_dsub>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	ec51 0b1a 	vmov	r0, r1, d10
 800e152:	f7f2 fd01 	bl	8000b58 <__aeabi_dcmpgt>
 800e156:	2800      	cmp	r0, #0
 800e158:	f47f ae04 	bne.w	800dd64 <__ieee754_pow+0x3b4>
 800e15c:	4aa2      	ldr	r2, [pc, #648]	; (800e3e8 <__ieee754_pow+0xa38>)
 800e15e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e162:	4293      	cmp	r3, r2
 800e164:	f340 8107 	ble.w	800e376 <__ieee754_pow+0x9c6>
 800e168:	151b      	asrs	r3, r3, #20
 800e16a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e16e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e172:	fa4a fa03 	asr.w	sl, sl, r3
 800e176:	44da      	add	sl, fp
 800e178:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e17c:	489b      	ldr	r0, [pc, #620]	; (800e3ec <__ieee754_pow+0xa3c>)
 800e17e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e182:	4108      	asrs	r0, r1
 800e184:	ea00 030a 	and.w	r3, r0, sl
 800e188:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e18c:	f1c1 0114 	rsb	r1, r1, #20
 800e190:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e194:	fa4a fa01 	asr.w	sl, sl, r1
 800e198:	f1bb 0f00 	cmp.w	fp, #0
 800e19c:	f04f 0200 	mov.w	r2, #0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	bfb8      	it	lt
 800e1a6:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1aa:	f7f2 f88d 	bl	80002c8 <__aeabi_dsub>
 800e1ae:	ec41 0b19 	vmov	d9, r0, r1
 800e1b2:	4642      	mov	r2, r8
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	ec51 0b19 	vmov	r0, r1, d9
 800e1ba:	f7f2 f887 	bl	80002cc <__adddf3>
 800e1be:	a37a      	add	r3, pc, #488	; (adr r3, 800e3a8 <__ieee754_pow+0x9f8>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	f7f2 fa35 	bl	8000638 <__aeabi_dmul>
 800e1ce:	ec53 2b19 	vmov	r2, r3, d9
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	460f      	mov	r7, r1
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	4629      	mov	r1, r5
 800e1da:	f7f2 f875 	bl	80002c8 <__aeabi_dsub>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	4649      	mov	r1, r9
 800e1e6:	f7f2 f86f 	bl	80002c8 <__aeabi_dsub>
 800e1ea:	a371      	add	r3, pc, #452	; (adr r3, 800e3b0 <__ieee754_pow+0xa00>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f7f2 fa22 	bl	8000638 <__aeabi_dmul>
 800e1f4:	a370      	add	r3, pc, #448	; (adr r3, 800e3b8 <__ieee754_pow+0xa08>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	4689      	mov	r9, r1
 800e1fe:	4620      	mov	r0, r4
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 fa19 	bl	8000638 <__aeabi_dmul>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	4640      	mov	r0, r8
 800e20c:	4649      	mov	r1, r9
 800e20e:	f7f2 f85d 	bl	80002cc <__adddf3>
 800e212:	4604      	mov	r4, r0
 800e214:	460d      	mov	r5, r1
 800e216:	4602      	mov	r2, r0
 800e218:	460b      	mov	r3, r1
 800e21a:	4630      	mov	r0, r6
 800e21c:	4639      	mov	r1, r7
 800e21e:	f7f2 f855 	bl	80002cc <__adddf3>
 800e222:	4632      	mov	r2, r6
 800e224:	463b      	mov	r3, r7
 800e226:	4680      	mov	r8, r0
 800e228:	4689      	mov	r9, r1
 800e22a:	f7f2 f84d 	bl	80002c8 <__aeabi_dsub>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4620      	mov	r0, r4
 800e234:	4629      	mov	r1, r5
 800e236:	f7f2 f847 	bl	80002c8 <__aeabi_dsub>
 800e23a:	4642      	mov	r2, r8
 800e23c:	4606      	mov	r6, r0
 800e23e:	460f      	mov	r7, r1
 800e240:	464b      	mov	r3, r9
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	f7f2 f9f7 	bl	8000638 <__aeabi_dmul>
 800e24a:	a35d      	add	r3, pc, #372	; (adr r3, 800e3c0 <__ieee754_pow+0xa10>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	4604      	mov	r4, r0
 800e252:	460d      	mov	r5, r1
 800e254:	f7f2 f9f0 	bl	8000638 <__aeabi_dmul>
 800e258:	a35b      	add	r3, pc, #364	; (adr r3, 800e3c8 <__ieee754_pow+0xa18>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 f833 	bl	80002c8 <__aeabi_dsub>
 800e262:	4622      	mov	r2, r4
 800e264:	462b      	mov	r3, r5
 800e266:	f7f2 f9e7 	bl	8000638 <__aeabi_dmul>
 800e26a:	a359      	add	r3, pc, #356	; (adr r3, 800e3d0 <__ieee754_pow+0xa20>)
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f7f2 f82c 	bl	80002cc <__adddf3>
 800e274:	4622      	mov	r2, r4
 800e276:	462b      	mov	r3, r5
 800e278:	f7f2 f9de 	bl	8000638 <__aeabi_dmul>
 800e27c:	a356      	add	r3, pc, #344	; (adr r3, 800e3d8 <__ieee754_pow+0xa28>)
 800e27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e282:	f7f2 f821 	bl	80002c8 <__aeabi_dsub>
 800e286:	4622      	mov	r2, r4
 800e288:	462b      	mov	r3, r5
 800e28a:	f7f2 f9d5 	bl	8000638 <__aeabi_dmul>
 800e28e:	a354      	add	r3, pc, #336	; (adr r3, 800e3e0 <__ieee754_pow+0xa30>)
 800e290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e294:	f7f2 f81a 	bl	80002cc <__adddf3>
 800e298:	4622      	mov	r2, r4
 800e29a:	462b      	mov	r3, r5
 800e29c:	f7f2 f9cc 	bl	8000638 <__aeabi_dmul>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4640      	mov	r0, r8
 800e2a6:	4649      	mov	r1, r9
 800e2a8:	f7f2 f80e 	bl	80002c8 <__aeabi_dsub>
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	4649      	mov	r1, r9
 800e2b8:	f7f2 f9be 	bl	8000638 <__aeabi_dmul>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	ec41 0b19 	vmov	d9, r0, r1
 800e2c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f1 fffd 	bl	80002c8 <__aeabi_dsub>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	ec51 0b19 	vmov	r0, r1, d9
 800e2d6:	f7f2 fad9 	bl	800088c <__aeabi_ddiv>
 800e2da:	4632      	mov	r2, r6
 800e2dc:	4604      	mov	r4, r0
 800e2de:	460d      	mov	r5, r1
 800e2e0:	463b      	mov	r3, r7
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	4649      	mov	r1, r9
 800e2e6:	f7f2 f9a7 	bl	8000638 <__aeabi_dmul>
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	463b      	mov	r3, r7
 800e2ee:	f7f1 ffed 	bl	80002cc <__adddf3>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f7f1 ffe5 	bl	80002c8 <__aeabi_dsub>
 800e2fe:	4642      	mov	r2, r8
 800e300:	464b      	mov	r3, r9
 800e302:	f7f1 ffe1 	bl	80002c8 <__aeabi_dsub>
 800e306:	460b      	mov	r3, r1
 800e308:	4602      	mov	r2, r0
 800e30a:	4939      	ldr	r1, [pc, #228]	; (800e3f0 <__ieee754_pow+0xa40>)
 800e30c:	2000      	movs	r0, #0
 800e30e:	f7f1 ffdb 	bl	80002c8 <__aeabi_dsub>
 800e312:	ec41 0b10 	vmov	d0, r0, r1
 800e316:	ee10 3a90 	vmov	r3, s1
 800e31a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e322:	da2b      	bge.n	800e37c <__ieee754_pow+0x9cc>
 800e324:	4650      	mov	r0, sl
 800e326:	f000 f877 	bl	800e418 <scalbn>
 800e32a:	ec51 0b10 	vmov	r0, r1, d0
 800e32e:	ec53 2b18 	vmov	r2, r3, d8
 800e332:	f7ff bbee 	b.w	800db12 <__ieee754_pow+0x162>
 800e336:	4b2f      	ldr	r3, [pc, #188]	; (800e3f4 <__ieee754_pow+0xa44>)
 800e338:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e33c:	429e      	cmp	r6, r3
 800e33e:	f77f af0d 	ble.w	800e15c <__ieee754_pow+0x7ac>
 800e342:	4b2d      	ldr	r3, [pc, #180]	; (800e3f8 <__ieee754_pow+0xa48>)
 800e344:	440b      	add	r3, r1
 800e346:	4303      	orrs	r3, r0
 800e348:	d009      	beq.n	800e35e <__ieee754_pow+0x9ae>
 800e34a:	ec51 0b18 	vmov	r0, r1, d8
 800e34e:	2200      	movs	r2, #0
 800e350:	2300      	movs	r3, #0
 800e352:	f7f2 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 800e356:	3800      	subs	r0, #0
 800e358:	bf18      	it	ne
 800e35a:	2001      	movne	r0, #1
 800e35c:	e448      	b.n	800dbf0 <__ieee754_pow+0x240>
 800e35e:	4622      	mov	r2, r4
 800e360:	462b      	mov	r3, r5
 800e362:	f7f1 ffb1 	bl	80002c8 <__aeabi_dsub>
 800e366:	4642      	mov	r2, r8
 800e368:	464b      	mov	r3, r9
 800e36a:	f7f2 fbeb 	bl	8000b44 <__aeabi_dcmpge>
 800e36e:	2800      	cmp	r0, #0
 800e370:	f43f aef4 	beq.w	800e15c <__ieee754_pow+0x7ac>
 800e374:	e7e9      	b.n	800e34a <__ieee754_pow+0x99a>
 800e376:	f04f 0a00 	mov.w	sl, #0
 800e37a:	e71a      	b.n	800e1b2 <__ieee754_pow+0x802>
 800e37c:	ec51 0b10 	vmov	r0, r1, d0
 800e380:	4619      	mov	r1, r3
 800e382:	e7d4      	b.n	800e32e <__ieee754_pow+0x97e>
 800e384:	491a      	ldr	r1, [pc, #104]	; (800e3f0 <__ieee754_pow+0xa40>)
 800e386:	2000      	movs	r0, #0
 800e388:	f7ff bb31 	b.w	800d9ee <__ieee754_pow+0x3e>
 800e38c:	2000      	movs	r0, #0
 800e38e:	2100      	movs	r1, #0
 800e390:	f7ff bb2d 	b.w	800d9ee <__ieee754_pow+0x3e>
 800e394:	4630      	mov	r0, r6
 800e396:	4639      	mov	r1, r7
 800e398:	f7ff bb29 	b.w	800d9ee <__ieee754_pow+0x3e>
 800e39c:	9204      	str	r2, [sp, #16]
 800e39e:	f7ff bb7b 	b.w	800da98 <__ieee754_pow+0xe8>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f7ff bb65 	b.w	800da72 <__ieee754_pow+0xc2>
 800e3a8:	00000000 	.word	0x00000000
 800e3ac:	3fe62e43 	.word	0x3fe62e43
 800e3b0:	fefa39ef 	.word	0xfefa39ef
 800e3b4:	3fe62e42 	.word	0x3fe62e42
 800e3b8:	0ca86c39 	.word	0x0ca86c39
 800e3bc:	be205c61 	.word	0xbe205c61
 800e3c0:	72bea4d0 	.word	0x72bea4d0
 800e3c4:	3e663769 	.word	0x3e663769
 800e3c8:	c5d26bf1 	.word	0xc5d26bf1
 800e3cc:	3ebbbd41 	.word	0x3ebbbd41
 800e3d0:	af25de2c 	.word	0xaf25de2c
 800e3d4:	3f11566a 	.word	0x3f11566a
 800e3d8:	16bebd93 	.word	0x16bebd93
 800e3dc:	3f66c16c 	.word	0x3f66c16c
 800e3e0:	5555553e 	.word	0x5555553e
 800e3e4:	3fc55555 	.word	0x3fc55555
 800e3e8:	3fe00000 	.word	0x3fe00000
 800e3ec:	fff00000 	.word	0xfff00000
 800e3f0:	3ff00000 	.word	0x3ff00000
 800e3f4:	4090cbff 	.word	0x4090cbff
 800e3f8:	3f6f3400 	.word	0x3f6f3400
 800e3fc:	652b82fe 	.word	0x652b82fe
 800e400:	3c971547 	.word	0x3c971547

0800e404 <fabs>:
 800e404:	ec51 0b10 	vmov	r0, r1, d0
 800e408:	ee10 2a10 	vmov	r2, s0
 800e40c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e410:	ec43 2b10 	vmov	d0, r2, r3
 800e414:	4770      	bx	lr
	...

0800e418 <scalbn>:
 800e418:	b570      	push	{r4, r5, r6, lr}
 800e41a:	ec55 4b10 	vmov	r4, r5, d0
 800e41e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e422:	4606      	mov	r6, r0
 800e424:	462b      	mov	r3, r5
 800e426:	b999      	cbnz	r1, 800e450 <scalbn+0x38>
 800e428:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e42c:	4323      	orrs	r3, r4
 800e42e:	d03f      	beq.n	800e4b0 <scalbn+0x98>
 800e430:	4b35      	ldr	r3, [pc, #212]	; (800e508 <scalbn+0xf0>)
 800e432:	4629      	mov	r1, r5
 800e434:	ee10 0a10 	vmov	r0, s0
 800e438:	2200      	movs	r2, #0
 800e43a:	f7f2 f8fd 	bl	8000638 <__aeabi_dmul>
 800e43e:	4b33      	ldr	r3, [pc, #204]	; (800e50c <scalbn+0xf4>)
 800e440:	429e      	cmp	r6, r3
 800e442:	4604      	mov	r4, r0
 800e444:	460d      	mov	r5, r1
 800e446:	da10      	bge.n	800e46a <scalbn+0x52>
 800e448:	a327      	add	r3, pc, #156	; (adr r3, 800e4e8 <scalbn+0xd0>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	e01f      	b.n	800e490 <scalbn+0x78>
 800e450:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e454:	4291      	cmp	r1, r2
 800e456:	d10c      	bne.n	800e472 <scalbn+0x5a>
 800e458:	ee10 2a10 	vmov	r2, s0
 800e45c:	4620      	mov	r0, r4
 800e45e:	4629      	mov	r1, r5
 800e460:	f7f1 ff34 	bl	80002cc <__adddf3>
 800e464:	4604      	mov	r4, r0
 800e466:	460d      	mov	r5, r1
 800e468:	e022      	b.n	800e4b0 <scalbn+0x98>
 800e46a:	460b      	mov	r3, r1
 800e46c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e470:	3936      	subs	r1, #54	; 0x36
 800e472:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e476:	4296      	cmp	r6, r2
 800e478:	dd0d      	ble.n	800e496 <scalbn+0x7e>
 800e47a:	2d00      	cmp	r5, #0
 800e47c:	a11c      	add	r1, pc, #112	; (adr r1, 800e4f0 <scalbn+0xd8>)
 800e47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e482:	da02      	bge.n	800e48a <scalbn+0x72>
 800e484:	a11c      	add	r1, pc, #112	; (adr r1, 800e4f8 <scalbn+0xe0>)
 800e486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e48a:	a319      	add	r3, pc, #100	; (adr r3, 800e4f0 <scalbn+0xd8>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f7f2 f8d2 	bl	8000638 <__aeabi_dmul>
 800e494:	e7e6      	b.n	800e464 <scalbn+0x4c>
 800e496:	1872      	adds	r2, r6, r1
 800e498:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e49c:	428a      	cmp	r2, r1
 800e49e:	dcec      	bgt.n	800e47a <scalbn+0x62>
 800e4a0:	2a00      	cmp	r2, #0
 800e4a2:	dd08      	ble.n	800e4b6 <scalbn+0x9e>
 800e4a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4b0:	ec45 4b10 	vmov	d0, r4, r5
 800e4b4:	bd70      	pop	{r4, r5, r6, pc}
 800e4b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e4ba:	da08      	bge.n	800e4ce <scalbn+0xb6>
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	a10a      	add	r1, pc, #40	; (adr r1, 800e4e8 <scalbn+0xd0>)
 800e4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c4:	dac0      	bge.n	800e448 <scalbn+0x30>
 800e4c6:	a10e      	add	r1, pc, #56	; (adr r1, 800e500 <scalbn+0xe8>)
 800e4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4cc:	e7bc      	b.n	800e448 <scalbn+0x30>
 800e4ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4d2:	3236      	adds	r2, #54	; 0x36
 800e4d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e4dc:	4620      	mov	r0, r4
 800e4de:	4b0c      	ldr	r3, [pc, #48]	; (800e510 <scalbn+0xf8>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	e7d5      	b.n	800e490 <scalbn+0x78>
 800e4e4:	f3af 8000 	nop.w
 800e4e8:	c2f8f359 	.word	0xc2f8f359
 800e4ec:	01a56e1f 	.word	0x01a56e1f
 800e4f0:	8800759c 	.word	0x8800759c
 800e4f4:	7e37e43c 	.word	0x7e37e43c
 800e4f8:	8800759c 	.word	0x8800759c
 800e4fc:	fe37e43c 	.word	0xfe37e43c
 800e500:	c2f8f359 	.word	0xc2f8f359
 800e504:	81a56e1f 	.word	0x81a56e1f
 800e508:	43500000 	.word	0x43500000
 800e50c:	ffff3cb0 	.word	0xffff3cb0
 800e510:	3c900000 	.word	0x3c900000

0800e514 <with_errno>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	4604      	mov	r4, r0
 800e518:	460d      	mov	r5, r1
 800e51a:	4616      	mov	r6, r2
 800e51c:	f7fc fffe 	bl	800b51c <__errno>
 800e520:	4629      	mov	r1, r5
 800e522:	6006      	str	r6, [r0, #0]
 800e524:	4620      	mov	r0, r4
 800e526:	bd70      	pop	{r4, r5, r6, pc}

0800e528 <xflow>:
 800e528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e52a:	4614      	mov	r4, r2
 800e52c:	461d      	mov	r5, r3
 800e52e:	b108      	cbz	r0, 800e534 <xflow+0xc>
 800e530:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e534:	e9cd 2300 	strd	r2, r3, [sp]
 800e538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f7f2 f87a 	bl	8000638 <__aeabi_dmul>
 800e544:	2222      	movs	r2, #34	; 0x22
 800e546:	b003      	add	sp, #12
 800e548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e54c:	f7ff bfe2 	b.w	800e514 <with_errno>

0800e550 <__math_uflow>:
 800e550:	b508      	push	{r3, lr}
 800e552:	2200      	movs	r2, #0
 800e554:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e558:	f7ff ffe6 	bl	800e528 <xflow>
 800e55c:	ec41 0b10 	vmov	d0, r0, r1
 800e560:	bd08      	pop	{r3, pc}

0800e562 <__math_oflow>:
 800e562:	b508      	push	{r3, lr}
 800e564:	2200      	movs	r2, #0
 800e566:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e56a:	f7ff ffdd 	bl	800e528 <xflow>
 800e56e:	ec41 0b10 	vmov	d0, r0, r1
 800e572:	bd08      	pop	{r3, pc}

0800e574 <_init>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	bf00      	nop
 800e578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57a:	bc08      	pop	{r3}
 800e57c:	469e      	mov	lr, r3
 800e57e:	4770      	bx	lr

0800e580 <_fini>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr
