
Final_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e48c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800e660  0800e660  0001e660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb18  0800eb18  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb18  0800eb18  0001eb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb20  0800eb20  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb20  0800eb20  0001eb20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb24  0800eb24  0001eb24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800eb28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000514c  200001f0  0800ed18  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000533c  0800ed18  0002533c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020fef  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004df3  00000000  00000000  00041252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00046048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001586  00000000  00000000  00047c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027356  00000000  00000000  00049186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023db7  00000000  00000000  000704dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cf2  00000000  00000000  00094293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000876c  00000000  00000000  00174f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e644 	.word	0x0800e644

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800e644 	.word	0x0800e644

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <TASK_GPS>:
uint8_t  Global_GPS_Speed_Completetion= 0;
uint8_t Tx_ESP_Buffer[35];
uint8_t ESP_Status_Buffer[4];

void TASK_GPS(void *Parameters)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	uint8_t Decode_Error_Code;
	while(1)
	{
		/*Update the GPS Data*/
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 8000fcc:	f000 fc7e 	bl	80018cc <GPS_uint8DecodeGGAData>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
		if(Decode_Error_Code == Decode_Success)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1f8      	bne.n	8000fcc <TASK_GPS+0x8>
		{
			/*Update the completetion flag to activate the sendESP_Periodic task*/
			if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <TASK_GPS+0x4c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <TASK_GPS+0x26>
			{
				Global_GPS_Speed_Completetion=Half_Completed_GPS;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <TASK_GPS+0x4c>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e00d      	b.n	8001006 <TASK_GPS+0x42>

			}
			else if(Global_GPS_Speed_Completetion==Half_Completed_Speed)
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <TASK_GPS+0x4c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d109      	bne.n	8001006 <TASK_GPS+0x42>
			{
				Global_GPS_Speed_Completetion=Nothing_Completed;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <TASK_GPS+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
				/*Activate the ESPTask*/
				xTaskNotify(Handle_Esp_Periodic,0,eNoAction);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <TASK_GPS+0x50>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	f008 fa45 	bl	8009490 <xTaskGenericNotify>
			}
			/*Stopping the task for 1s to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(1000));
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f007 fcc5 	bl	8008998 <vTaskDelay>
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 800100e:	e7dd      	b.n	8000fcc <TASK_GPS+0x8>
 8001010:	2000020c 	.word	0x2000020c
 8001014:	20000794 	.word	0x20000794

08001018 <Task_ControlCar>:

}


void Task_ControlCar(void *Parameters)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/*Task will be in Blocked State Waiting for RxCallback Function to Notify it*/
		//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,0,portMAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2000      	movs	r0, #0
 800102a:	f008 f9d1 	bl	80093d0 <xTaskNotifyWait>
		switch(Received_Char_Bluetooth)
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <Task_ControlCar+0xac>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b42      	subs	r3, #66	; 0x42
 8001036:	2b14      	cmp	r3, #20
 8001038:	d8f2      	bhi.n	8001020 <Task_ControlCar+0x8>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <Task_ControlCar+0x28>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	0800109b 	.word	0x0800109b
 8001044:	08001021 	.word	0x08001021
 8001048:	08001021 	.word	0x08001021
 800104c:	08001021 	.word	0x08001021
 8001050:	08001095 	.word	0x08001095
 8001054:	08001021 	.word	0x08001021
 8001058:	08001021 	.word	0x08001021
 800105c:	08001021 	.word	0x08001021
 8001060:	08001021 	.word	0x08001021
 8001064:	08001021 	.word	0x08001021
 8001068:	080010bb 	.word	0x080010bb
 800106c:	08001021 	.word	0x08001021
 8001070:	08001021 	.word	0x08001021
 8001074:	08001021 	.word	0x08001021
 8001078:	08001021 	.word	0x08001021
 800107c:	08001021 	.word	0x08001021
 8001080:	080010b5 	.word	0x080010b5
 8001084:	08001021 	.word	0x08001021
 8001088:	08001021 	.word	0x08001021
 800108c:	08001021 	.word	0x08001021
 8001090:	080010a1 	.word	0x080010a1
		{
		case 'F':
			Car_Move_Forward_High_Speed();
 8001094:	f000 fa7e 	bl	8001594 <Car_Move_Forward_High_Speed>
			break;
 8001098:	e013      	b.n	80010c2 <Task_ControlCar+0xaa>
		case 'B':
			Car_Move_Backward();
 800109a:	f000 faa9 	bl	80015f0 <Car_Move_Backward>
			break;
 800109e:	e010      	b.n	80010c2 <Task_ControlCar+0xaa>
		case 'V':
			/*if char recieved 'S' then Notify The Task_Esp That There is Hard Brake*/
			Car_Stop();
 80010a0:	f000 fb30 	bl	8001704 <Car_Stop>
			xTaskNotify(Handle_Send_ESP_Status,Hard_Brake_Notification,eSetValueWithOverwrite);
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <Task_ControlCar+0xb0>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	2300      	movs	r3, #0
 80010aa:	2203      	movs	r2, #3
 80010ac:	2105      	movs	r1, #5
 80010ae:	f008 f9ef 	bl	8009490 <xTaskGenericNotify>
			break;
 80010b2:	e006      	b.n	80010c2 <Task_ControlCar+0xaa>
		case 'R':
			Car_Rotate_Right();
 80010b4:	f000 faca 	bl	800164c <Car_Rotate_Right>
			break;
 80010b8:	e003      	b.n	80010c2 <Task_ControlCar+0xaa>
		case 'L':
			Car_Rotate_Left();
 80010ba:	f000 faf5 	bl	80016a8 <Car_Rotate_Left>
			break;
 80010be:	bf00      	nop
 80010c0:	e7ae      	b.n	8001020 <Task_ControlCar+0x8>
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,0,portMAX_DELAY);
 80010c2:	e7ad      	b.n	8001020 <Task_ControlCar+0x8>
 80010c4:	2000078c 	.word	0x2000078c
 80010c8:	20000798 	.word	0x20000798

080010cc <Task_SendEspPeriodic>:

}


void Task_SendEspPeriodic(void *Parameters)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	while(1)
	{
		/*Task will be in Blocked State Waiting for GPS_Task To Notify it*/
		Notify_Status = xTaskNotifyWait(NULL, NULL, &Local_uint32NotificationValue, portMAX_DELAY);
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f008 f976 	bl	80093d0 <xTaskNotifyWait>
 80010e4:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d1f3      	bne.n	80010d4 <Task_SendEspPeriodic+0x8>
		{
			/*Assign GPS and Speed Data to Transmission Buffer*/
			GPSSPEED_voidBuildMsg(Tx_ESP_Buffer, GPS_Data.Longitude, GPS_Data.Latitude, Global_Speed);
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Task_SendEspPeriodic+0x58>)
 80010ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <Task_SendEspPeriodic+0x58>)
 80010f4:	ed93 6b00 	vldr	d6, [r3]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <Task_SendEspPeriodic+0x5c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	eeb0 1a46 	vmov.f32	s2, s12
 8001102:	eef0 1a66 	vmov.f32	s3, s13
 8001106:	eeb0 0a47 	vmov.f32	s0, s14
 800110a:	eef0 0a67 	vmov.f32	s1, s15
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <Task_SendEspPeriodic+0x60>)
 8001110:	f000 f87a 	bl	8001208 <GPSSPEED_voidBuildMsg>

			/*Transmit the Buffer*/
			HAL_UART_Transmit(&huart6, Tx_ESP_Buffer, sizeof(Tx_ESP_Buffer), 1500);
 8001114:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001118:	2223      	movs	r2, #35	; 0x23
 800111a:	4904      	ldr	r1, [pc, #16]	; (800112c <Task_SendEspPeriodic+0x60>)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <Task_SendEspPeriodic+0x64>)
 800111e:	f005 fc99 	bl	8006a54 <HAL_UART_Transmit>
		Notify_Status = xTaskNotifyWait(NULL, NULL, &Local_uint32NotificationValue, portMAX_DELAY);
 8001122:	e7d7      	b.n	80010d4 <Task_SendEspPeriodic+0x8>
 8001124:	20000240 	.word	0x20000240
 8001128:	20000800 	.word	0x20000800
 800112c:	20000210 	.word	0x20000210
 8001130:	20000744 	.word	0x20000744

08001134 <Task_SendEsp_Status>:

}


void Task_SendEsp_Status(void *Parameters)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	ESP_Status_Buffer[0] = '%';
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <Task_SendEsp_Status+0x50>)
 800113e:	2225      	movs	r2, #37	; 0x25
 8001140:	701a      	strb	r2, [r3, #0]
	ESP_Status_Buffer[1] = 'B';
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <Task_SendEsp_Status+0x50>)
 8001144:	2242      	movs	r2, #66	; 0x42
 8001146:	705a      	strb	r2, [r3, #1]
	ESP_Status_Buffer[2] = '^';
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <Task_SendEsp_Status+0x50>)
 800114a:	225e      	movs	r2, #94	; 0x5e
 800114c:	709a      	strb	r2, [r3, #2]
	ESP_Status_Buffer[3] = '!';
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <Task_SendEsp_Status+0x50>)
 8001150:	2221      	movs	r2, #33	; 0x21
 8001152:	70da      	strb	r2, [r3, #3]


	while(1)
	{
		/*Task will be in Blocked State Waiting for The Car to Stop To Notify it*/
		Notify_Status = xTaskNotifyWait(NULL, NULL, &Local_uint32NotificationValue, portMAX_DELAY);
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f008 f936 	bl	80093d0 <xTaskNotifyWait>
 8001164:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f3      	bne.n	8001154 <Task_SendEsp_Status+0x20>
		{
			switch(Local_uint32NotificationValue)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d1f0      	bne.n	8001154 <Task_SendEsp_Status+0x20>
			{
			case Hard_Brake_Notification:
				/*Send Message to ESP That Hard Brake occur*/
				HAL_UART_Transmit(&huart6, ESP_Status_Buffer,sizeof(ESP_Status_Buffer), 1500);
 8001172:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001176:	2204      	movs	r2, #4
 8001178:	4902      	ldr	r1, [pc, #8]	; (8001184 <Task_SendEsp_Status+0x50>)
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <Task_SendEsp_Status+0x54>)
 800117c:	f005 fc6a 	bl	8006a54 <HAL_UART_Transmit>
				break;
 8001180:	bf00      	nop
		Notify_Status = xTaskNotifyWait(NULL, NULL, &Local_uint32NotificationValue, portMAX_DELAY);
 8001182:	e7e7      	b.n	8001154 <Task_SendEsp_Status+0x20>
 8001184:	20000234 	.word	0x20000234
 8001188:	20000744 	.word	0x20000744

0800118c <Task_Recieve_Status_Esp>:

}


void Task_Recieve_Status_Esp(void *Parameters)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b087      	sub	sp, #28
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint32NotificationValue;

	while(1)
	{
		/*Task will be in Blocked State Waiting for RxCallback Function to Notify it*/
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	2100      	movs	r1, #0
 800119e:	2000      	movs	r0, #0
 80011a0:	f008 f916 	bl	80093d0 <xTaskNotifyWait>
 80011a4:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1f3      	bne.n	8001194 <Task_Recieve_Status_Esp+0x8>
		{

			switch(Received_Char_ESP)
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <Task_Recieve_Status_Esp+0x74>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b43      	cmp	r3, #67	; 0x43
 80011b4:	d002      	beq.n	80011bc <Task_Recieve_Status_Esp+0x30>
 80011b6:	2b53      	cmp	r3, #83	; 0x53
 80011b8:	d010      	beq.n	80011dc <Task_Recieve_Status_Esp+0x50>
 80011ba:	e01f      	b.n	80011fc <Task_Recieve_Status_Esp+0x70>
			{
			case 'C':
				Traffic_Condition_Warning();
 80011bc:	f001 fae8 	bl	8002790 <Traffic_Condition_Warning>

				xTimerStart(Handle_Timer_LCDBuzzer,1000);
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <Task_Recieve_Status_Esp+0x78>)
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	f007 fd38 	bl	8008c38 <xTaskGetTickCount>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	2101      	movs	r1, #1
 80011d4:	4620      	mov	r0, r4
 80011d6:	f008 fbf5 	bl	80099c4 <xTimerGenericCommand>
				break;
 80011da:	e00f      	b.n	80011fc <Task_Recieve_Status_Esp+0x70>
			case 'S':
				Traffic_Condition_Warning();
 80011dc:	f001 fad8 	bl	8002790 <Traffic_Condition_Warning>

				xTimerStart(Handle_Timer_LCDBuzzer,1000);
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <Task_Recieve_Status_Esp+0x78>)
 80011e2:	681c      	ldr	r4, [r3, #0]
 80011e4:	f007 fd28 	bl	8008c38 <xTaskGetTickCount>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2300      	movs	r3, #0
 80011f2:	2101      	movs	r1, #1
 80011f4:	4620      	mov	r0, r4
 80011f6:	f008 fbe5 	bl	80099c4 <xTimerGenericCommand>

				break;
 80011fa:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 80011fc:	e7ca      	b.n	8001194 <Task_Recieve_Status_Esp+0x8>
 80011fe:	bf00      	nop
 8001200:	2000078d 	.word	0x2000078d
 8001204:	200007a0 	.word	0x200007a0

08001208 <GPSSPEED_voidBuildMsg>:
//
//	Msg_Array[24 + Local_uint8Counter + floatLength] = '\0'; // Ensure null-termination for safety
//}

void GPSSPEED_voidBuildMsg(uint8_t* Msg_Array,double Copy_doubleGPS_Longitude,double Copy_doubleGPS_Latitude,uint16_t Copy_uint16Speed)
{
 8001208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800120c:	b092      	sub	sp, #72	; 0x48
 800120e:	af02      	add	r7, sp, #8
 8001210:	6178      	str	r0, [r7, #20]
 8001212:	ed87 0b02 	vstr	d0, [r7, #8]
 8001216:	ed87 1b00 	vstr	d1, [r7]
 800121a:	460b      	mov	r3, r1
 800121c:	827b      	strh	r3, [r7, #18]
 800121e:	466b      	mov	r3, sp
 8001220:	469a      	mov	sl, r3

uint8_t Local_uint8LatitudeArr[11];
uint8_t Local_uint8LongitudeArr[11];
uint8_t Local_uint8SpeedElements;

uint8_t Local_uint8Counter=0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
if(Copy_uint16Speed<10)
 8001228:	8a7b      	ldrh	r3, [r7, #18]
 800122a:	2b09      	cmp	r3, #9
 800122c:	d803      	bhi.n	8001236 <GPSSPEED_voidBuildMsg+0x2e>
{
	Local_uint8SpeedElements = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001234:	e014      	b.n	8001260 <GPSSPEED_voidBuildMsg+0x58>

}
else if(Copy_uint16Speed<100)
 8001236:	8a7b      	ldrh	r3, [r7, #18]
 8001238:	2b63      	cmp	r3, #99	; 0x63
 800123a:	d803      	bhi.n	8001244 <GPSSPEED_voidBuildMsg+0x3c>
{
	Local_uint8SpeedElements=2;
 800123c:	2302      	movs	r3, #2
 800123e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001242:	e00d      	b.n	8001260 <GPSSPEED_voidBuildMsg+0x58>
}
else if((Copy_uint16Speed>100) && (Copy_uint16Speed<1000))
 8001244:	8a7b      	ldrh	r3, [r7, #18]
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d907      	bls.n	800125a <GPSSPEED_voidBuildMsg+0x52>
 800124a:	8a7b      	ldrh	r3, [r7, #18]
 800124c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001250:	d203      	bcs.n	800125a <GPSSPEED_voidBuildMsg+0x52>
{
	Local_uint8SpeedElements=3;
 8001252:	2303      	movs	r3, #3
 8001254:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001258:	e002      	b.n	8001260 <GPSSPEED_voidBuildMsg+0x58>
}
else
{
	Local_uint8SpeedElements=4;
 800125a:	2304      	movs	r3, #4
 800125c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
}
uint8_t Local_uint8SpeedArr[Local_uint8SpeedElements+1];
 8001260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001264:	1c5e      	adds	r6, r3, #1
 8001266:	1e73      	subs	r3, r6, #1
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
 800126a:	4632      	mov	r2, r6
 800126c:	2300      	movs	r3, #0
 800126e:	4690      	mov	r8, r2
 8001270:	4699      	mov	r9, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800127e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001286:	4632      	mov	r2, r6
 8001288:	2300      	movs	r3, #0
 800128a:	4614      	mov	r4, r2
 800128c:	461d      	mov	r5, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	00eb      	lsls	r3, r5, #3
 8001298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800129c:	00e2      	lsls	r2, r4, #3
 800129e:	4633      	mov	r3, r6
 80012a0:	3307      	adds	r3, #7
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	ebad 0d03 	sub.w	sp, sp, r3
 80012aa:	ab02      	add	r3, sp, #8
 80012ac:	3300      	adds	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34

 /*Putting the lat and lon in a string form to be sent to the esp*/
 snprintf(&Local_uint8LongitudeArr,sizeof(Local_uint8LongitudeArr),"%.6f",Copy_doubleGPS_Longitude);
 80012b0:	f107 001c 	add.w	r0, r7, #28
 80012b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012b8:	e9cd 2300 	strd	r2, r3, [sp]
 80012bc:	4a50      	ldr	r2, [pc, #320]	; (8001400 <GPSSPEED_voidBuildMsg+0x1f8>)
 80012be:	210b      	movs	r1, #11
 80012c0:	f00a f874 	bl	800b3ac <sniprintf>
 snprintf(&Local_uint8LatitudeArr,sizeof(Local_uint8LatitudeArr),"%.6f",Copy_doubleGPS_Latitude);
 80012c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012cc:	e9cd 2300 	strd	r2, r3, [sp]
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <GPSSPEED_voidBuildMsg+0x1f8>)
 80012d2:	210b      	movs	r1, #11
 80012d4:	f00a f86a 	bl	800b3ac <sniprintf>

 snprintf(&Local_uint8SpeedArr,sizeof(Local_uint8SpeedArr),"%d",Copy_uint16Speed);
 80012d8:	4631      	mov	r1, r6
 80012da:	8a7b      	ldrh	r3, [r7, #18]
 80012dc:	4a49      	ldr	r2, [pc, #292]	; (8001404 <GPSSPEED_voidBuildMsg+0x1fc>)
 80012de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012e0:	f00a f864 	bl	800b3ac <sniprintf>

 Msg_Array[0]='#';
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2223      	movs	r2, #35	; 0x23
 80012e8:	701a      	strb	r2, [r3, #0]
 Msg_Array[1]=Local_uint8LongitudeArr[0];
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	7f3a      	ldrb	r2, [r7, #28]
 80012f0:	701a      	strb	r2, [r3, #0]
 Msg_Array[2]=Local_uint8LongitudeArr[1];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	7f7a      	ldrb	r2, [r7, #29]
 80012f8:	701a      	strb	r2, [r3, #0]
 Msg_Array[3]=Local_uint8LongitudeArr[2];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3303      	adds	r3, #3
 80012fe:	7fba      	ldrb	r2, [r7, #30]
 8001300:	701a      	strb	r2, [r3, #0]
 Msg_Array[4]=Local_uint8LongitudeArr[3];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3304      	adds	r3, #4
 8001306:	7ffa      	ldrb	r2, [r7, #31]
 8001308:	701a      	strb	r2, [r3, #0]

 Msg_Array[5]=Local_uint8LongitudeArr[4];
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3305      	adds	r3, #5
 800130e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001312:	701a      	strb	r2, [r3, #0]
 Msg_Array[6]=Local_uint8LongitudeArr[5];
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3306      	adds	r3, #6
 8001318:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800131c:	701a      	strb	r2, [r3, #0]
 Msg_Array[7]=Local_uint8LongitudeArr[6];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3307      	adds	r3, #7
 8001322:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001326:	701a      	strb	r2, [r3, #0]
 Msg_Array[8]=Local_uint8LongitudeArr[7];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3308      	adds	r3, #8
 800132c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001330:	701a      	strb	r2, [r3, #0]
 Msg_Array[9]=Local_uint8LongitudeArr[8];
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3309      	adds	r3, #9
 8001336:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800133a:	701a      	strb	r2, [r3, #0]

 Msg_Array[10]='*';
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	330a      	adds	r3, #10
 8001340:	222a      	movs	r2, #42	; 0x2a
 8001342:	701a      	strb	r2, [r3, #0]

 Msg_Array[11]= Local_uint8LatitudeArr[0];
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	330b      	adds	r3, #11
 8001348:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800134c:	701a      	strb	r2, [r3, #0]
 Msg_Array[12]= Local_uint8LatitudeArr[1];
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	330c      	adds	r3, #12
 8001352:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001356:	701a      	strb	r2, [r3, #0]
 Msg_Array[13]= Local_uint8LatitudeArr[2];
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	330d      	adds	r3, #13
 800135c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001360:	701a      	strb	r2, [r3, #0]
 Msg_Array[14]= Local_uint8LatitudeArr[3];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	330e      	adds	r3, #14
 8001366:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800136a:	701a      	strb	r2, [r3, #0]
 Msg_Array[15]= Local_uint8LatitudeArr[4];
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	330f      	adds	r3, #15
 8001370:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001374:	701a      	strb	r2, [r3, #0]
 Msg_Array[16]= Local_uint8LatitudeArr[5];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3310      	adds	r3, #16
 800137a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800137e:	701a      	strb	r2, [r3, #0]
 Msg_Array[17]= Local_uint8LatitudeArr[6];
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3311      	adds	r3, #17
 8001384:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001388:	701a      	strb	r2, [r3, #0]
 Msg_Array[18]= Local_uint8LatitudeArr[7];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3312      	adds	r3, #18
 800138e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001392:	701a      	strb	r2, [r3, #0]
 Msg_Array[19]= Local_uint8LatitudeArr[8];
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3313      	adds	r3, #19
 8001398:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800139c:	701a      	strb	r2, [r3, #0]

 Msg_Array[20]= '&';
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3314      	adds	r3, #20
 80013a2:	2226      	movs	r2, #38	; 0x26
 80013a4:	701a      	strb	r2, [r3, #0]


 for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 80013a6:	e00f      	b.n	80013c8 <GPSSPEED_voidBuildMsg+0x1c0>
 {
	 Msg_Array[21+Local_uint8Counter]=Local_uint8SpeedArr[Local_uint8Counter];
 80013a8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80013ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013b0:	3315      	adds	r3, #21
 80013b2:	4619      	mov	r1, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	440b      	add	r3, r1
 80013b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ba:	5c8a      	ldrb	r2, [r1, r2]
 80013bc:	701a      	strb	r2, [r3, #0]
 for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 80013be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013c2:	3301      	adds	r3, #1
 80013c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80013c8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80013cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3e9      	bcc.n	80013a8 <GPSSPEED_voidBuildMsg+0x1a0>
 }

Msg_Array[21+Local_uint8Counter]='^';
 80013d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013d8:	3315      	adds	r3, #21
 80013da:	461a      	mov	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4413      	add	r3, r2
 80013e0:	225e      	movs	r2, #94	; 0x5e
 80013e2:	701a      	strb	r2, [r3, #0]
Msg_Array[22+Local_uint8Counter]= '!';
 80013e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013e8:	3316      	adds	r3, #22
 80013ea:	461a      	mov	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4413      	add	r3, r2
 80013f0:	2221      	movs	r2, #33	; 0x21
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	46d5      	mov	sp, sl

}
 80013f6:	bf00      	nop
 80013f8:	3740      	adds	r7, #64	; 0x40
 80013fa:	46bd      	mov	sp, r7
 80013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001400:	0800e660 	.word	0x0800e660
 8001404:	0800e668 	.word	0x0800e668

08001408 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0



#elif Buzzer_Timer_Connected == TIMER3
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM3->CCR1=99;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <Buzzer_voidHighSound+0x18>)
 800140e:	2263      	movs	r2, #99	; 0x63
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001412:	2100      	movs	r1, #0
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <Buzzer_voidHighSound+0x1c>)
 8001416:	f004 fadd 	bl	80059d4 <HAL_TIM_PWM_Start>

#endif



}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40000400 	.word	0x40000400
 8001424:	20000624 	.word	0x20000624

08001428 <Buzzer_voidStop>:

void Buzzer_voidStop(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0


#elif Buzzer_Timer_Connected == TIMER3
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800142c:	2100      	movs	r1, #0
 800142e:	4802      	ldr	r0, [pc, #8]	; (8001438 <Buzzer_voidStop+0x10>)
 8001430:	f004 fb98 	bl	8005b64 <HAL_TIM_PWM_Stop>




#endif
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000624 	.word	0x20000624
 800143c:	00000000 	.word	0x00000000

08001440 <Calculate_Car_Speed>:


extern uint32_t edges_counter;

float Calculate_Car_Speed()
{float Local_uint16Speed;
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
Local_uint16Speed = (edges_counter * 360 /50) * 2 * 3.14 * 0.03;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <Calculate_Car_Speed+0x78>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <Calculate_Car_Speed+0x7c>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f871 	bl	8000544 <__aeabi_ui2d>
 8001462:	a311      	add	r3, pc, #68	; (adr r3, 80014a8 <Calculate_Car_Speed+0x68>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8e6 	bl	8000638 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	a30e      	add	r3, pc, #56	; (adr r3, 80014b0 <Calculate_Car_Speed+0x70>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8dd 	bl	8000638 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fbcf 	bl	8000c28 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	607b      	str	r3, [r7, #4]
edges_counter=0;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <Calculate_Car_Speed+0x78>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
return Local_uint16Speed;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ee07 3a90 	vmov	s15, r3
}
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	f3af 8000 	nop.w
 80014a8:	51eb851f 	.word	0x51eb851f
 80014ac:	40091eb8 	.word	0x40091eb8
 80014b0:	eb851eb8 	.word	0xeb851eb8
 80014b4:	3f9eb851 	.word	0x3f9eb851
 80014b8:	20000238 	.word	0x20000238
 80014bc:	51eb851f 	.word	0x51eb851f

080014c0 <HAL_UART_RxCpltCallback>:


/*Func will Called if there is a char Recieved,Then give notify to specific task
 *  it will switch to the task control car */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
	//static portBASE_TYPE xHigherPriorityTaskWoken;

	if(huart->Instance == USART3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_UART_RxCpltCallback+0x60>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10e      	bne.n	80014f0 <HAL_UART_RxCpltCallback+0x30>
	{

		/*Give the Notification to the CarControl task*/
		xTaskNotifyFromISR(Handle_Car_Control,NULL,eNoAction,NULL);
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_UART_RxCpltCallback+0x64>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	f008 f894 	bl	800960c <xTaskGenericNotifyFromISR>
		HAL_UART_Receive_IT(&huart3, &Received_Char_Bluetooth, 1);
 80014e4:	2201      	movs	r2, #1
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <HAL_UART_RxCpltCallback+0x68>)
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <HAL_UART_RxCpltCallback+0x6c>)
 80014ea:	f005 fb3e 	bl	8006b6a <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart6, (uint8_t *)&Received_Char_ESP, 1);



	}
}
 80014ee:	e012      	b.n	8001516 <HAL_UART_RxCpltCallback+0x56>
	else if(huart->Instance == USART6)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_UART_RxCpltCallback+0x70>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10d      	bne.n	8001516 <HAL_UART_RxCpltCallback+0x56>
		xTaskNotifyFromISR(Handle_Recieve_ESP_Status, NULL,eNoAction,NULL);
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_UART_RxCpltCallback+0x74>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	f008 f880 	bl	800960c <xTaskGenericNotifyFromISR>
		HAL_UART_Receive_IT(&huart6, (uint8_t *)&Received_Char_ESP, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	490a      	ldr	r1, [pc, #40]	; (8001538 <HAL_UART_RxCpltCallback+0x78>)
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <HAL_UART_RxCpltCallback+0x7c>)
 8001512:	f005 fb2a 	bl	8006b6a <HAL_UART_Receive_IT>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40004800 	.word	0x40004800
 8001524:	20000790 	.word	0x20000790
 8001528:	2000078c 	.word	0x2000078c
 800152c:	200006fc 	.word	0x200006fc
 8001530:	40011400 	.word	0x40011400
 8001534:	2000079c 	.word	0x2000079c
 8001538:	2000078d 	.word	0x2000078d
 800153c:	20000744 	.word	0x20000744

08001540 <HAL_TIM_IC_CaptureCallback>:


/*Interrupt come every rising edge*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001550:	d10c      	bne.n	800156c <HAL_TIM_IC_CaptureCallback+0x2c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <HAL_TIM_IC_CaptureCallback+0x22>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7f1b      	ldrb	r3, [r3, #28]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d104      	bne.n	800156c <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x38>)
 800156a:	6013      	str	r3, [r2, #0]
	}
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	20000238 	.word	0x20000238

0800157c <CallBack_TimerLCDBuzzer>:


void CallBack_TimerLCDBuzzer(TimerHandle_t xTimer)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	/*Stopping the buzzer*/
	Buzzer_voidStop();
 8001584:	f7ff ff50 	bl	8001428 <Buzzer_voidStop>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 8001588:	f000 fb34 	bl	8001bf4 <LCD_voidClearDisplay>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <Car_Move_Forward_High_Speed>:

void Motor4_Rotate_CW(void);
void Motor4_Rotate_CCW(void);


void Car_Move_Forward_High_Speed(void){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001598:	f000 f8cc 	bl	8001734 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <Car_Move_Forward_High_Speed+0x54>)
 800159e:	2263      	movs	r2, #99	; 0x63
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <Car_Move_Forward_High_Speed+0x54>)
 80015a4:	2263      	movs	r2, #99	; 0x63
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <Car_Move_Forward_High_Speed+0x54>)
 80015aa:	2263      	movs	r2, #99	; 0x63
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <Car_Move_Forward_High_Speed+0x54>)
 80015b0:	2263      	movs	r2, #99	; 0x63
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80015b4:	2100      	movs	r1, #0
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <Car_Move_Forward_High_Speed+0x58>)
 80015b8:	f004 fa0c 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80015bc:	2104      	movs	r1, #4
 80015be:	480b      	ldr	r0, [pc, #44]	; (80015ec <Car_Move_Forward_High_Speed+0x58>)
 80015c0:	f004 fa08 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80015c4:	2108      	movs	r1, #8
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <Car_Move_Forward_High_Speed+0x58>)
 80015c8:	f004 fa04 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80015cc:	210c      	movs	r1, #12
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <Car_Move_Forward_High_Speed+0x58>)
 80015d0:	f004 fa00 	bl	80059d4 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same direction*/
	Motor1_Rotate_CW();
 80015d4:	f000 f8e6 	bl	80017a4 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 80015d8:	f000 f90c 	bl	80017f4 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 80015dc:	f000 f92e 	bl	800183c <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 80015e0:	f000 f950 	bl	8001884 <Motor4_Rotate_CW>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40010000 	.word	0x40010000
 80015ec:	20000594 	.word	0x20000594

080015f0 <Car_Move_Backward>:
	Motor2_Rotate_CW();
	Motor3_Rotate_CW();
	Motor4_Rotate_CW();
}
void Car_Move_Backward(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80015f4:	f000 f89e 	bl	8001734 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <Car_Move_Backward+0x54>)
 80015fa:	2263      	movs	r2, #99	; 0x63
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <Car_Move_Backward+0x54>)
 8001600:	2263      	movs	r2, #99	; 0x63
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <Car_Move_Backward+0x54>)
 8001606:	2263      	movs	r2, #99	; 0x63
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <Car_Move_Backward+0x54>)
 800160c:	2263      	movs	r2, #99	; 0x63
 800160e:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001610:	2100      	movs	r1, #0
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <Car_Move_Backward+0x58>)
 8001614:	f004 f9de 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001618:	2104      	movs	r1, #4
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <Car_Move_Backward+0x58>)
 800161c:	f004 f9da 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001620:	2108      	movs	r1, #8
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <Car_Move_Backward+0x58>)
 8001624:	f004 f9d6 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001628:	210c      	movs	r1, #12
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <Car_Move_Backward+0x58>)
 800162c:	f004 f9d2 	bl	80059d4 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same  direction*/
	Motor1_Rotate_CCW();
 8001630:	f000 f8cc 	bl	80017cc <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 8001634:	f000 f8f0 	bl	8001818 <Motor2_Rotate_CCW>
	Motor3_Rotate_CCW();
 8001638:	f000 f912 	bl	8001860 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 800163c:	f000 f934 	bl	80018a8 <Motor4_Rotate_CCW>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010000 	.word	0x40010000
 8001648:	20000594 	.word	0x20000594

0800164c <Car_Rotate_Right>:

void Car_Rotate_Right(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001650:	f000 f870 	bl	8001734 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <Car_Rotate_Right+0x54>)
 8001656:	2263      	movs	r2, #99	; 0x63
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <Car_Rotate_Right+0x54>)
 800165c:	2263      	movs	r2, #99	; 0x63
 800165e:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <Car_Rotate_Right+0x54>)
 8001662:	2263      	movs	r2, #99	; 0x63
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <Car_Rotate_Right+0x54>)
 8001668:	2263      	movs	r2, #99	; 0x63
 800166a:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 800166c:	2100      	movs	r1, #0
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <Car_Rotate_Right+0x58>)
 8001670:	f004 f9b0 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001674:	2104      	movs	r1, #4
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <Car_Rotate_Right+0x58>)
 8001678:	f004 f9ac 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 800167c:	2108      	movs	r1, #8
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <Car_Rotate_Right+0x58>)
 8001680:	f004 f9a8 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001684:	210c      	movs	r1, #12
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <Car_Rotate_Right+0x58>)
 8001688:	f004 f9a4 	bl	80059d4 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CCW();
 800168c:	f000 f89e 	bl	80017cc <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 8001690:	f000 f8c2 	bl	8001818 <Motor2_Rotate_CCW>
	Motor3_Rotate_CW();
 8001694:	f000 f8d2 	bl	800183c <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 8001698:	f000 f8f4 	bl	8001884 <Motor4_Rotate_CW>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010000 	.word	0x40010000
 80016a4:	20000594 	.word	0x20000594

080016a8 <Car_Rotate_Left>:
void Car_Rotate_Left(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80016ac:	f000 f842 	bl	8001734 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=LOW_SPEED;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <Car_Rotate_Left+0x54>)
 80016b2:	2246      	movs	r2, #70	; 0x46
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <Car_Rotate_Left+0x54>)
 80016b8:	2246      	movs	r2, #70	; 0x46
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <Car_Rotate_Left+0x54>)
 80016be:	2246      	movs	r2, #70	; 0x46
 80016c0:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <Car_Rotate_Left+0x54>)
 80016c4:	2246      	movs	r2, #70	; 0x46
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80016c8:	2100      	movs	r1, #0
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <Car_Rotate_Left+0x58>)
 80016cc:	f004 f982 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80016d0:	2104      	movs	r1, #4
 80016d2:	480b      	ldr	r0, [pc, #44]	; (8001700 <Car_Rotate_Left+0x58>)
 80016d4:	f004 f97e 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80016d8:	2108      	movs	r1, #8
 80016da:	4809      	ldr	r0, [pc, #36]	; (8001700 <Car_Rotate_Left+0x58>)
 80016dc:	f004 f97a 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80016e0:	210c      	movs	r1, #12
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <Car_Rotate_Left+0x58>)
 80016e4:	f004 f976 	bl	80059d4 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 80016e8:	f000 f85c 	bl	80017a4 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 80016ec:	f000 f882 	bl	80017f4 <Motor2_Rotate_CW>
	Motor3_Rotate_CCW();
 80016f0:	f000 f8b6 	bl	8001860 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 80016f4:	f000 f8d8 	bl	80018a8 <Motor4_Rotate_CCW>

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010000 	.word	0x40010000
 8001700:	20000594 	.word	0x20000594

08001704 <Car_Stop>:



}
void Car_Stop(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    /*Stopping the PWM generation on both motors*/
	HAL_TIM_PWM_Stop(Motor1_Timer, Motor1_Channel);
 8001708:	2100      	movs	r1, #0
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <Car_Stop+0x2c>)
 800170c:	f004 fa2a 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor2_Timer, Motor2_Channel);
 8001710:	2104      	movs	r1, #4
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <Car_Stop+0x2c>)
 8001714:	f004 fa26 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor3_Timer, Motor3_Channel);
 8001718:	2108      	movs	r1, #8
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <Car_Stop+0x2c>)
 800171c:	f004 fa22 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor4_Timer, Motor4_Channel);
 8001720:	210c      	movs	r1, #12
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <Car_Stop+0x2c>)
 8001724:	f004 fa1e 	bl	8005b64 <HAL_TIM_PWM_Stop>
	/*Disabling both motors*/
	Motors_Disabling();
 8001728:	f000 f804 	bl	8001734 <Motors_Disabling>

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000594 	.word	0x20000594

08001734 <Motors_Disabling>:
static void Motors_Disabling(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port1, IN1, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2110      	movs	r1, #16
 800173c:	4817      	ldr	r0, [pc, #92]	; (800179c <Motors_Disabling+0x68>)
 800173e:	f002 fd0f 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port2, IN2, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001748:	4815      	ldr	r0, [pc, #84]	; (80017a0 <Motors_Disabling+0x6c>)
 800174a:	f002 fd09 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN3, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <Motors_Disabling+0x68>)
 8001756:	f002 fd03 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN4, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <Motors_Disabling+0x68>)
 8001762:	f002 fcfd 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN5, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176c:	480b      	ldr	r0, [pc, #44]	; (800179c <Motors_Disabling+0x68>)
 800176e:	f002 fcf7 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN6, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <Motors_Disabling+0x68>)
 800177a:	f002 fcf1 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN7, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <Motors_Disabling+0x68>)
 8001786:	f002 fceb 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN8, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <Motors_Disabling+0x68>)
 8001792:	f002 fce5 	bl	8004160 <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000

080017a4 <Motor1_Rotate_CW>:

void Motor1_Rotate_CW(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port1,IN1, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2110      	movs	r1, #16
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <Motor1_Rotate_CW+0x20>)
 80017ae:	f002 fcd7 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port2,IN2, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <Motor1_Rotate_CW+0x24>)
 80017ba:	f002 fcd1 	bl	8004160 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40020800 	.word	0x40020800
 80017c8:	40020000 	.word	0x40020000

080017cc <Motor1_Rotate_CCW>:
 void Motor1_Rotate_CCW(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port1,IN1, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2110      	movs	r1, #16
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <Motor1_Rotate_CCW+0x20>)
 80017d6:	f002 fcc3 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port2,IN2, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <Motor1_Rotate_CCW+0x24>)
 80017e2:	f002 fcbd 	bl	8004160 <HAL_GPIO_WritePin>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020000 	.word	0x40020000

080017f4 <Motor2_Rotate_CW>:
void Motor2_Rotate_CW(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <Motor2_Rotate_CW+0x20>)
 8001800:	f002 fcae 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <Motor2_Rotate_CW+0x20>)
 800180c:	f002 fca8 	bl	8004160 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020800 	.word	0x40020800

08001818 <Motor2_Rotate_CCW>:
void Motor2_Rotate_CCW(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <Motor2_Rotate_CCW+0x20>)
 8001824:	f002 fc9c 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182e:	4802      	ldr	r0, [pc, #8]	; (8001838 <Motor2_Rotate_CCW+0x20>)
 8001830:	f002 fc96 	bl	8004160 <HAL_GPIO_WritePin>

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020800 	.word	0x40020800

0800183c <Motor3_Rotate_CW>:




 void Motor3_Rotate_CW(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <Motor3_Rotate_CW+0x20>)
 8001848:	f002 fc8a 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001852:	4802      	ldr	r0, [pc, #8]	; (800185c <Motor3_Rotate_CW+0x20>)
 8001854:	f002 fc84 	bl	8004160 <HAL_GPIO_WritePin>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40020800 	.word	0x40020800

08001860 <Motor3_Rotate_CCW>:
 void Motor3_Rotate_CCW(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <Motor3_Rotate_CCW+0x20>)
 800186c:	f002 fc78 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001876:	4802      	ldr	r0, [pc, #8]	; (8001880 <Motor3_Rotate_CCW+0x20>)
 8001878:	f002 fc72 	bl	8004160 <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40020800 	.word	0x40020800

08001884 <Motor4_Rotate_CW>:



 void Motor4_Rotate_CW(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <Motor4_Rotate_CW+0x20>)
 8001890:	f002 fc66 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189a:	4802      	ldr	r0, [pc, #8]	; (80018a4 <Motor4_Rotate_CW+0x20>)
 800189c:	f002 fc60 	bl	8004160 <HAL_GPIO_WritePin>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40020800 	.word	0x40020800

080018a8 <Motor4_Rotate_CCW>:
 void Motor4_Rotate_CCW(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <Motor4_Rotate_CCW+0x20>)
 80018b4:	f002 fc54 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	4802      	ldr	r0, [pc, #8]	; (80018c8 <Motor4_Rotate_CCW+0x20>)
 80018c0:	f002 fc4e 	bl	8004160 <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020800 	.word	0x40020800

080018cc <GPS_uint8DecodeGGAData>:

/*
 *
 */
uint8_t GPS_uint8DecodeGGAData(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	uint8_t Local_uint8ErrorCode = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]


	if(Wait_for("GGA") == 1)
 80018d6:	4827      	ldr	r0, [pc, #156]	; (8001974 <GPS_uint8DecodeGGAData+0xa8>)
 80018d8:	f000 fe74 	bl	80025c4 <Wait_for>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d111      	bne.n	8001906 <GPS_uint8DecodeGGAData+0x3a>
	{
		Copy_upto("*", GGA);
 80018e2:	4925      	ldr	r1, [pc, #148]	; (8001978 <GPS_uint8DecodeGGAData+0xac>)
 80018e4:	4825      	ldr	r0, [pc, #148]	; (800197c <GPS_uint8DecodeGGAData+0xb0>)
 80018e6:	f000 fded 	bl	80024c4 <Copy_upto>
		if(decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0)
 80018ea:	4925      	ldr	r1, [pc, #148]	; (8001980 <GPS_uint8DecodeGGAData+0xb4>)
 80018ec:	4822      	ldr	r0, [pc, #136]	; (8001978 <GPS_uint8DecodeGGAData+0xac>)
 80018ee:	f000 f9bf 	bl	8001c70 <decodeGGA>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <GPS_uint8DecodeGGAData+0x34>
		{
			flagGGA = Valid_Data;  //indicate the Data is Valid
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <GPS_uint8DecodeGGAData+0xb8>)
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e002      	b.n	8001906 <GPS_uint8DecodeGGAData+0x3a>
		}
		else
		{
			flagGGA = unValid_Data; //indicate the Data is InValid
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <GPS_uint8DecodeGGAData+0xb8>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		}
	}

	if(flagGGA == Valid_Data)
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <GPS_uint8DecodeGGAData+0xb8>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d12a      	bne.n	8001964 <GPS_uint8DecodeGGAData+0x98>
	{
		Local_uint8ErrorCode = Decode_Success;
 800190e:	2301      	movs	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]

		GPS_Data.Latitude    =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.latitude);
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <GPS_uint8DecodeGGAData+0xb4>)
 8001914:	ed93 7b00 	vldr	d7, [r3]
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	f000 f834 	bl	800198c <GPS_doubleLongLat_Calculation>
 8001924:	eeb0 7a40 	vmov.f32	s14, s0
 8001928:	eef0 7a60 	vmov.f32	s15, s1
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <GPS_uint8DecodeGGAData+0xbc>)
 800192e:	ed83 7b00 	vstr	d7, [r3]
		GPS_Data.Longitude   =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.longitude);
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <GPS_uint8DecodeGGAData+0xb4>)
 8001934:	ed93 7b04 	vldr	d7, [r3, #16]
 8001938:	eeb0 0a47 	vmov.f32	s0, s14
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	f000 f824 	bl	800198c <GPS_doubleLongLat_Calculation>
 8001944:	eeb0 7a40 	vmov.f32	s14, s0
 8001948:	eef0 7a60 	vmov.f32	s15, s1
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <GPS_uint8DecodeGGAData+0xbc>)
 800194e:	ed83 7b02 	vstr	d7, [r3, #8]
		GPS_Data.East_West   =    GPS_NMEA_DATA.ggastruct.lcation.EW;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <GPS_uint8DecodeGGAData+0xb4>)
 8001954:	7e1a      	ldrb	r2, [r3, #24]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <GPS_uint8DecodeGGAData+0xbc>)
 8001958:	741a      	strb	r2, [r3, #16]
		GPS_Data.North_South =    GPS_NMEA_DATA.ggastruct.lcation.NS;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <GPS_uint8DecodeGGAData+0xb4>)
 800195c:	7a1a      	ldrb	r2, [r3, #8]
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <GPS_uint8DecodeGGAData+0xbc>)
 8001960:	745a      	strb	r2, [r3, #17]
 8001962:	e001      	b.n	8001968 <GPS_uint8DecodeGGAData+0x9c>

	}
	else
	{
		Local_uint8ErrorCode = Decode_Failed;
 8001964:	2302      	movs	r3, #2
 8001966:	71fb      	strb	r3, [r7, #7]


	}

	return Local_uint8ErrorCode;
 8001968:	79fb      	ldrb	r3, [r7, #7]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	0800e67c 	.word	0x0800e67c
 8001978:	200002b8 	.word	0x200002b8
 800197c:	0800e680 	.word	0x0800e680
 8001980:	20000258 	.word	0x20000258
 8001984:	2000031c 	.word	0x2000031c
 8001988:	20000240 	.word	0x20000240

0800198c <GPS_doubleLongLat_Calculation>:


}

double GPS_doubleLongLat_Calculation(double lat)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	ed87 0b00 	vstr	d0, [r7]
	uint8_t intValue ;
	double fraction;
	intValue = lat; //intValue = 31 instead of 31.39049
 8001996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199a:	f7ff f925 	bl	8000be8 <__aeabi_d2uiz>
 800199e:	4603      	mov	r3, r0
 80019a0:	75fb      	strb	r3, [r7, #23]
	fraction = lat - intValue; // fraction = 0.39049
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fddd 	bl	8000564 <__aeabi_i2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b2:	f7fe fc89 	bl	80002c8 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	fraction = (double) ((fraction * 100.0) / 60.0) ; //fraction = (39.049)/60 = 0.6532
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <GPS_doubleLongLat_Calculation+0x80>)
 80019c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c8:	f7fe fe36 	bl	8000638 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <GPS_doubleLongLat_Calculation+0x84>)
 80019da:	f7fe ff57 	bl	800088c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (double) (intValue + fraction); // return value = 31 + 0.6532 = 31.6532
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdbb 	bl	8000564 <__aeabi_i2d>
 80019ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f2:	f7fe fc6b 	bl	80002cc <__adddf3>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80019fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001a02:	eef0 0a67 	vmov.f32	s1, s15
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40590000 	.word	0x40590000
 8001a10:	404e0000 	.word	0x404e0000

08001a14 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8001a18:	2033      	movs	r0, #51	; 0x33
 8001a1a:	f000 f829 	bl	8001a70 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8001a1e:	2032      	movs	r0, #50	; 0x32
 8001a20:	f000 f826 	bl	8001a70 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f002 f86f 	bl	8003b08 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8001a2a:	2028      	movs	r0, #40	; 0x28
 8001a2c:	f000 f820 	bl	8001a70 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a30:	2032      	movs	r0, #50	; 0x32
 8001a32:	f002 f869 	bl	8003b08 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 f81a 	bl	8001a70 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a3c:	2032      	movs	r0, #50	; 0x32
 8001a3e:	f002 f863 	bl	8003b08 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8001a42:	2006      	movs	r0, #6
 8001a44:	f000 f814 	bl	8001a70 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a48:	2032      	movs	r0, #50	; 0x32
 8001a4a:	f002 f85d 	bl	8003b08 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8001a4e:	200c      	movs	r0, #12
 8001a50:	f000 f80e 	bl	8001a70 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a54:	2032      	movs	r0, #50	; 0x32
 8001a56:	f002 f857 	bl	8003b08 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f000 f808 	bl	8001a70 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a60:	2032      	movs	r0, #50	; 0x32
 8001a62:	f002 f851 	bl	8003b08 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8001a66:	2080      	movs	r0, #128	; 0x80
 8001a68:	f000 f802 	bl	8001a70 <LCD_voidSendCommand>

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f023 030f 	bic.w	r3, r3, #15
 8001a80:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	f043 030c 	orr.w	r3, r3, #12
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	f043 030c 	orr.w	r3, r3, #12
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8001aa6:	7bbb      	ldrb	r3, [r7, #14]
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001ab0:	f107 0208 	add.w	r2, r7, #8
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2304      	movs	r3, #4
 8001aba:	214e      	movs	r1, #78	; 0x4e
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <LCD_voidSendCommand+0x5c>)
 8001abe:	f002 fcad 	bl	800441c <HAL_I2C_Master_Transmit>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000540 	.word	0x20000540

08001ad0 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f023 030f 	bic.w	r3, r3, #15
 8001ae0:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	f043 030d 	orr.w	r3, r3, #13
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	f043 0309 	orr.w	r3, r3, #9
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
 8001afe:	f043 030d 	orr.w	r3, r3, #13
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 8001b06:	7bbb      	ldrb	r3, [r7, #14]
 8001b08:	f043 0309 	orr.w	r3, r3, #9
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001b10:	f107 0208 	add.w	r2, r7, #8
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2304      	movs	r3, #4
 8001b1a:	214e      	movs	r1, #78	; 0x4e
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <LCD_voidSendCharachter+0x5c>)
 8001b1e:	f002 fc7d 	bl	800441c <HAL_I2C_Master_Transmit>

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000540 	.word	0x20000540

08001b30 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001b3c:	e009      	b.n	8001b52 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffc2 	bl	8001ad0 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ef      	bne.n	8001b3e <LCD_voidSendString+0xe>
	}


}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d82d      	bhi.n	8001bde <LCD_voidSetPositionXY+0x76>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <LCD_voidSetPositionXY+0x20>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001ba3 	.word	0x08001ba3
 8001b90:	08001bb7 	.word	0x08001bb7
 8001b94:	08001bcb 	.word	0x08001bcb
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ba0:	e01d      	b.n	8001bde <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	3340      	adds	r3, #64	; 0x40
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	73fb      	strb	r3, [r7, #15]
		break;
 8001bb4:	e013      	b.n	8001bde <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	3314      	adds	r3, #20
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	73fb      	strb	r3, [r7, #15]
		break;
 8001bc8:	e009      	b.n	8001bde <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	3354      	adds	r3, #84	; 0x54
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	73fb      	strb	r3, [r7, #15]
		break;
 8001bdc:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff45 	bl	8001a70 <LCD_voidSendCommand>
		HAL_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 ff8e 	bl	8003b08 <HAL_Delay>

}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	/*Clearing the display by command 0b00000001*/
	LCD_voidSendCommand(0b00000001);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff ff39 	bl	8001a70 <LCD_voidSendCommand>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	4608      	mov	r0, r1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70bb      	strb	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	3340      	adds	r3, #64	; 0x40
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff21 	bl	8001a70 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e009      	b.n	8001c48 <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff47 	bl	8001ad0 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	3301      	adds	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b07      	cmp	r3, #7
 8001c4c:	d9f2      	bls.n	8001c34 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001c4e:	787a      	ldrb	r2, [r7, #1]
 8001c50:	78bb      	ldrb	r3, [r7, #2]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff87 	bl	8001b68 <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff37 	bl	8001ad0 <LCD_voidSendCharachter>
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	0000      	movs	r0, r0
 8001c6c:	0000      	movs	r0, r0
	...

08001c70 <decodeGGA>:
 GGAbuffer is the buffer which stores the GGA Data
 GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 Returns 0 on success
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c74:	b08e      	sub	sp, #56	; 0x38
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <decodeGGA+0x17c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8001c86:	e004      	b.n	8001c92 <decodeGGA+0x22>
		inx++;  // 1st ','
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <decodeGGA+0x17c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a57      	ldr	r2, [pc, #348]	; (8001dec <decodeGGA+0x17c>)
 8001c90:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c92:	4b56      	ldr	r3, [pc, #344]	; (8001dec <decodeGGA+0x17c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca0:	d1f2      	bne.n	8001c88 <decodeGGA+0x18>
	inx++;
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <decodeGGA+0x17c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a50      	ldr	r2, [pc, #320]	; (8001dec <decodeGGA+0x17c>)
 8001caa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cac:	e004      	b.n	8001cb8 <decodeGGA+0x48>
		inx++;  // After time ','
 8001cae:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <decodeGGA+0x17c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a4d      	ldr	r2, [pc, #308]	; (8001dec <decodeGGA+0x17c>)
 8001cb6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <decodeGGA+0x17c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001cc6:	d1f2      	bne.n	8001cae <decodeGGA+0x3e>
	inx++;
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <decodeGGA+0x17c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a47      	ldr	r2, [pc, #284]	; (8001dec <decodeGGA+0x17c>)
 8001cd0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cd2:	e004      	b.n	8001cde <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <decodeGGA+0x17c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a44      	ldr	r2, [pc, #272]	; (8001dec <decodeGGA+0x17c>)
 8001cdc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <decodeGGA+0x17c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b2c      	cmp	r3, #44	; 0x2c
 8001cec:	d1f2      	bne.n	8001cd4 <decodeGGA+0x64>
	inx++;
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <decodeGGA+0x17c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	4a3d      	ldr	r2, [pc, #244]	; (8001dec <decodeGGA+0x17c>)
 8001cf6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cf8:	e004      	b.n	8001d04 <decodeGGA+0x94>
		inx++;  // after NS ','
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <decodeGGA+0x17c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a3a      	ldr	r2, [pc, #232]	; (8001dec <decodeGGA+0x17c>)
 8001d02:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <decodeGGA+0x17c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b2c      	cmp	r3, #44	; 0x2c
 8001d12:	d1f2      	bne.n	8001cfa <decodeGGA+0x8a>
	inx++;
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <decodeGGA+0x17c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <decodeGGA+0x17c>)
 8001d1c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d1e:	e004      	b.n	8001d2a <decodeGGA+0xba>
		inx++;  // after longitude ','
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <decodeGGA+0x17c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a31      	ldr	r2, [pc, #196]	; (8001dec <decodeGGA+0x17c>)
 8001d28:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <decodeGGA+0x17c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b2c      	cmp	r3, #44	; 0x2c
 8001d38:	d1f2      	bne.n	8001d20 <decodeGGA+0xb0>
	inx++;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <decodeGGA+0x17c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <decodeGGA+0x17c>)
 8001d42:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d44:	e004      	b.n	8001d50 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <decodeGGA+0x17c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <decodeGGA+0x17c>)
 8001d4e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <decodeGGA+0x17c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d5e:	d1f2      	bne.n	8001d46 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <decodeGGA+0x17c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a21      	ldr	r2, [pc, #132]	; (8001dec <decodeGGA+0x17c>)
 8001d68:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <decodeGGA+0x17c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b31      	cmp	r3, #49	; 0x31
 8001d78:	d00f      	beq.n	8001d9a <decodeGGA+0x12a>
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <decodeGGA+0x17c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b32      	cmp	r3, #50	; 0x32
 8001d88:	d007      	beq.n	8001d9a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <decodeGGA+0x17c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b36      	cmp	r3, #54	; 0x36
 8001d98:	d106      	bne.n	8001da8 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <decodeGGA+0x17c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8001da6:	e009      	b.n	8001dbc <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
		return 1;  // return error
 8001dae:	2301      	movs	r3, #1
 8001db0:	e2f3      	b.n	800239a <decodeGGA+0x72a>
		inx++;  // 1st ','
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <decodeGGA+0x17c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <decodeGGA+0x17c>)
 8001dba:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <decodeGGA+0x17c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b2c      	cmp	r3, #44	; 0x2c
 8001dca:	d1f2      	bne.n	8001db2 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <decodeGGA+0x17c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <decodeGGA+0x17c>)
 8001dd4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	220c      	movs	r2, #12
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f009 fb5b 	bl	800b49a <memset>
	i = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001de8:	e016      	b.n	8001e18 <decodeGGA+0x1a8>
 8001dea:	bf00      	nop
 8001dec:	20000320 	.word	0x20000320
	{
		buffer[i] = GGAbuffer[inx];
 8001df0:	4ba9      	ldr	r3, [pc, #676]	; (8002098 <decodeGGA+0x428>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	7819      	ldrb	r1, [r3, #0]
 8001dfc:	f107 020c 	add.w	r2, r7, #12
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	4413      	add	r3, r2
 8001e04:	460a      	mov	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
		i++;
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001e0e:	4ba2      	ldr	r3, [pc, #648]	; (8002098 <decodeGGA+0x428>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4aa0      	ldr	r2, [pc, #640]	; (8002098 <decodeGGA+0x428>)
 8001e16:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001e18:	4b9f      	ldr	r3, [pc, #636]	; (8002098 <decodeGGA+0x428>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b2c      	cmp	r3, #44	; 0x2c
 8001e26:	d1e3      	bne.n	8001df0 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f008 fd05 	bl	800a83c <atoi>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a99      	ldr	r2, [pc, #612]	; (800209c <decodeGGA+0x42c>)
 8001e36:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3a:	1312      	asrs	r2, r2, #12
 8001e3c:	17db      	asrs	r3, r3, #31
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <decodeGGA+0x430>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4997      	ldr	r1, [pc, #604]	; (80020a4 <decodeGGA+0x434>)
 8001e46:	fb81 0103 	smull	r0, r1, r1, r3
 8001e4a:	1149      	asrs	r1, r1, #5
 8001e4c:	17db      	asrs	r3, r3, #31
 8001e4e:	1acb      	subs	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	4a95      	ldr	r2, [pc, #596]	; (80020a8 <decodeGGA+0x438>)
 8001e54:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f008 fcee 	bl	800a83c <atoi>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a90      	ldr	r2, [pc, #576]	; (80020a4 <decodeGGA+0x434>)
 8001e64:	fb82 1203 	smull	r1, r2, r2, r3
 8001e68:	1152      	asrs	r2, r2, #5
 8001e6a:	17db      	asrs	r3, r3, #31
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4a8d      	ldr	r2, [pc, #564]	; (80020a4 <decodeGGA+0x434>)
 8001e70:	fb82 1203 	smull	r1, r2, r2, r3
 8001e74:	1151      	asrs	r1, r2, #5
 8001e76:	17da      	asrs	r2, r3, #31
 8001e78:	1a8a      	subs	r2, r1, r2
 8001e7a:	2164      	movs	r1, #100	; 0x64
 8001e7c:	fb01 f202 	mul.w	r2, r1, r2
 8001e80:	1a9a      	subs	r2, r3, r2
 8001e82:	4b87      	ldr	r3, [pc, #540]	; (80020a0 <decodeGGA+0x430>)
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <decodeGGA+0x434>)
 8001e88:	fb83 0301 	smull	r0, r3, r3, r1
 8001e8c:	1158      	asrs	r0, r3, #5
 8001e8e:	17cb      	asrs	r3, r1, #31
 8001e90:	1ac3      	subs	r3, r0, r3
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	fb00 f303 	mul.w	r3, r0, r3
 8001e98:	1acb      	subs	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a83      	ldr	r2, [pc, #524]	; (80020ac <decodeGGA+0x43c>)
 8001e9e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8001ea0:	4b82      	ldr	r3, [pc, #520]	; (80020ac <decodeGGA+0x43c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b3b      	cmp	r3, #59	; 0x3b
 8001ea6:	dd09      	ble.n	8001ebc <decodeGGA+0x24c>
		min = min - 60;
 8001ea8:	4b80      	ldr	r3, [pc, #512]	; (80020ac <decodeGGA+0x43c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3b3c      	subs	r3, #60	; 0x3c
 8001eae:	4a7f      	ldr	r2, [pc, #508]	; (80020ac <decodeGGA+0x43c>)
 8001eb0:	6013      	str	r3, [r2, #0]
		hr++;
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <decodeGGA+0x438>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a7b      	ldr	r2, [pc, #492]	; (80020a8 <decodeGGA+0x438>)
 8001eba:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8001ebc:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <decodeGGA+0x438>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da09      	bge.n	8001ed8 <decodeGGA+0x268>
		hr = 24 + hr;
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <decodeGGA+0x438>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <decodeGGA+0x438>)
 8001ecc:	6013      	str	r3, [r2, #0]
		daychange--;
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <decodeGGA+0x440>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	4a76      	ldr	r2, [pc, #472]	; (80020b0 <decodeGGA+0x440>)
 8001ed6:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <decodeGGA+0x438>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b17      	cmp	r3, #23
 8001ede:	dd09      	ble.n	8001ef4 <decodeGGA+0x284>
		hr = hr - 24;
 8001ee0:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <decodeGGA+0x438>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3b18      	subs	r3, #24
 8001ee6:	4a70      	ldr	r2, [pc, #448]	; (80020a8 <decodeGGA+0x438>)
 8001ee8:	6013      	str	r3, [r2, #0]
		daychange++;
 8001eea:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <decodeGGA+0x440>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a6f      	ldr	r2, [pc, #444]	; (80020b0 <decodeGGA+0x440>)
 8001ef2:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <decodeGGA+0x438>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	621a      	str	r2, [r3, #32]
	gga->tim.min = min;
 8001efc:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <decodeGGA+0x43c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
	gga->tim.sec = atoi(buffer) % 100;
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f008 fc97 	bl	800a83c <atoi>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b64      	ldr	r3, [pc, #400]	; (80020a4 <decodeGGA+0x434>)
 8001f12:	fb83 1302 	smull	r1, r3, r3, r2
 8001f16:	1159      	asrs	r1, r3, #5
 8001f18:	17d3      	asrs	r3, r2, #31
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	2164      	movs	r1, #100	; 0x64
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6293      	str	r3, [r2, #40]	; 0x28

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <decodeGGA+0x428>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <decodeGGA+0x428>)
 8001f30:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	220c      	movs	r2, #12
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f009 faad 	bl	800b49a <memset>
	i = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001f44:	e013      	b.n	8001f6e <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001f46:	4b54      	ldr	r3, [pc, #336]	; (8002098 <decodeGGA+0x428>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	7819      	ldrb	r1, [r3, #0]
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	4413      	add	r3, r2
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
		i++;
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	3301      	adds	r3, #1
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <decodeGGA+0x428>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <decodeGGA+0x428>)
 8001f6c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <decodeGGA+0x428>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f7c:	d1e3      	bne.n	8001f46 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f994 	bl	80002b0 <strlen>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d801      	bhi.n	8001f92 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e203      	b.n	800239a <decodeGGA+0x72a>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 fc50 	bl	800a83c <atoi>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001fa4:	e002      	b.n	8001fac <decodeGGA+0x33c>
		j++;   // Figure out how many digits before the decimal
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	3301      	adds	r3, #1
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8001fb8:	d1f5      	bne.n	8001fa6 <decodeGGA+0x336>
	j++;
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f973 	bl	80002b0 <strlen>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	f107 020c 	add.w	r2, r7, #12
 8001fd8:	4413      	add	r3, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f008 fc2e 	bl	800a83c <atoi>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8001fe2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fabc 	bl	8000564 <__aeabi_i2d>
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <decodeGGA+0x444>)
 8001ff2:	f7fe fc4b 	bl	800088c <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4690      	mov	r8, r2
 8001ffc:	4699      	mov	r9, r3
 8001ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002000:	f7fe fab0 	bl	8000564 <__aeabi_i2d>
 8002004:	4604      	mov	r4, r0
 8002006:	460d      	mov	r5, r1
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	3302      	adds	r3, #2
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe faa9 	bl	8000564 <__aeabi_i2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	ec43 2b11 	vmov	d1, r2, r3
 800201a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002090 <decodeGGA+0x420>
 800201e:	f00b fb8f 	bl	800d740 <pow>
 8002022:	ec53 2b10 	vmov	r2, r3, d0
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe fc2f 	bl	800088c <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4640      	mov	r0, r8
 8002034:	4649      	mov	r1, r9
 8002036:	f7fe f949 	bl	80002cc <__adddf3>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002048:	e9c1 2300 	strd	r2, r3, [r1]
	inx++;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <decodeGGA+0x428>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a11      	ldr	r2, [pc, #68]	; (8002098 <decodeGGA+0x428>)
 8002054:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <decodeGGA+0x428>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <decodeGGA+0x428>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <decodeGGA+0x428>)
 800206e:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <decodeGGA+0x428>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <decodeGGA+0x428>)
 8002078:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	220c      	movs	r2, #12
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f009 fa09 	bl	800b49a <memset>
	i = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800208c:	e028      	b.n	80020e0 <decodeGGA+0x470>
 800208e:	bf00      	nop
 8002090:	00000000 	.word	0x00000000
 8002094:	40240000 	.word	0x40240000
 8002098:	20000320 	.word	0x20000320
 800209c:	68db8bad 	.word	0x68db8bad
 80020a0:	20000000 	.word	0x20000000
 80020a4:	51eb851f 	.word	0x51eb851f
 80020a8:	20000324 	.word	0x20000324
 80020ac:	20000328 	.word	0x20000328
 80020b0:	2000032c 	.word	0x2000032c
 80020b4:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 80020b8:	4b89      	ldr	r3, [pc, #548]	; (80022e0 <decodeGGA+0x670>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	7819      	ldrb	r1, [r3, #0]
 80020c4:	f107 020c 	add.w	r2, r7, #12
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	4413      	add	r3, r2
 80020cc:	460a      	mov	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
		i++;
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	3301      	adds	r3, #1
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80020d6:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <decodeGGA+0x670>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <decodeGGA+0x670>)
 80020de:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80020e0:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <decodeGGA+0x670>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b2c      	cmp	r3, #44	; 0x2c
 80020ee:	d1e3      	bne.n	80020b8 <decodeGGA+0x448>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	4618      	mov	r0, r3
 80020f6:	f008 fba1 	bl	800a83c <atoi>
 80020fa:	4603      	mov	r3, r0
 80020fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002102:	e002      	b.n	800210a <decodeGGA+0x49a>
		j++;  // Figure out how many digits before the decimal
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	3301      	adds	r3, #1
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800210a:	f107 020c 	add.w	r2, r7, #12
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b2e      	cmp	r3, #46	; 0x2e
 8002116:	d1f5      	bne.n	8002104 <decodeGGA+0x494>
	j++;
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	3301      	adds	r3, #1
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f8c4 	bl	80002b0 <strlen>
 8002128:	4602      	mov	r2, r0
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	f107 020c 	add.w	r2, r7, #12
 8002136:	4413      	add	r3, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f008 fb7f 	bl	800a83c <atoi>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8002140:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa0d 	bl	8000564 <__aeabi_i2d>
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <decodeGGA+0x674>)
 8002150:	f7fe fb9c 	bl	800088c <__aeabi_ddiv>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4690      	mov	r8, r2
 800215a:	4699      	mov	r9, r3
 800215c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800215e:	f7fe fa01 	bl	8000564 <__aeabi_i2d>
 8002162:	4604      	mov	r4, r0
 8002164:	460d      	mov	r5, r1
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	3302      	adds	r3, #2
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f9fa 	bl	8000564 <__aeabi_i2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	ec43 2b11 	vmov	d1, r2, r3
 8002178:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80022d8 <decodeGGA+0x668>
 800217c:	f00b fae0 	bl	800d740 <pow>
 8002180:	ec53 2b10 	vmov	r2, r3, d0
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fe fb80 	bl	800088c <__aeabi_ddiv>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4640      	mov	r0, r8
 8002192:	4649      	mov	r1, r9
 8002194:	f7fe f89a 	bl	80002cc <__adddf3>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	inx++;
 80021aa:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <decodeGGA+0x670>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <decodeGGA+0x670>)
 80021b2:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80021b4:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <decodeGGA+0x670>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	761a      	strb	r2, [r3, #24]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80021c4:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <decodeGGA+0x670>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a45      	ldr	r2, [pc, #276]	; (80022e0 <decodeGGA+0x670>)
 80021cc:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80021ce:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <decodeGGA+0x670>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a42      	ldr	r2, [pc, #264]	; (80022e0 <decodeGGA+0x670>)
 80021d6:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <decodeGGA+0x670>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	4a40      	ldr	r2, [pc, #256]	; (80022e0 <decodeGGA+0x670>)
 80021e0:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <decodeGGA+0x670>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <decodeGGA+0x670>)
 80021ea:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	220c      	movs	r2, #12
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f009 f950 	bl	800b49a <memset>
	i = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80021fe:	e013      	b.n	8002228 <decodeGGA+0x5b8>
	{
		buffer[i] = GGAbuffer[inx];
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <decodeGGA+0x670>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	7819      	ldrb	r1, [r3, #0]
 800220c:	f107 020c 	add.w	r2, r7, #12
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	4413      	add	r3, r2
 8002214:	460a      	mov	r2, r1
 8002216:	701a      	strb	r2, [r3, #0]
		i++;
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	3301      	adds	r3, #1
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <decodeGGA+0x670>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <decodeGGA+0x670>)
 8002226:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <decodeGGA+0x670>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b2c      	cmp	r3, #44	; 0x2c
 8002236:	d1e3      	bne.n	8002200 <decodeGGA+0x590>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	4618      	mov	r0, r3
 800223e:	f008 fafd 	bl	800a83c <atoi>
 8002242:	4602      	mov	r2, r0
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <decodeGGA+0x670>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <decodeGGA+0x670>)
 8002250:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002252:	e004      	b.n	800225e <decodeGGA+0x5ee>
		inx++;
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <decodeGGA+0x670>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <decodeGGA+0x670>)
 800225c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <decodeGGA+0x670>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b2c      	cmp	r3, #44	; 0x2c
 800226c:	d1f2      	bne.n	8002254 <decodeGGA+0x5e4>

	/*************** Altitude calculation ********************/
	inx++;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <decodeGGA+0x670>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <decodeGGA+0x670>)
 8002276:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	220c      	movs	r2, #12
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f009 f90a 	bl	800b49a <memset>
	i = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 800228a:	e013      	b.n	80022b4 <decodeGGA+0x644>
		buffer[i] = GGAbuffer[inx];
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <decodeGGA+0x670>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	7819      	ldrb	r1, [r3, #0]
 8002298:	f107 020c 	add.w	r2, r7, #12
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	4413      	add	r3, r2
 80022a0:	460a      	mov	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
		i++;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a6:	3301      	adds	r3, #1
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <decodeGGA+0x670>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <decodeGGA+0x670>)
 80022b2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <decodeGGA+0x670>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b2c      	cmp	r3, #44	; 0x2c
 80022c2:	d1e3      	bne.n	800228c <decodeGGA+0x61c>
	}
	num = (atoi(buffer));
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4618      	mov	r0, r3
 80022ca:	f008 fab7 	bl	800a83c <atoi>
 80022ce:	4603      	mov	r3, r0
 80022d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80022d6:	e00a      	b.n	80022ee <decodeGGA+0x67e>
 80022d8:	00000000 	.word	0x00000000
 80022dc:	40240000 	.word	0x40240000
 80022e0:	20000320 	.word	0x20000320
 80022e4:	40590000 	.word	0x40590000
		j++;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	3301      	adds	r3, #1
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80022ee:	f107 020c 	add.w	r2, r7, #12
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b2e      	cmp	r3, #46	; 0x2e
 80022fa:	d1f5      	bne.n	80022e8 <decodeGGA+0x678>
	j++;
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	3301      	adds	r3, #1
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ffd2 	bl	80002b0 <strlen>
 800230c:	4602      	mov	r2, r0
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	4413      	add	r3, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f008 fa8d 	bl	800a83c <atoi>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 8002324:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f91b 	bl	8000564 <__aeabi_i2d>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002334:	f7fe f916 	bl	8000564 <__aeabi_i2d>
 8002338:	4680      	mov	r8, r0
 800233a:	4689      	mov	r9, r1
 800233c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233e:	f7fe f911 	bl	8000564 <__aeabi_i2d>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	ec43 2b11 	vmov	d1, r2, r3
 800234a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80023a8 <decodeGGA+0x738>
 800234e:	f00b f9f7 	bl	800d740 <pow>
 8002352:	ec53 2b10 	vmov	r2, r3, d0
 8002356:	4640      	mov	r0, r8
 8002358:	4649      	mov	r1, r9
 800235a:	f7fe fa97 	bl	800088c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fd ffb1 	bl	80002cc <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002378:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	inx++;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <decodeGGA+0x740>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <decodeGGA+0x740>)
 8002384:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <decodeGGA+0x740>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return 0;
 8002398:	2300      	movs	r3, #0

}
 800239a:	4618      	mov	r0, r3
 800239c:	3738      	adds	r7, #56	; 0x38
 800239e:	46bd      	mov	sp, r7
 80023a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023a4:	f3af 8000 	nop.w
 80023a8:	00000000 	.word	0x00000000
 80023ac:	40240000 	.word	0x40240000
 80023b0:	20000320 	.word	0x20000320

080023b4 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023cc:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d009      	beq.n	80023ee <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	79f9      	ldrb	r1, [r7, #7]
 80023e4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <Uart_read+0x54>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <Uart_read+0x54>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002412:	429a      	cmp	r2, r3
 8002414:	d102      	bne.n	800241c <Uart_read+0x20>
  {
    return -1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e013      	b.n	8002444 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <Uart_read+0x54>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <Uart_read+0x54>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <Uart_read+0x54>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <Uart_read+0x54>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002442:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	2000053c 	.word	0x2000053c

08002454 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <IsDataAvailable+0x30>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002460:	b29a      	uxth	r2, r3
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <IsDataAvailable+0x30>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800246a:	b29b      	uxth	r3, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002474:	b29b      	uxth	r3, r3
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	2000053c 	.word	0x2000053c

08002488 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <Uart_peek+0x38>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <Uart_peek+0x38>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800249c:	429a      	cmp	r2, r3
 800249e:	d102      	bne.n	80024a6 <Uart_peek+0x1e>
  {
    return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
 80024a4:	e006      	b.n	80024b4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <Uart_peek+0x38>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <Uart_peek+0x38>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	2000053c 	.word	0x2000053c

080024c4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fd feec 	bl	80002b0 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80024e0:	e01e      	b.n	8002520 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <Copy_upto+0xf8>)
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <Copy_upto+0xf8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	4403      	add	r3, r0
 80024f4:	5c8a      	ldrb	r2, [r1, r2]
 80024f6:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <Copy_upto+0xf8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <Copy_upto+0xf8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800250a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	3301      	adds	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002514:	bf00      	nop
 8002516:	f7ff ff9d 	bl	8002454 <IsDataAvailable>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0fa      	beq.n	8002516 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002520:	f7ff ffb2 	bl	8002488 <Uart_peek>
 8002524:	4601      	mov	r1, r0
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4299      	cmp	r1, r3
 8002530:	d1d7      	bne.n	80024e2 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002532:	e027      	b.n	8002584 <Copy_upto+0xc0>
	{
		so_far++;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800253a:	f7ff ff5f 	bl	80023fc <Uart_read>
 800253e:	4601      	mov	r1, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	613a      	str	r2, [r7, #16]
 8002546:	461a      	mov	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d101      	bne.n	800255c <Copy_upto+0x98>
 8002558:	2301      	movs	r3, #1
 800255a:	e02a      	b.n	80025b2 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <Copy_upto+0xfc>)
 800255e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002562:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002564:	bf00      	nop
 8002566:	f7ff ff75 	bl	8002454 <IsDataAvailable>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <Copy_upto+0xb4>
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <Copy_upto+0xfc>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f6      	bne.n	8002566 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <Copy_upto+0xfc>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <Copy_upto+0xc0>
 8002580:	2300      	movs	r3, #0
 8002582:	e016      	b.n	80025b2 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002584:	f7ff ff80 	bl	8002488 <Uart_peek>
 8002588:	4601      	mov	r1, r0
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4299      	cmp	r1, r3
 8002594:	d0ce      	beq.n	8002534 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	429a      	cmp	r2, r3
 800259c:	d002      	beq.n	80025a4 <Copy_upto+0xe0>
	{
		so_far = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
		goto again;
 80025a2:	e79d      	b.n	80024e0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d101      	bne.n	80025b0 <Copy_upto+0xec>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <Copy_upto+0xee>
	else return 0;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000053c 	.word	0x2000053c
 80025c0:	20000330 	.word	0x20000330

080025c4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fd fe6d 	bl	80002b0 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <Wait_for+0x108>)
 80025dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025e0:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80025e2:	bf00      	nop
 80025e4:	f7ff ff36 	bl	8002454 <IsDataAvailable>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <Wait_for+0x32>
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <Wait_for+0x108>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f6      	bne.n	80025e4 <Wait_for+0x20>
	if (timeout == 0) return 0;
 80025f6:	4b35      	ldr	r3, [pc, #212]	; (80026cc <Wait_for+0x108>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d119      	bne.n	8002632 <Wait_for+0x6e>
 80025fe:	2300      	movs	r3, #0
 8002600:	e060      	b.n	80026c4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <Wait_for+0x10c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <Wait_for+0x10c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002612:	429a      	cmp	r2, r3
 8002614:	d00b      	beq.n	800262e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002616:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <Wait_for+0x10c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <Wait_for+0x10c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800262c:	e001      	b.n	8002632 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800262e:	2300      	movs	r3, #0
 8002630:	e048      	b.n	80026c4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002632:	f7ff ff29 	bl	8002488 <Uart_peek>
 8002636:	4601      	mov	r1, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4299      	cmp	r1, r3
 8002642:	d1de      	bne.n	8002602 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002644:	e027      	b.n	8002696 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <Wait_for+0x10c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <Wait_for+0x10c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	429a      	cmp	r2, r3
 8002668:	d101      	bne.n	800266e <Wait_for+0xaa>
 800266a:	2301      	movs	r3, #1
 800266c:	e02a      	b.n	80026c4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <Wait_for+0x108>)
 8002670:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002674:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002676:	bf00      	nop
 8002678:	f7ff feec 	bl	8002454 <IsDataAvailable>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <Wait_for+0xc6>
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <Wait_for+0x108>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f6      	bne.n	8002678 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <Wait_for+0x108>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <Wait_for+0xd2>
 8002692:	2300      	movs	r3, #0
 8002694:	e016      	b.n	80026c4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002696:	f7ff fef7 	bl	8002488 <Uart_peek>
 800269a:	4601      	mov	r1, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d0ce      	beq.n	8002646 <Wait_for+0x82>
	}

	if (so_far != len)
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d002      	beq.n	80026b6 <Wait_for+0xf2>
	{
		so_far = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
		goto again;
 80026b4:	e791      	b.n	80025da <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d101      	bne.n	80026c2 <Wait_for+0xfe>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <Wait_for+0x100>
	else return 0;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000330 	.word	0x20000330
 80026d0:	2000053c 	.word	0x2000053c

080026d4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d013      	beq.n	800271e <Uart_isr+0x4a>
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <Uart_isr+0xb4>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fe4c 	bl	80023b4 <store_char>
        return;
 800271c:	e031      	b.n	8002782 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02c      	beq.n	8002782 <Uart_isr+0xae>
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d027      	beq.n	8002782 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <Uart_isr+0xb8>)
 8002734:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <Uart_isr+0xb8>)
 800273a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800273e:	429a      	cmp	r2, r3
 8002740:	d108      	bne.n	8002754 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002750:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002752:	e015      	b.n	8002780 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <Uart_isr+0xb8>)
 8002756:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <Uart_isr+0xb8>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <Uart_isr+0xb8>)
 8002762:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <Uart_isr+0xb8>)
 800276e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	7bba      	ldrb	r2, [r7, #14]
 800277e:	605a      	str	r2, [r3, #4]
    	return;
 8002780:	bf00      	nop
    }
}
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	2000053c 	.word	0x2000053c
 800278c:	20000334 	.word	0x20000334

08002790 <Traffic_Condition_Warning>:
	Buzzer_voidHighSound();

}

void Traffic_Condition_Warning(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	Buzzer_voidHighSound();
 8002794:	f7fe fe38 	bl	8001408 <Buzzer_voidHighSound>
	/*Show a Warning Sign to The Driver*/
	LCD_Print_WarningSign();
 8002798:	f000 f814 	bl	80027c4 <LCD_Print_WarningSign>

	/*Show a Warning Message To The Driver*/
	LCD_voidSetPositionXY(1,0);
 800279c:	2100      	movs	r1, #0
 800279e:	2001      	movs	r0, #1
 80027a0:	f7ff f9e2 	bl	8001b68 <LCD_voidSetPositionXY>
	LCD_voidSendString("Warning");
 80027a4:	4805      	ldr	r0, [pc, #20]	; (80027bc <Traffic_Condition_Warning+0x2c>)
 80027a6:	f7ff f9c3 	bl	8001b30 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 80027aa:	2100      	movs	r1, #0
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7ff f9db 	bl	8001b68 <LCD_voidSetPositionXY>
	LCD_voidSendString("High Congestion");
 80027b2:	4803      	ldr	r0, [pc, #12]	; (80027c0 <Traffic_Condition_Warning+0x30>)
 80027b4:	f7ff f9bc 	bl	8001b30 <LCD_voidSendString>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	0800e6cc 	.word	0x0800e6cc
 80027c0:	0800e6d4 	.word	0x0800e6d4

080027c4 <LCD_Print_WarningSign>:



static void LCD_Print_WarningSign(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b094      	sub	sp, #80	; 0x50
 80027c8:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <LCD_Print_WarningSign+0x108>)
 80027cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001110,
			0b00001110,
			0b00001110
	};

	uint8_t LCD_R1_C17_Array[8] =
 80027d8:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <LCD_Print_WarningSign+0x10c>)
 80027da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027e2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00000001
	};
	uint8_t LCD_R1_C15_Array[8] =
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <LCD_Print_WarningSign+0x110>)
 80027e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000100,
			0b00001000,
			0b00010000
	};

	uint8_t LCD_R2_C14_Array[8] =
 80027f4:	4a38      	ldr	r2, [pc, #224]	; (80028d8 <LCD_Print_WarningSign+0x114>)
 80027f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027fe:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 8002802:	4a36      	ldr	r2, [pc, #216]	; (80028dc <LCD_Print_WarningSign+0x118>)
 8002804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800280c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 8002810:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <LCD_Print_WarningSign+0x11c>)
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800281a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000001,
			0b00000010,
			0b00000100,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 800281e:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <LCD_Print_WarningSign+0x120>)
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002828:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 800282c:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <LCD_Print_WarningSign+0x124>)
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002836:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 800283a:	4a2b      	ldr	r2, [pc, #172]	; (80028e8 <LCD_Print_WarningSign+0x124>)
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002844:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <LCD_Print_WarningSign+0x128>)
 800284a:	463b      	mov	r3, r7
 800284c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002850:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00011111
	};


	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 8002854:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002858:	230f      	movs	r3, #15
 800285a:	2201      	movs	r2, #1
 800285c:	2100      	movs	r1, #0
 800285e:	f7ff f9d0 	bl	8001c02 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 1, 1, 16);
 8002862:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002866:	2310      	movs	r3, #16
 8002868:	2201      	movs	r2, #1
 800286a:	2101      	movs	r1, #1
 800286c:	f7ff f9c9 	bl	8001c02 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C17_Array, 2, 1, 17);
 8002870:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002874:	2311      	movs	r3, #17
 8002876:	2201      	movs	r2, #1
 8002878:	2102      	movs	r1, #2
 800287a:	f7ff f9c2 	bl	8001c02 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 3, 2, 14);
 800287e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002882:	230e      	movs	r3, #14
 8002884:	2202      	movs	r2, #2
 8002886:	2103      	movs	r1, #3
 8002888:	f7ff f9bb 	bl	8001c02 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 4, 2, 15);
 800288c:	f107 0010 	add.w	r0, r7, #16
 8002890:	230f      	movs	r3, #15
 8002892:	2202      	movs	r2, #2
 8002894:	2104      	movs	r1, #4
 8002896:	f7ff f9b4 	bl	8001c02 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 5, 2, 16);
 800289a:	4638      	mov	r0, r7
 800289c:	2310      	movs	r3, #16
 800289e:	2202      	movs	r2, #2
 80028a0:	2105      	movs	r1, #5
 80028a2:	f7ff f9ae 	bl	8001c02 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 6, 2, 17);
 80028a6:	f107 0008 	add.w	r0, r7, #8
 80028aa:	2311      	movs	r3, #17
 80028ac:	2202      	movs	r2, #2
 80028ae:	2106      	movs	r1, #6
 80028b0:	f7ff f9a7 	bl	8001c02 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 7, 2, 18);
 80028b4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028b8:	2312      	movs	r3, #18
 80028ba:	2202      	movs	r2, #2
 80028bc:	2107      	movs	r1, #7
 80028be:	f7ff f9a0 	bl	8001c02 <LCD_voidDrawSpecialCharachter>




}
 80028c2:	bf00      	nop
 80028c4:	3750      	adds	r7, #80	; 0x50
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	0800e6e4 	.word	0x0800e6e4
 80028d0:	0800e6ec 	.word	0x0800e6ec
 80028d4:	0800e6f4 	.word	0x0800e6f4
 80028d8:	0800e6fc 	.word	0x0800e6fc
 80028dc:	0800e704 	.word	0x0800e704
 80028e0:	0800e70c 	.word	0x0800e70c
 80028e4:	0800e714 	.word	0x0800e714
 80028e8:	0800e71c 	.word	0x0800e71c
 80028ec:	0800e724 	.word	0x0800e724

080028f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028f6:	f001 f8c5 	bl	8003a84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028fa:	f000 f8f7 	bl	8002aec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028fe:	f000 fb8d 	bl	800301c <MX_GPIO_Init>
	MX_TIM1_Init();
 8002902:	f000 f981 	bl	8002c08 <MX_TIM1_Init>
	MX_I2C1_Init();
 8002906:	f000 f951 	bl	8002bac <MX_I2C1_Init>
	MX_TIM2_Init();
 800290a:	f000 fa23 	bl	8002d54 <MX_TIM2_Init>
	MX_TIM3_Init();
 800290e:	f000 fa85 	bl	8002e1c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8002912:	f000 fb05 	bl	8002f20 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8002916:	f000 fb57 	bl	8002fc8 <MX_USART6_UART_Init>
	MX_UART4_Init();
 800291a:	f000 fad7 	bl	8002ecc <MX_UART4_Init>
	MX_USART3_UART_Init();
 800291e:	f000 fb29 	bl	8002f74 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */
	/*****************************************Initializing***********************************************/
	//GPS_voidInit();
	LCD_voidInit();
 8002922:	f7ff f877 	bl	8001a14 <LCD_voidInit>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&Received_Char_Bluetooth, 1);		//Bluetooth
 8002926:	2201      	movs	r2, #1
 8002928:	4959      	ldr	r1, [pc, #356]	; (8002a90 <main+0x1a0>)
 800292a:	485a      	ldr	r0, [pc, #360]	; (8002a94 <main+0x1a4>)
 800292c:	f004 f91d 	bl	8006b6a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, (uint8_t *)&Received_Char_ESP, 1);				//ESP
 8002930:	2201      	movs	r2, #1
 8002932:	4959      	ldr	r1, [pc, #356]	; (8002a98 <main+0x1a8>)
 8002934:	4859      	ldr	r0, [pc, #356]	; (8002a9c <main+0x1ac>)
 8002936:	f004 f918 	bl	8006b6a <HAL_UART_Receive_IT>

	/*****************************************Speed_Sensor***********************************************/
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800293a:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <main+0x1b0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <main+0x1b0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800294a:	2100      	movs	r1, #0
 800294c:	4854      	ldr	r0, [pc, #336]	; (8002aa0 <main+0x1b0>)
 800294e:	f003 f979 	bl	8005c44 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002952:	2104      	movs	r1, #4
 8002954:	4852      	ldr	r0, [pc, #328]	; (8002aa0 <main+0x1b0>)
 8002956:	f003 f975 	bl	8005c44 <HAL_TIM_IC_Start_IT>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* USER CODE BEGIN RTOS_THREADS */
	/*************************************Task Creation*********************************************/
	Handle_Timer_LCDBuzzer= xTimerCreate("Timer_LCDBuzzer", pdMS_TO_TICKS(5000), pdFALSE, &ID_TImer_LCDBuzzer, CallBack_TimerLCDBuzzer);
 800295a:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <main+0x1b4>)
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <main+0x1b8>)
 8002960:	2200      	movs	r2, #0
 8002962:	f241 3188 	movw	r1, #5000	; 0x1388
 8002966:	4851      	ldr	r0, [pc, #324]	; (8002aac <main+0x1bc>)
 8002968:	f006 ffd0 	bl	800990c <xTimerCreate>
 800296c:	4603      	mov	r3, r0
 800296e:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <main+0x1c0>)
 8002970:	6013      	str	r3, [r2, #0]

	Status_ControlCar = xTaskCreate(Task_ControlCar, NULL, 200, NULL, Task_Control_Car_Priority, &Handle_Car_Control);
 8002972:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <main+0x1c4>)
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2302      	movs	r3, #2
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	22c8      	movs	r2, #200	; 0xc8
 800297e:	2100      	movs	r1, #0
 8002980:	484d      	ldr	r0, [pc, #308]	; (8002ab8 <main+0x1c8>)
 8002982:	f005 feae 	bl	80086e2 <xTaskCreate>
 8002986:	4603      	mov	r3, r0
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <main+0x1cc>)
 800298a:	6013      	str	r3, [r2, #0]
	configASSERT(Status_ControlCar == pdPASS);
 800298c:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <main+0x1cc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d00a      	beq.n	80029aa <main+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <main+0xb8>

	Status_GPS = xTaskCreate(TASK_GPS, NULL, 200, NULL,Task_GPS_Priority , NULL);
 80029aa:	2300      	movs	r3, #0
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2302      	movs	r3, #2
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	22c8      	movs	r2, #200	; 0xc8
 80029b6:	2100      	movs	r1, #0
 80029b8:	4841      	ldr	r0, [pc, #260]	; (8002ac0 <main+0x1d0>)
 80029ba:	f005 fe92 	bl	80086e2 <xTaskCreate>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <main+0x1d4>)
 80029c2:	6013      	str	r3, [r2, #0]
	configASSERT(Status_GPS == pdPASS);
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <main+0x1d4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d00a      	beq.n	80029e2 <main+0xf2>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	613b      	str	r3, [r7, #16]
}
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <main+0xf0>

	Status_SendEspPeriodic = xTaskCreate(Task_SendEspPeriodic, NULL, 200, NULL, Task_Send_ESP_Periodic_Priority, &Handle_Esp_Periodic);
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <main+0x1d8>)
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2302      	movs	r3, #2
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	22c8      	movs	r2, #200	; 0xc8
 80029ee:	2100      	movs	r1, #0
 80029f0:	4836      	ldr	r0, [pc, #216]	; (8002acc <main+0x1dc>)
 80029f2:	f005 fe76 	bl	80086e2 <xTaskCreate>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <main+0x1e0>)
 80029fa:	6013      	str	r3, [r2, #0]
	configASSERT(Status_SendEspPeriodic == pdPASS);
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <main+0x1e0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d00a      	beq.n	8002a1a <main+0x12a>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	60fb      	str	r3, [r7, #12]
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <main+0x128>

	Status_SendEsp_Status = xTaskCreate(Task_SendEsp_Status, NULL, 200, NULL, Task_Send_ESP_Status_Priority, &Handle_Send_ESP_Status);
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <main+0x1e4>)
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	2303      	movs	r3, #3
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2300      	movs	r3, #0
 8002a24:	22c8      	movs	r2, #200	; 0xc8
 8002a26:	2100      	movs	r1, #0
 8002a28:	482b      	ldr	r0, [pc, #172]	; (8002ad8 <main+0x1e8>)
 8002a2a:	f005 fe5a 	bl	80086e2 <xTaskCreate>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4a2a      	ldr	r2, [pc, #168]	; (8002adc <main+0x1ec>)
 8002a32:	6013      	str	r3, [r2, #0]
	configASSERT(Status_SendEsp_Status == pdPASS);
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <main+0x1ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d00a      	beq.n	8002a52 <main+0x162>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	60bb      	str	r3, [r7, #8]
}
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <main+0x160>

	Status_Recieve_Status_Esp = xTaskCreate(Task_Recieve_Status_Esp, NULL, 200, NULL, Task_Recieve_ESP_Priority, &Handle_Recieve_ESP_Status);
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <main+0x1f0>)
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	2303      	movs	r3, #3
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	22c8      	movs	r2, #200	; 0xc8
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <main+0x1f4>)
 8002a62:	f005 fe3e 	bl	80086e2 <xTaskCreate>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a1f      	ldr	r2, [pc, #124]	; (8002ae8 <main+0x1f8>)
 8002a6a:	6013      	str	r3, [r2, #0]
	configASSERT(Status_Recieve_Status_Esp == pdPASS);
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <main+0x1f8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00a      	beq.n	8002a8a <main+0x19a>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	607b      	str	r3, [r7, #4]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <main+0x198>


	/* Start scheduler */

	vTaskStartScheduler();
 8002a8a:	f005 ffb9 	bl	8008a00 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 8002a8e:	e7fe      	b.n	8002a8e <main+0x19e>
 8002a90:	2000078c 	.word	0x2000078c
 8002a94:	200006fc 	.word	0x200006fc
 8002a98:	2000078d 	.word	0x2000078d
 8002a9c:	20000744 	.word	0x20000744
 8002aa0:	200005dc 	.word	0x200005dc
 8002aa4:	0800157d 	.word	0x0800157d
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	0800e72c 	.word	0x0800e72c
 8002ab0:	200007a0 	.word	0x200007a0
 8002ab4:	20000790 	.word	0x20000790
 8002ab8:	08001019 	.word	0x08001019
 8002abc:	200007a4 	.word	0x200007a4
 8002ac0:	08000fc5 	.word	0x08000fc5
 8002ac4:	200007a8 	.word	0x200007a8
 8002ac8:	20000794 	.word	0x20000794
 8002acc:	080010cd 	.word	0x080010cd
 8002ad0:	200007ac 	.word	0x200007ac
 8002ad4:	20000798 	.word	0x20000798
 8002ad8:	08001135 	.word	0x08001135
 8002adc:	200007b0 	.word	0x200007b0
 8002ae0:	2000079c 	.word	0x2000079c
 8002ae4:	0800118d 	.word	0x0800118d
 8002ae8:	200007b4 	.word	0x200007b4

08002aec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b094      	sub	sp, #80	; 0x50
 8002af0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	2234      	movs	r2, #52	; 0x34
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f008 fccd 	bl	800b49a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <SystemClock_Config+0xb8>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <SystemClock_Config+0xb8>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <SystemClock_Config+0xb8>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <SystemClock_Config+0xbc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <SystemClock_Config+0xbc>)
 8002b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <SystemClock_Config+0xbc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b50:	2301      	movs	r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b54:	2310      	movs	r3, #16
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fb31 	bl	80051c8 <HAL_RCC_OscConfig>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8002b6c:	f000 fad2 	bl	8003114 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b70:	230f      	movs	r3, #15
 8002b72:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 ffa0 	bl	8004ad0 <HAL_RCC_ClockConfig>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8002b96:	f000 fabd 	bl	8003114 <Error_Handler>
	}
}
 8002b9a:	bf00      	nop
 8002b9c:	3750      	adds	r7, #80	; 0x50
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000

08002bac <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bb2:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <MX_I2C1_Init+0x58>)
 8002bb4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bbc:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_I2C1_Init+0x54>)
 8002bec:	f001 fad2 	bl	8004194 <HAL_I2C_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8002bf6:	f000 fa8d 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000540 	.word	0x20000540
 8002c04:	40005400 	.word	0x40005400

08002c08 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b092      	sub	sp, #72	; 0x48
 8002c0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
 8002c28:	615a      	str	r2, [r3, #20]
 8002c2a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	2220      	movs	r2, #32
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f008 fc31 	bl	800b49a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002c38:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c3a:	4a45      	ldr	r2, [pc, #276]	; (8002d50 <MX_TIM1_Init+0x148>)
 8002c3c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160-1;
 8002c3e:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c40:	229f      	movs	r2, #159	; 0x9f
 8002c42:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100-1;
 8002c4a:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c4c:	2263      	movs	r2, #99	; 0x63
 8002c4e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c62:	483a      	ldr	r0, [pc, #232]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c64:	f002 fe67 	bl	8005936 <HAL_TIM_PWM_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM1_Init+0x6a>
	{
		Error_Handler();
 8002c6e:	f000 fa51 	bl	8003114 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4832      	ldr	r0, [pc, #200]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002c82:	f003 fdb5 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM1_Init+0x88>
	{
		Error_Handler();
 8002c8c:	f000 fa42 	bl	8003114 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c90:	2360      	movs	r3, #96	; 0x60
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4825      	ldr	r0, [pc, #148]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002cb6:	f003 fa39 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM1_Init+0xbc>
	{
		Error_Handler();
 8002cc0:	f000 fa28 	bl	8003114 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc8:	2204      	movs	r2, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481f      	ldr	r0, [pc, #124]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002cce:	f003 fa2d 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM1_Init+0xd4>
	{
		Error_Handler();
 8002cd8:	f000 fa1c 	bl	8003114 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4819      	ldr	r0, [pc, #100]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002ce6:	f003 fa21 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM1_Init+0xec>
	{
		Error_Handler();
 8002cf0:	f000 fa10 	bl	8003114 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf8:	220c      	movs	r2, #12
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4813      	ldr	r0, [pc, #76]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002cfe:	f003 fa15 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM1_Init+0x104>
	{
		Error_Handler();
 8002d08:	f000 fa04 	bl	8003114 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d24:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4807      	ldr	r0, [pc, #28]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002d30:	f003 fdda 	bl	80068e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0x136>
	{
		Error_Handler();
 8002d3a:	f000 f9eb 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002d3e:	4803      	ldr	r0, [pc, #12]	; (8002d4c <MX_TIM1_Init+0x144>)
 8002d40:	f000 fac0 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 8002d44:	bf00      	nop
 8002d46:	3748      	adds	r7, #72	; 0x48
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000594 	.word	0x20000594
 8002d50:	40010000 	.word	0x40010000

08002d54 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5a:	f107 0320 	add.w	r3, r7, #32
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	615a      	str	r2, [r3, #20]
 8002d74:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d7c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002d80:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002d84:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000-1;
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d92:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002da0:	481d      	ldr	r0, [pc, #116]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002da2:	f002 fd79 	bl	8005898 <HAL_TIM_OC_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8002dac:	f000 f9b2 	bl	8003114 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002db8:	f107 0320 	add.w	r3, r7, #32
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4816      	ldr	r0, [pc, #88]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002dc0:	f003 fd16 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8002dca:	f000 f9a3 	bl	8003114 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	2200      	movs	r2, #0
 8002de2:	4619      	mov	r1, r3
 8002de4:	480c      	ldr	r0, [pc, #48]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002de6:	f003 f945 	bl	8006074 <HAL_TIM_OC_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8002df0:	f000 f990 	bl	8003114 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2204      	movs	r2, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4807      	ldr	r0, [pc, #28]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002dfc:	f003 f93a 	bl	8006074 <HAL_TIM_OC_ConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8002e06:	f000 f985 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002e0a:	4803      	ldr	r0, [pc, #12]	; (8002e18 <MX_TIM2_Init+0xc4>)
 8002e0c:	f000 fa5a 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 8002e10:	bf00      	nop
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200005dc 	.word	0x200005dc

08002e1c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e22:	f107 0320 	add.w	r3, r7, #32
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	615a      	str	r2, [r3, #20]
 8002e3c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e40:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <MX_TIM3_Init+0xac>)
 8002e42:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80-1;
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e46:	224f      	movs	r2, #79	; 0x4f
 8002e48:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e52:	2263      	movs	r2, #99	; 0x63
 8002e54:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e62:	4818      	ldr	r0, [pc, #96]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e64:	f002 fd67 	bl	8005936 <HAL_TIM_PWM_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM3_Init+0x56>
	{
		Error_Handler();
 8002e6e:	f000 f951 	bl	8003114 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e7a:	f107 0320 	add.w	r3, r7, #32
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002e82:	f003 fcb5 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM3_Init+0x74>
	{
		Error_Handler();
 8002e8c:	f000 f942 	bl	8003114 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e90:	2360      	movs	r3, #96	; 0x60
 8002e92:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4807      	ldr	r0, [pc, #28]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002ea8:	f003 f940 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8002eb2:	f000 f92f 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002eb6:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <MX_TIM3_Init+0xa8>)
 8002eb8:	f000 fa04 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 8002ebc:	bf00      	nop
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000624 	.word	0x20000624
 8002ec8:	40000400 	.word	0x40000400

08002ecc <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <MX_UART4_Init+0x50>)
 8002ed4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_UART4_Init+0x4c>)
 8002f04:	f003 fd56 	bl	80069b4 <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8002f0e:	f000 f901 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2000066c 	.word	0x2000066c
 8002f1c:	40004c00 	.word	0x40004c00

08002f20 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <MX_USART1_UART_Init+0x50>)
 8002f28:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f30:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f46:	220c      	movs	r2, #12
 8002f48:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <MX_USART1_UART_Init+0x4c>)
 8002f58:	f003 fd2c 	bl	80069b4 <HAL_UART_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002f62:	f000 f8d7 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200006b4 	.word	0x200006b4
 8002f70:	40011000 	.word	0x40011000

08002f74 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <MX_USART3_UART_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002f80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f84:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_USART3_UART_Init+0x4c>)
 8002fac:	f003 fd02 	bl	80069b4 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8002fb6:	f000 f8ad 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200006fc 	.word	0x200006fc
 8002fc4:	40004800 	.word	0x40004800

08002fc8 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <MX_USART6_UART_Init+0x50>)
 8002fd0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_USART6_UART_Init+0x4c>)
 8003000:	f003 fcd8 	bl	80069b4 <HAL_UART_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 800300a:	f000 f883 	bl	8003114 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000744 	.word	0x20000744
 8003018:	40011400 	.word	0x40011400

0800301c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <MX_GPIO_Init+0xc8>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <MX_GPIO_Init+0xc8>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <MX_GPIO_Init+0xc8>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8003086:	2200      	movs	r2, #0
 8003088:	f643 7110 	movw	r1, #16144	; 0x3f10
 800308c:	4816      	ldr	r0, [pc, #88]	; (80030e8 <MX_GPIO_Init+0xcc>)
 800308e:	f001 f867 	bl	8004160 <HAL_GPIO_WritePin>
			|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003098:	4814      	ldr	r0, [pc, #80]	; (80030ec <MX_GPIO_Init+0xd0>)
 800309a:	f001 f861 	bl	8004160 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC4 PC8 PC9
                           PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 800309e:	f643 7310 	movw	r3, #16144	; 0x3f10
 80030a2:	60fb      	str	r3, [r7, #12]
			|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a4:	2301      	movs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	4619      	mov	r1, r3
 80030b6:	480c      	ldr	r0, [pc, #48]	; (80030e8 <MX_GPIO_Init+0xcc>)
 80030b8:	f000 febe 	bl	8003e38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c2:	2301      	movs	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	4619      	mov	r1, r3
 80030d4:	4805      	ldr	r0, [pc, #20]	; (80030ec <MX_GPIO_Init+0xd0>)
 80030d6:	f000 feaf 	bl	8003e38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80030da:	bf00      	nop
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020000 	.word	0x40020000

080030f0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003102:	f000 fce1 	bl	8003ac8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40001000 	.word	0x40001000

08003114 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800311c:	e7fe      	b.n	800311c <Error_Handler+0x8>
	...

08003120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_MspInit+0x54>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a11      	ldr	r2, [pc, #68]	; (8003174 <HAL_MspInit+0x54>)
 8003130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_MspInit+0x54>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_MspInit+0x54>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_MspInit+0x54>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_MspInit+0x54>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	210f      	movs	r1, #15
 8003162:	f06f 0001 	mvn.w	r0, #1
 8003166:	f000 fdab 	bl	8003cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <HAL_I2C_MspInit+0x84>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d12c      	bne.n	80031f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_I2C_MspInit+0x88>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <HAL_I2C_MspInit+0x88>)
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <HAL_I2C_MspInit+0x88>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031bc:	2312      	movs	r3, #18
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c4:	2303      	movs	r3, #3
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031c8:	2304      	movs	r3, #4
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4619      	mov	r1, r3
 80031d2:	480c      	ldr	r0, [pc, #48]	; (8003204 <HAL_I2C_MspInit+0x8c>)
 80031d4:	f000 fe30 	bl	8003e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_I2C_MspInit+0x88>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_I2C_MspInit+0x88>)
 80031e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031e6:	6413      	str	r3, [r2, #64]	; 0x40
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_I2C_MspInit+0x88>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031f4:	bf00      	nop
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40005400 	.word	0x40005400
 8003200:	40023800 	.word	0x40023800
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_TIM_PWM_MspInit+0x64>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_TIM_PWM_MspInit+0x68>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <HAL_TIM_PWM_MspInit+0x68>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6453      	str	r3, [r2, #68]	; 0x44
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_TIM_PWM_MspInit+0x68>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003236:	e012      	b.n	800325e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_TIM_PWM_MspInit+0x6c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10d      	bne.n	800325e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_TIM_PWM_MspInit+0x68>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_TIM_PWM_MspInit+0x68>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <HAL_TIM_PWM_MspInit+0x68>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40023800 	.word	0x40023800
 8003274:	40000400 	.word	0x40000400

08003278 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d115      	bne.n	80032b6 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_TIM_OC_MspInit+0x48>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_TIM_OC_MspInit+0x48>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_TIM_OC_MspInit+0x48>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2105      	movs	r1, #5
 80032aa:	201c      	movs	r0, #28
 80032ac:	f000 fd08 	bl	8003cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032b0:	201c      	movs	r0, #28
 80032b2:	f000 fd21 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a45      	ldr	r2, [pc, #276]	; (80033f8 <HAL_TIM_MspPostInit+0x134>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d11f      	bne.n	8003326 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a43      	ldr	r2, [pc, #268]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003302:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003314:	2301      	movs	r3, #1
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	4619      	mov	r1, r3
 800331e:	4838      	ldr	r0, [pc, #224]	; (8003400 <HAL_TIM_MspPostInit+0x13c>)
 8003320:	f000 fd8a 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003324:	e064      	b.n	80033f0 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d13c      	bne.n	80033aa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	4a30      	ldr	r2, [pc, #192]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6313      	str	r3, [r2, #48]	; 0x30
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	6313      	str	r3, [r2, #48]	; 0x30
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003368:	2320      	movs	r3, #32
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003378:	2301      	movs	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	481f      	ldr	r0, [pc, #124]	; (8003400 <HAL_TIM_MspPostInit+0x13c>)
 8003384:	f000 fd58 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003388:	2308      	movs	r3, #8
 800338a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2300      	movs	r3, #0
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003398:	2301      	movs	r3, #1
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	4619      	mov	r1, r3
 80033a2:	4818      	ldr	r0, [pc, #96]	; (8003404 <HAL_TIM_MspPostInit+0x140>)
 80033a4:	f000 fd48 	bl	8003e38 <HAL_GPIO_Init>
}
 80033a8:	e022      	b.n	80033f0 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_TIM_MspPostInit+0x144>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d11d      	bne.n	80033f0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6313      	str	r3, [r2, #48]	; 0x30
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_TIM_MspPostInit+0x138>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033d0:	2340      	movs	r3, #64	; 0x40
 80033d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033e0:	2302      	movs	r3, #2
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e4:	f107 031c 	add.w	r3, r7, #28
 80033e8:	4619      	mov	r1, r3
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <HAL_TIM_MspPostInit+0x13c>)
 80033ec:	f000 fd24 	bl	8003e38 <HAL_GPIO_Init>
}
 80033f0:	bf00      	nop
 80033f2:	3730      	adds	r7, #48	; 0x30
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400
 8003408:	40000400 	.word	0x40000400

0800340c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b090      	sub	sp, #64	; 0x40
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a83      	ldr	r2, [pc, #524]	; (8003638 <HAL_UART_MspInit+0x22c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d134      	bne.n	8003498 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	4b82      	ldr	r3, [pc, #520]	; (800363c <HAL_UART_MspInit+0x230>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a81      	ldr	r2, [pc, #516]	; (800363c <HAL_UART_MspInit+0x230>)
 8003438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <HAL_UART_MspInit+0x230>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_UART_MspInit+0x230>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a7a      	ldr	r2, [pc, #488]	; (800363c <HAL_UART_MspInit+0x230>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b78      	ldr	r3, [pc, #480]	; (800363c <HAL_UART_MspInit+0x230>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003466:	2303      	movs	r3, #3
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003472:	2303      	movs	r3, #3
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003476:	2308      	movs	r3, #8
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347e:	4619      	mov	r1, r3
 8003480:	486f      	ldr	r0, [pc, #444]	; (8003640 <HAL_UART_MspInit+0x234>)
 8003482:	f000 fcd9 	bl	8003e38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2105      	movs	r1, #5
 800348a:	2034      	movs	r0, #52	; 0x34
 800348c:	f000 fc18 	bl	8003cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003490:	2034      	movs	r0, #52	; 0x34
 8003492:	f000 fc31 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003496:	e0cb      	b.n	8003630 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a69      	ldr	r2, [pc, #420]	; (8003644 <HAL_UART_MspInit+0x238>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d134      	bne.n	800350c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_UART_MspInit+0x230>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a64      	ldr	r2, [pc, #400]	; (800363c <HAL_UART_MspInit+0x230>)
 80034ac:	f043 0310 	orr.w	r3, r3, #16
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b62      	ldr	r3, [pc, #392]	; (800363c <HAL_UART_MspInit+0x230>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_UART_MspInit+0x230>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_UART_MspInit+0x230>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <HAL_UART_MspInit+0x230>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034da:	23c0      	movs	r3, #192	; 0xc0
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2303      	movs	r3, #3
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ea:	2307      	movs	r3, #7
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	4854      	ldr	r0, [pc, #336]	; (8003648 <HAL_UART_MspInit+0x23c>)
 80034f6:	f000 fc9f 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2105      	movs	r1, #5
 80034fe:	2025      	movs	r0, #37	; 0x25
 8003500:	f000 fbde 	bl	8003cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003504:	2025      	movs	r0, #37	; 0x25
 8003506:	f000 fbf7 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
}
 800350a:	e091      	b.n	8003630 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4e      	ldr	r2, [pc, #312]	; (800364c <HAL_UART_MspInit+0x240>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d153      	bne.n	80035be <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	4b48      	ldr	r3, [pc, #288]	; (800363c <HAL_UART_MspInit+0x230>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a47      	ldr	r2, [pc, #284]	; (800363c <HAL_UART_MspInit+0x230>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b45      	ldr	r3, [pc, #276]	; (800363c <HAL_UART_MspInit+0x230>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_UART_MspInit+0x230>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a40      	ldr	r2, [pc, #256]	; (800363c <HAL_UART_MspInit+0x230>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_UART_MspInit+0x230>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_UART_MspInit+0x230>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a39      	ldr	r2, [pc, #228]	; (800363c <HAL_UART_MspInit+0x230>)
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_UART_MspInit+0x230>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800356a:	2320      	movs	r3, #32
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003576:	2303      	movs	r3, #3
 8003578:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800357a:	2307      	movs	r3, #7
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003582:	4619      	mov	r1, r3
 8003584:	4832      	ldr	r0, [pc, #200]	; (8003650 <HAL_UART_MspInit+0x244>)
 8003586:	f000 fc57 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800358a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800359c:	2307      	movs	r3, #7
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a4:	4619      	mov	r1, r3
 80035a6:	4828      	ldr	r0, [pc, #160]	; (8003648 <HAL_UART_MspInit+0x23c>)
 80035a8:	f000 fc46 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2105      	movs	r1, #5
 80035b0:	2027      	movs	r0, #39	; 0x27
 80035b2:	f000 fb85 	bl	8003cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035b6:	2027      	movs	r0, #39	; 0x27
 80035b8:	f000 fb9e 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
}
 80035bc:	e038      	b.n	8003630 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART6)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a24      	ldr	r2, [pc, #144]	; (8003654 <HAL_UART_MspInit+0x248>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d133      	bne.n	8003630 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_UART_MspInit+0x230>)
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_UART_MspInit+0x230>)
 80035d2:	f043 0320 	orr.w	r3, r3, #32
 80035d6:	6453      	str	r3, [r2, #68]	; 0x44
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_UART_MspInit+0x230>)
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_UART_MspInit+0x230>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4a13      	ldr	r2, [pc, #76]	; (800363c <HAL_UART_MspInit+0x230>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6313      	str	r3, [r2, #48]	; 0x30
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_UART_MspInit+0x230>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003600:	23c0      	movs	r3, #192	; 0xc0
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	2303      	movs	r3, #3
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003610:	2308      	movs	r3, #8
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003618:	4619      	mov	r1, r3
 800361a:	480d      	ldr	r0, [pc, #52]	; (8003650 <HAL_UART_MspInit+0x244>)
 800361c:	f000 fc0c 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003620:	2200      	movs	r2, #0
 8003622:	2105      	movs	r1, #5
 8003624:	2047      	movs	r0, #71	; 0x47
 8003626:	f000 fb4b 	bl	8003cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800362a:	2047      	movs	r0, #71	; 0x47
 800362c:	f000 fb64 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
}
 8003630:	bf00      	nop
 8003632:	3740      	adds	r7, #64	; 0x40
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40004c00 	.word	0x40004c00
 800363c:	40023800 	.word	0x40023800
 8003640:	40020000 	.word	0x40020000
 8003644:	40011000 	.word	0x40011000
 8003648:	40020400 	.word	0x40020400
 800364c:	40004800 	.word	0x40004800
 8003650:	40020800 	.word	0x40020800
 8003654:	40011400 	.word	0x40011400

08003658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	; 0x38
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_InitTick+0xe4>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a32      	ldr	r2, [pc, #200]	; (800373c <HAL_InitTick+0xe4>)
 8003672:	f043 0310 	orr.w	r3, r3, #16
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_InitTick+0xe4>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fb38 	bl	8004d04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800369e:	f001 fb09 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 80036a2:	6378      	str	r0, [r7, #52]	; 0x34
 80036a4:	e004      	b.n	80036b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80036a6:	f001 fb05 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 80036aa:	4603      	mov	r3, r0
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_InitTick+0xe8>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	0c9b      	lsrs	r3, r3, #18
 80036ba:	3b01      	subs	r3, #1
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_InitTick+0xec>)
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_InitTick+0xf0>)
 80036c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036c4:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_InitTick+0xec>)
 80036c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <HAL_InitTick+0xec>)
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_InitTick+0xec>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_InitTick+0xec>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_InitTick+0xec>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036e4:	4817      	ldr	r0, [pc, #92]	; (8003744 <HAL_InitTick+0xec>)
 80036e6:	f002 f80d 	bl	8005704 <HAL_TIM_Base_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80036f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11b      	bne.n	8003730 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036f8:	4812      	ldr	r0, [pc, #72]	; (8003744 <HAL_InitTick+0xec>)
 80036fa:	f002 f85d 	bl	80057b8 <HAL_TIM_Base_Start_IT>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003704:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003708:	2b00      	cmp	r3, #0
 800370a:	d111      	bne.n	8003730 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800370c:	2036      	movs	r0, #54	; 0x36
 800370e:	f000 faf3 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d808      	bhi.n	800372a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003718:	2200      	movs	r2, #0
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	2036      	movs	r0, #54	; 0x36
 800371e:	f000 facf 	bl	8003cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <HAL_InitTick+0xf4>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e002      	b.n	8003730 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003730:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003734:	4618      	mov	r0, r3
 8003736:	3738      	adds	r7, #56	; 0x38
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	431bde83 	.word	0x431bde83
 8003744:	200007b8 	.word	0x200007b8
 8003748:	40001000 	.word	0x40001000
 800374c:	2000000c 	.word	0x2000000c

08003750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003754:	e7fe      	b.n	8003754 <NMI_Handler+0x4>

08003756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375a:	e7fe      	b.n	800375a <HardFault_Handler+0x4>

0800375c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003760:	e7fe      	b.n	8003760 <MemManage_Handler+0x4>

08003762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003766:	e7fe      	b.n	8003766 <BusFault_Handler+0x4>

08003768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800376c:	e7fe      	b.n	800376c <UsageFault_Handler+0x4>

0800376e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <TIM2_IRQHandler+0x8c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d12f      	bne.n	80037f0 <TIM2_IRQHandler+0x74>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8003790:	f7fd fe56 	bl	8001440 <Calculate_Car_Speed>
 8003794:	ee10 3a10 	vmov	r3, s0
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fef5 	bl	8000588 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	ec43 2b10 	vmov	d0, r2, r3
 80037a6:	f00a f921 	bl	800d9ec <round>
 80037aa:	ec53 2b10 	vmov	r2, r3, d0
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd fa19 	bl	8000be8 <__aeabi_d2uiz>
 80037b6:	4603      	mov	r3, r0
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <TIM2_IRQHandler+0x90>)
 80037bc:	801a      	strh	r2, [r3, #0]
        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <TIM2_IRQHandler+0x94>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <TIM2_IRQHandler+0x94>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e015      	b.n	80037fa <TIM2_IRQHandler+0x7e>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <TIM2_IRQHandler+0x94>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d111      	bne.n	80037fa <TIM2_IRQHandler+0x7e>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <TIM2_IRQHandler+0x94>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_Esp_Periodic, 0, eNoAction,NULL);
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <TIM2_IRQHandler+0x98>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	2200      	movs	r2, #0
 80037e8:	2100      	movs	r1, #0
 80037ea:	f005 ff0f 	bl	800960c <xTaskGenericNotifyFromISR>
 80037ee:	e004      	b.n	80037fa <TIM2_IRQHandler+0x7e>
        }

	}else {
		edges_counter++;
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <TIM2_IRQHandler+0x9c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a08      	ldr	r2, [pc, #32]	; (8003818 <TIM2_IRQHandler+0x9c>)
 80037f8:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037fa:	4803      	ldr	r0, [pc, #12]	; (8003808 <TIM2_IRQHandler+0x8c>)
 80037fc:	f002 fb4a 	bl	8005e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200005dc 	.word	0x200005dc
 800380c:	20000800 	.word	0x20000800
 8003810:	2000020c 	.word	0x2000020c
 8003814:	20000794 	.word	0x20000794
 8003818:	20000238 	.word	0x20000238

0800381c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <USART1_IRQHandler+0x10>)
 8003822:	f7fe ff57 	bl	80026d4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200006b4 	.word	0x200006b4

08003830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <USART3_IRQHandler+0x10>)
 8003836:	f003 f9bd 	bl	8006bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200006fc 	.word	0x200006fc

08003844 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <UART4_IRQHandler+0x10>)
 800384a:	f003 f9b3 	bl	8006bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000066c 	.word	0x2000066c

08003858 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <TIM6_DAC_IRQHandler+0x10>)
 800385e:	f002 fb19 	bl	8005e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200007b8 	.word	0x200007b8

0800386c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <USART6_IRQHandler+0x10>)
 8003872:	f003 f99f 	bl	8006bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000744 	.word	0x20000744

08003880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return 1;
 8003884:	2301      	movs	r3, #1
}
 8003886:	4618      	mov	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_kill>:

int _kill(int pid, int sig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800389a:	f007 fea7 	bl	800b5ec <__errno>
 800389e:	4603      	mov	r3, r0
 80038a0:	2216      	movs	r2, #22
 80038a2:	601a      	str	r2, [r3, #0]
  return -1;
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_exit>:

void _exit (int status)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffe7 	bl	8003890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038c2:	e7fe      	b.n	80038c2 <_exit+0x12>

080038c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e00a      	b.n	80038ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038d6:	f3af 8000 	nop.w
 80038da:	4601      	mov	r1, r0
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	b2ca      	uxtb	r2, r1
 80038e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3301      	adds	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	dbf0      	blt.n	80038d6 <_read+0x12>
  }

  return len;
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e009      	b.n	8003924 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	60ba      	str	r2, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3301      	adds	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	dbf1      	blt.n	8003910 <_write+0x12>
  }
  return len;
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_close>:

int _close(int file)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800395e:	605a      	str	r2, [r3, #4]
  return 0;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_isatty>:

int _isatty(int file)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <_sbrk+0x5c>)
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <_sbrk+0x60>)
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <_sbrk+0x64>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <_sbrk+0x64>)
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <_sbrk+0x68>)
 80039c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <_sbrk+0x64>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d207      	bcs.n	80039e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039d0:	f007 fe0c 	bl	800b5ec <__errno>
 80039d4:	4603      	mov	r3, r0
 80039d6:	220c      	movs	r2, #12
 80039d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	e009      	b.n	80039f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_sbrk+0x64>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <_sbrk+0x64>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <_sbrk+0x64>)
 80039f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20020000 	.word	0x20020000
 8003a00:	00000400 	.word	0x00000400
 8003a04:	20000804 	.word	0x20000804
 8003a08:	20005340 	.word	0x20005340

08003a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <SystemInit+0x20>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <SystemInit+0x20>)
 8003a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a34:	f7ff ffea 	bl	8003a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a3a:	490d      	ldr	r1, [pc, #52]	; (8003a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a40:	e002      	b.n	8003a48 <LoopCopyDataInit>

08003a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a46:	3304      	adds	r3, #4

08003a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a4c:	d3f9      	bcc.n	8003a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a50:	4c0a      	ldr	r4, [pc, #40]	; (8003a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a54:	e001      	b.n	8003a5a <LoopFillZerobss>

08003a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a58:	3204      	adds	r2, #4

08003a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a5c:	d3fb      	bcc.n	8003a56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a5e:	f007 fdcb 	bl	800b5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a62:	f7fe ff45 	bl	80028f0 <main>
  bx  lr    
 8003a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a70:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003a74:	0800eb28 	.word	0x0800eb28
  ldr r2, =_sbss
 8003a78:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003a7c:	2000533c 	.word	0x2000533c

08003a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a80:	e7fe      	b.n	8003a80 <ADC_IRQHandler>
	...

08003a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <HAL_Init+0x40>)
 8003a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_Init+0x40>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_Init+0x40>)
 8003a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_Init+0x40>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_Init+0x40>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aac:	2003      	movs	r0, #3
 8003aae:	f000 f8fc 	bl	8003caa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f7ff fdd0 	bl	8003658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab8:	f7ff fb32 	bl	8003120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023c00 	.word	0x40023c00

08003ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_IncTick+0x20>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_IncTick+0x24>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_IncTick+0x24>)
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000010 	.word	0x20000010
 8003aec:	20000808 	.word	0x20000808

08003af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return uwTick;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_GetTick+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000808 	.word	0x20000808

08003b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff ffee 	bl	8003af0 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d005      	beq.n	8003b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_Delay+0x44>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b2e:	bf00      	nop
 8003b30:	f7ff ffde 	bl	8003af0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d8f7      	bhi.n	8003b30 <HAL_Delay+0x28>
  {
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000010 	.word	0x20000010

08003b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b82:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	60d3      	str	r3, [r2, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 0307 	and.w	r3, r3, #7
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	db0b      	blt.n	8003bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	f003 021f 	and.w	r2, r3, #31
 8003bcc:	4907      	ldr	r1, [pc, #28]	; (8003bec <__NVIC_EnableIRQ+0x38>)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff4c 	bl	8003b50 <__NVIC_SetPriorityGrouping>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd2:	f7ff ff61 	bl	8003b98 <__NVIC_GetPriorityGrouping>
 8003cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f7ff ffb1 	bl	8003c44 <NVIC_EncodePriority>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff80 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003cf0:	bf00      	nop
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff54 	bl	8003bb4 <__NVIC_EnableIRQ>
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d22:	f7ff fee5 	bl	8003af0 <HAL_GetTick>
 8003d26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d008      	beq.n	8003d46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e052      	b.n	8003dec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0216 	bic.w	r2, r2, #22
 8003d54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <HAL_DMA_Abort+0x62>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0208 	bic.w	r2, r2, #8
 8003d84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d96:	e013      	b.n	8003dc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d98:	f7ff feaa 	bl	8003af0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d90c      	bls.n	8003dc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2203      	movs	r2, #3
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e015      	b.n	8003dec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e4      	bne.n	8003d98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	223f      	movs	r2, #63	; 0x3f
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00c      	b.n	8003e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2205      	movs	r2, #5
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e165      	b.n	8004120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e54:	2201      	movs	r2, #1
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	f040 8154 	bne.w	800411a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d005      	beq.n	8003e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d130      	bne.n	8003eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2203      	movs	r2, #3
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 0201 	and.w	r2, r3, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d017      	beq.n	8003f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	2203      	movs	r2, #3
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d123      	bne.n	8003f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3208      	adds	r2, #8
 8003f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	08da      	lsrs	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3208      	adds	r2, #8
 8003f76:	69b9      	ldr	r1, [r7, #24]
 8003f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0203 	and.w	r2, r3, #3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80ae 	beq.w	800411a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <HAL_GPIO_Init+0x300>)
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	4a5c      	ldr	r2, [pc, #368]	; (8004138 <HAL_GPIO_Init+0x300>)
 8003fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fce:	4b5a      	ldr	r3, [pc, #360]	; (8004138 <HAL_GPIO_Init+0x300>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fda:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_GPIO_Init+0x304>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_GPIO_Init+0x308>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d025      	beq.n	8004052 <HAL_GPIO_Init+0x21a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4e      	ldr	r2, [pc, #312]	; (8004144 <HAL_GPIO_Init+0x30c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01f      	beq.n	800404e <HAL_GPIO_Init+0x216>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4d      	ldr	r2, [pc, #308]	; (8004148 <HAL_GPIO_Init+0x310>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d019      	beq.n	800404a <HAL_GPIO_Init+0x212>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_GPIO_Init+0x314>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_GPIO_Init+0x20e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4b      	ldr	r2, [pc, #300]	; (8004150 <HAL_GPIO_Init+0x318>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00d      	beq.n	8004042 <HAL_GPIO_Init+0x20a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <HAL_GPIO_Init+0x31c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <HAL_GPIO_Init+0x206>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a49      	ldr	r2, [pc, #292]	; (8004158 <HAL_GPIO_Init+0x320>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <HAL_GPIO_Init+0x202>
 8004036:	2306      	movs	r3, #6
 8004038:	e00c      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 800403a:	2307      	movs	r3, #7
 800403c:	e00a      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 800403e:	2305      	movs	r3, #5
 8004040:	e008      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 8004042:	2304      	movs	r3, #4
 8004044:	e006      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 8004046:	2303      	movs	r3, #3
 8004048:	e004      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 800404a:	2302      	movs	r3, #2
 800404c:	e002      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_GPIO_Init+0x21c>
 8004052:	2300      	movs	r3, #0
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f002 0203 	and.w	r2, r2, #3
 800405a:	0092      	lsls	r2, r2, #2
 800405c:	4093      	lsls	r3, r2
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004064:	4935      	ldr	r1, [pc, #212]	; (800413c <HAL_GPIO_Init+0x304>)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	089b      	lsrs	r3, r3, #2
 800406a:	3302      	adds	r3, #2
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004072:	4b3a      	ldr	r3, [pc, #232]	; (800415c <HAL_GPIO_Init+0x324>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004096:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_GPIO_Init+0x324>)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_GPIO_Init+0x324>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <HAL_GPIO_Init+0x324>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_GPIO_Init+0x324>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ea:	4a1c      	ldr	r2, [pc, #112]	; (800415c <HAL_GPIO_Init+0x324>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_GPIO_Init+0x324>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004114:	4a11      	ldr	r2, [pc, #68]	; (800415c <HAL_GPIO_Init+0x324>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	f67f ae96 	bls.w	8003e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	40013800 	.word	0x40013800
 8004140:	40020000 	.word	0x40020000
 8004144:	40020400 	.word	0x40020400
 8004148:	40020800 	.word	0x40020800
 800414c:	40020c00 	.word	0x40020c00
 8004150:	40021000 	.word	0x40021000
 8004154:	40021400 	.word	0x40021400
 8004158:	40021800 	.word	0x40021800
 800415c:	40013c00 	.word	0x40013c00

08004160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
 800416c:	4613      	mov	r3, r2
 800416e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004170:	787b      	ldrb	r3, [r7, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800417c:	e003      	b.n	8004186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417e:	887b      	ldrh	r3, [r7, #2]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	619a      	str	r2, [r3, #24]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e12b      	b.n	80043fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe ffdc 	bl	8003178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f8:	f000 fd5c 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4a81      	ldr	r2, [pc, #516]	; (8004408 <HAL_I2C_Init+0x274>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d807      	bhi.n	8004218 <HAL_I2C_Init+0x84>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a80      	ldr	r2, [pc, #512]	; (800440c <HAL_I2C_Init+0x278>)
 800420c:	4293      	cmp	r3, r2
 800420e:	bf94      	ite	ls
 8004210:	2301      	movls	r3, #1
 8004212:	2300      	movhi	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e006      	b.n	8004226 <HAL_I2C_Init+0x92>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a7d      	ldr	r2, [pc, #500]	; (8004410 <HAL_I2C_Init+0x27c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	bf94      	ite	ls
 8004220:	2301      	movls	r3, #1
 8004222:	2300      	movhi	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0e7      	b.n	80043fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a78      	ldr	r2, [pc, #480]	; (8004414 <HAL_I2C_Init+0x280>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0c9b      	lsrs	r3, r3, #18
 8004238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_I2C_Init+0x274>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d802      	bhi.n	8004268 <HAL_I2C_Init+0xd4>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3301      	adds	r3, #1
 8004266:	e009      	b.n	800427c <HAL_I2C_Init+0xe8>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a69      	ldr	r2, [pc, #420]	; (8004418 <HAL_I2C_Init+0x284>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	3301      	adds	r3, #1
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800428e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	495c      	ldr	r1, [pc, #368]	; (8004408 <HAL_I2C_Init+0x274>)
 8004298:	428b      	cmp	r3, r1
 800429a:	d819      	bhi.n	80042d0 <HAL_I2C_Init+0x13c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1e59      	subs	r1, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042aa:	1c59      	adds	r1, r3, #1
 80042ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042b0:	400b      	ands	r3, r1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_I2C_Init+0x138>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1e59      	subs	r1, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	e051      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 80042cc:	2304      	movs	r3, #4
 80042ce:	e04f      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <HAL_I2C_Init+0x168>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1e58      	subs	r0, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	440b      	add	r3, r1
 80042e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e012      	b.n	8004322 <HAL_I2C_Init+0x18e>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e58      	subs	r0, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	0099      	lsls	r1, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004312:	3301      	adds	r3, #1
 8004314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Init+0x196>
 8004326:	2301      	movs	r3, #1
 8004328:	e022      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <HAL_I2C_Init+0x1bc>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1e58      	subs	r0, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	440b      	add	r3, r1
 8004340:	fbb0 f3f3 	udiv	r3, r0, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434e:	e00f      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e58      	subs	r0, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	0099      	lsls	r1, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	fbb0 f3f3 	udiv	r3, r0, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	6809      	ldr	r1, [r1, #0]
 8004374:	4313      	orrs	r3, r2
 8004376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800439e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6911      	ldr	r1, [r2, #16]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	4311      	orrs	r1, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	000186a0 	.word	0x000186a0
 800440c:	001e847f 	.word	0x001e847f
 8004410:	003d08ff 	.word	0x003d08ff
 8004414:	431bde83 	.word	0x431bde83
 8004418:	10624dd3 	.word	0x10624dd3

0800441c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	461a      	mov	r2, r3
 8004428:	460b      	mov	r3, r1
 800442a:	817b      	strh	r3, [r7, #10]
 800442c:	4613      	mov	r3, r2
 800442e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004430:	f7ff fb5e 	bl	8003af0 <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b20      	cmp	r3, #32
 8004440:	f040 80e0 	bne.w	8004604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2319      	movs	r3, #25
 800444a:	2201      	movs	r2, #1
 800444c:	4970      	ldr	r1, [pc, #448]	; (8004610 <HAL_I2C_Master_Transmit+0x1f4>)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f964 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
 800445c:	e0d3      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_I2C_Master_Transmit+0x50>
 8004468:	2302      	movs	r3, #2
 800446a:	e0cc      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ea>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d007      	beq.n	8004492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2221      	movs	r2, #33	; 0x21
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2210      	movs	r2, #16
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	893a      	ldrh	r2, [r7, #8]
 80044c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a50      	ldr	r2, [pc, #320]	; (8004614 <HAL_I2C_Master_Transmit+0x1f8>)
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f89c 	bl	8004618 <I2C_MasterRequestWrite>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e08d      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004500:	e066      	b.n	80045d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	6a39      	ldr	r1, [r7, #32]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa22 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b04      	cmp	r3, #4
 8004518:	d107      	bne.n	800452a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06b      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d11b      	bne.n	80045a4 <HAL_I2C_Master_Transmit+0x188>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d017      	beq.n	80045a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6a39      	ldr	r1, [r7, #32]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fa19 	bl	80049e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d107      	bne.n	80045cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e01a      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d194      	bne.n	8004502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	00100002 	.word	0x00100002
 8004614:	ffff0000 	.word	0xffff0000

08004618 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	460b      	mov	r3, r1
 8004626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d006      	beq.n	8004642 <I2C_MasterRequestWrite+0x2a>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d003      	beq.n	8004642 <I2C_MasterRequestWrite+0x2a>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004640:	d108      	bne.n	8004654 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00b      	b.n	800466c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	2b12      	cmp	r3, #18
 800465a:	d107      	bne.n	800466c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f84f 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004692:	d103      	bne.n	800469c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e035      	b.n	800470c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a8:	d108      	bne.n	80046bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046aa:	897b      	ldrh	r3, [r7, #10]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046b8:	611a      	str	r2, [r3, #16]
 80046ba:	e01b      	b.n	80046f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	11db      	asrs	r3, r3, #7
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0306 	and.w	r3, r3, #6
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f063 030f 	orn	r3, r3, #15
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	490e      	ldr	r1, [pc, #56]	; (8004714 <I2C_MasterRequestWrite+0xfc>)
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f898 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e010      	b.n	800470c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4907      	ldr	r1, [pc, #28]	; (8004718 <I2C_MasterRequestWrite+0x100>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f888 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	00010008 	.word	0x00010008
 8004718:	00010002 	.word	0x00010002

0800471c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472c:	e048      	b.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d044      	beq.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7ff f9db 	bl	8003af0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d139      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	e00c      	b.n	800478c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	d116      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e023      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10d      	bne.n	80047e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	e00c      	b.n	8004800 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	d093      	beq.n	800472e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800481e:	e071      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d123      	bne.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f043 0204 	orr.w	r2, r3, #4
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e067      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d041      	beq.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7ff f936 	bl	8003af0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d136      	bne.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10c      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e00b      	b.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e021      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d10c      	bne.n	8004928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	43da      	mvns	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e00b      	b.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f af6d 	bne.w	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495c:	e034      	b.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f886 	bl	8004a70 <I2C_IsAcknowledgeFailed>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d028      	beq.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7ff f8bb 	bl	8003af0 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11d      	bne.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d016      	beq.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d1c3      	bne.n	800495e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ec:	e034      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f83e 	bl	8004a70 <I2C_IsAcknowledgeFailed>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d028      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7ff f873 	bl	8003af0 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d11d      	bne.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d016      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d1c3      	bne.n	80049ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	d11b      	bne.n	8004ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0cc      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b68      	ldr	r3, [pc, #416]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d90c      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b63      	ldr	r3, [pc, #396]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	494d      	ldr	r1, [pc, #308]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d044      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d119      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e067      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4934      	ldr	r1, [pc, #208]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc0:	f7fe ff96 	bl	8003af0 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fe ff92 	bl	8003af0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e04f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20c      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e032      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4916      	ldr	r1, [pc, #88]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	490e      	ldr	r1, [pc, #56]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c56:	f000 f887 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490a      	ldr	r1, [pc, #40]	; (8004c90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fcee 	bl	8003658 <HAL_InitTick>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023c00 	.word	0x40023c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	0800e754 	.word	0x0800e754
 8004c94:	20000008 	.word	0x20000008
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000008 	.word	0x20000008

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb8:	f7ff fff0 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0a9b      	lsrs	r3, r3, #10
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800e764 	.word	0x0800e764

08004cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ce0:	f7ff ffdc 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0b5b      	lsrs	r3, r3, #13
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4903      	ldr	r1, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	0800e764 	.word	0x0800e764

08004d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	220f      	movs	r2, #15
 8004d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0203 	and.w	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <HAL_RCC_GetClockConfig+0x60>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 020f 	and.w	r2, r3, #15
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40023c00 	.word	0x40023c00

08004d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d6c:	b0ae      	sub	sp, #184	; 0xb8
 8004d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8e:	4bcb      	ldr	r3, [pc, #812]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	f200 8206 	bhi.w	80051a8 <HAL_RCC_GetSysClockFreq+0x440>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	080051a9 	.word	0x080051a9
 8004dac:	080051a9 	.word	0x080051a9
 8004db0:	080051a9 	.word	0x080051a9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	080051a9 	.word	0x080051a9
 8004dbc:	080051a9 	.word	0x080051a9
 8004dc0:	080051a9 	.word	0x080051a9
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	080051a9 	.word	0x080051a9
 8004dcc:	080051a9 	.word	0x080051a9
 8004dd0:	080051a9 	.word	0x080051a9
 8004dd4:	08004fd9 	.word	0x08004fd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd8:	4bb9      	ldr	r3, [pc, #740]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004dde:	e1e7      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de0:	4bb8      	ldr	r3, [pc, #736]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004de6:	e1e3      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de8:	4bb4      	ldr	r3, [pc, #720]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df4:	4bb1      	ldr	r3, [pc, #708]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d071      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e00:	4bae      	ldr	r3, [pc, #696]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	f04f 0000 	mov.w	r0, #0
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	0159      	lsls	r1, r3, #5
 8004e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e38:	0150      	lsls	r0, r2, #5
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4621      	mov	r1, r4
 8004e40:	1a51      	subs	r1, r2, r1
 8004e42:	6439      	str	r1, [r7, #64]	; 0x40
 8004e44:	4629      	mov	r1, r5
 8004e46:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004e58:	4649      	mov	r1, r9
 8004e5a:	018b      	lsls	r3, r1, #6
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e62:	4641      	mov	r1, r8
 8004e64:	018a      	lsls	r2, r1, #6
 8004e66:	4641      	mov	r1, r8
 8004e68:	1a51      	subs	r1, r2, r1
 8004e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004e80:	4649      	mov	r1, r9
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4641      	mov	r1, r8
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4622      	mov	r2, r4
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	633b      	str	r3, [r7, #48]	; 0x30
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	024b      	lsls	r3, r1, #9
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eba:	4621      	mov	r1, r4
 8004ebc:	024a      	lsls	r2, r1, #9
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ecc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ed0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ed4:	f7fb fef8 	bl	8000cc8 <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4613      	mov	r3, r2
 8004ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee2:	e067      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee4:	4b75      	ldr	r3, [pc, #468]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ef0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004efe:	2300      	movs	r3, #0
 8004f00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004f06:	4622      	mov	r2, r4
 8004f08:	462b      	mov	r3, r5
 8004f0a:	f04f 0000 	mov.w	r0, #0
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	0159      	lsls	r1, r3, #5
 8004f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f18:	0150      	lsls	r0, r2, #5
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4621      	mov	r1, r4
 8004f20:	1a51      	subs	r1, r2, r1
 8004f22:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f24:	4629      	mov	r1, r5
 8004f26:	eb63 0301 	sbc.w	r3, r3, r1
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004f38:	4649      	mov	r1, r9
 8004f3a:	018b      	lsls	r3, r1, #6
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f42:	4641      	mov	r1, r8
 8004f44:	018a      	lsls	r2, r1, #6
 8004f46:	4641      	mov	r1, r8
 8004f48:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f66:	4692      	mov	sl, r2
 8004f68:	469b      	mov	fp, r3
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	eb1a 0303 	adds.w	r3, sl, r3
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	462b      	mov	r3, r5
 8004f74:	eb4b 0303 	adc.w	r3, fp, r3
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004f86:	4629      	mov	r1, r5
 8004f88:	028b      	lsls	r3, r1, #10
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f90:	4621      	mov	r1, r4
 8004f92:	028a      	lsls	r2, r1, #10
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa0:	677a      	str	r2, [r7, #116]	; 0x74
 8004fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004fa6:	f7fb fe8f 	bl	8000cc8 <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4613      	mov	r3, r2
 8004fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fb4:	4b41      	ldr	r3, [pc, #260]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fd6:	e0eb      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fd8:	4b38      	ldr	r3, [pc, #224]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d06b      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff0:	4b32      	ldr	r3, [pc, #200]	; (80050bc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005002:	663b      	str	r3, [r7, #96]	; 0x60
 8005004:	2300      	movs	r3, #0
 8005006:	667b      	str	r3, [r7, #100]	; 0x64
 8005008:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	f04f 0000 	mov.w	r0, #0
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800501e:	0150      	lsls	r0, r2, #5
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4621      	mov	r1, r4
 8005026:	1a51      	subs	r1, r2, r1
 8005028:	61b9      	str	r1, [r7, #24]
 800502a:	4629      	mov	r1, r5
 800502c:	eb63 0301 	sbc.w	r3, r3, r1
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800503e:	4659      	mov	r1, fp
 8005040:	018b      	lsls	r3, r1, #6
 8005042:	4651      	mov	r1, sl
 8005044:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005048:	4651      	mov	r1, sl
 800504a:	018a      	lsls	r2, r1, #6
 800504c:	4651      	mov	r1, sl
 800504e:	ebb2 0801 	subs.w	r8, r2, r1
 8005052:	4659      	mov	r1, fp
 8005054:	eb63 0901 	sbc.w	r9, r3, r1
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005064:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005068:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800506c:	4690      	mov	r8, r2
 800506e:	4699      	mov	r9, r3
 8005070:	4623      	mov	r3, r4
 8005072:	eb18 0303 	adds.w	r3, r8, r3
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	462b      	mov	r3, r5
 800507a:	eb49 0303 	adc.w	r3, r9, r3
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800508c:	4629      	mov	r1, r5
 800508e:	024b      	lsls	r3, r1, #9
 8005090:	4621      	mov	r1, r4
 8005092:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005096:	4621      	mov	r1, r4
 8005098:	024a      	lsls	r2, r1, #9
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050a2:	2200      	movs	r2, #0
 80050a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80050a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ac:	f7fb fe0c 	bl	8000cc8 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ba:	e065      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x420>
 80050bc:	40023800 	.word	0x40023800
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c8:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	2200      	movs	r2, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	4611      	mov	r1, r2
 80050d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050d8:	653b      	str	r3, [r7, #80]	; 0x50
 80050da:	2300      	movs	r3, #0
 80050dc:	657b      	str	r3, [r7, #84]	; 0x54
 80050de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80050e2:	4642      	mov	r2, r8
 80050e4:	464b      	mov	r3, r9
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	0159      	lsls	r1, r3, #5
 80050f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f4:	0150      	lsls	r0, r2, #5
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4641      	mov	r1, r8
 80050fc:	1a51      	subs	r1, r2, r1
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	4649      	mov	r1, r9
 8005102:	eb63 0301 	sbc.w	r3, r3, r1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005114:	4659      	mov	r1, fp
 8005116:	018b      	lsls	r3, r1, #6
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511e:	4651      	mov	r1, sl
 8005120:	018a      	lsls	r2, r1, #6
 8005122:	4651      	mov	r1, sl
 8005124:	1a54      	subs	r4, r2, r1
 8005126:	4659      	mov	r1, fp
 8005128:	eb63 0501 	sbc.w	r5, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	00eb      	lsls	r3, r5, #3
 8005136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513a:	00e2      	lsls	r2, r4, #3
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	4643      	mov	r3, r8
 8005142:	18e3      	adds	r3, r4, r3
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	464b      	mov	r3, r9
 8005148:	eb45 0303 	adc.w	r3, r5, r3
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800515a:	4629      	mov	r1, r5
 800515c:	028b      	lsls	r3, r1, #10
 800515e:	4621      	mov	r1, r4
 8005160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005164:	4621      	mov	r1, r4
 8005166:	028a      	lsls	r2, r1, #10
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005170:	2200      	movs	r2, #0
 8005172:	64bb      	str	r3, [r7, #72]	; 0x48
 8005174:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005176:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800517a:	f7fb fda5 	bl	8000cc8 <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4613      	mov	r3, r2
 8005184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005188:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	0f1b      	lsrs	r3, r3, #28
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800519a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051a6:	e003      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80051aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	37b8      	adds	r7, #184	; 0xb8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	00f42400 	.word	0x00f42400

080051c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e28d      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8083 	beq.w	80052ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051e8:	4b94      	ldr	r3, [pc, #592]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 030c 	and.w	r3, r3, #12
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d019      	beq.n	8005228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051f4:	4b91      	ldr	r3, [pc, #580]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005200:	4b8e      	ldr	r3, [pc, #568]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800520c:	d00c      	beq.n	8005228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520e:	4b8b      	ldr	r3, [pc, #556]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d112      	bne.n	8005240 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521a:	4b88      	ldr	r3, [pc, #544]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005226:	d10b      	bne.n	8005240 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005228:	4b84      	ldr	r3, [pc, #528]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d05b      	beq.n	80052ec <HAL_RCC_OscConfig+0x124>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d157      	bne.n	80052ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e25a      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d106      	bne.n	8005258 <HAL_RCC_OscConfig+0x90>
 800524a:	4b7c      	ldr	r3, [pc, #496]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a7b      	ldr	r2, [pc, #492]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e01d      	b.n	8005294 <HAL_RCC_OscConfig+0xcc>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0xb4>
 8005262:	4b76      	ldr	r3, [pc, #472]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a75      	ldr	r2, [pc, #468]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4b73      	ldr	r3, [pc, #460]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a72      	ldr	r2, [pc, #456]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e00b      	b.n	8005294 <HAL_RCC_OscConfig+0xcc>
 800527c:	4b6f      	ldr	r3, [pc, #444]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6e      	ldr	r2, [pc, #440]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	4b6c      	ldr	r3, [pc, #432]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a6b      	ldr	r2, [pc, #428]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800528e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d013      	beq.n	80052c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fe fc28 	bl	8003af0 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fe fc24 	bl	8003af0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e21f      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0xdc>
 80052c2:	e014      	b.n	80052ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fe fc14 	bl	8003af0 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fe fc10 	bl	8003af0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e20b      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052de:	4b57      	ldr	r3, [pc, #348]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x104>
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06f      	beq.n	80053da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052fa:	4b50      	ldr	r3, [pc, #320]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005306:	4b4d      	ldr	r3, [pc, #308]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800530e:	2b08      	cmp	r3, #8
 8005310:	d105      	bne.n	800531e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005312:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d11c      	bne.n	8005364 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532a:	4b44      	ldr	r3, [pc, #272]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d116      	bne.n	8005364 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005336:	4b41      	ldr	r3, [pc, #260]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_RCC_OscConfig+0x186>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e1d3      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	4b3b      	ldr	r3, [pc, #236]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4937      	ldr	r1, [pc, #220]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	e03a      	b.n	80053da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_RCC_OscConfig+0x278>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7fe fbbd 	bl	8003af0 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537a:	f7fe fbb9 	bl	8003af0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1b4      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_RCC_OscConfig+0x274>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4925      	ldr	r1, [pc, #148]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <HAL_RCC_OscConfig+0x278>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fe fb9c 	bl	8003af0 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053bc:	f7fe fb98 	bl	8003af0 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e193      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x274>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d036      	beq.n	8005454 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fe fb7c 	bl	8003af0 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fe fb78 	bl	8003af0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e173      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_RCC_OscConfig+0x274>)
 8005410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x234>
 800541a:	e01b      	b.n	8005454 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005422:	f7fe fb65 	bl	8003af0 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	e00e      	b.n	8005448 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542a:	f7fe fb61 	bl	8003af0 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d907      	bls.n	8005448 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e15c      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
 800543c:	40023800 	.word	0x40023800
 8005440:	42470000 	.word	0x42470000
 8005444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005448:	4b8a      	ldr	r3, [pc, #552]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ea      	bne.n	800542a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8097 	beq.w	8005590 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005466:	4b83      	ldr	r3, [pc, #524]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	4b7f      	ldr	r3, [pc, #508]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	4a7e      	ldr	r2, [pc, #504]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	6413      	str	r3, [r2, #64]	; 0x40
 8005482:	4b7c      	ldr	r3, [pc, #496]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005492:	4b79      	ldr	r3, [pc, #484]	; (8005678 <HAL_RCC_OscConfig+0x4b0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d118      	bne.n	80054d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800549e:	4b76      	ldr	r3, [pc, #472]	; (8005678 <HAL_RCC_OscConfig+0x4b0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a75      	ldr	r2, [pc, #468]	; (8005678 <HAL_RCC_OscConfig+0x4b0>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054aa:	f7fe fb21 	bl	8003af0 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b2:	f7fe fb1d 	bl	8003af0 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e118      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	4b6c      	ldr	r3, [pc, #432]	; (8005678 <HAL_RCC_OscConfig+0x4b0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d106      	bne.n	80054e6 <HAL_RCC_OscConfig+0x31e>
 80054d8:	4b66      	ldr	r3, [pc, #408]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a65      	ldr	r2, [pc, #404]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
 80054e4:	e01c      	b.n	8005520 <HAL_RCC_OscConfig+0x358>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d10c      	bne.n	8005508 <HAL_RCC_OscConfig+0x340>
 80054ee:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	4a60      	ldr	r2, [pc, #384]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	6713      	str	r3, [r2, #112]	; 0x70
 80054fa:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	4a5d      	ldr	r2, [pc, #372]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	6713      	str	r3, [r2, #112]	; 0x70
 8005506:	e00b      	b.n	8005520 <HAL_RCC_OscConfig+0x358>
 8005508:	4b5a      	ldr	r3, [pc, #360]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a59      	ldr	r2, [pc, #356]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
 8005514:	4b57      	ldr	r3, [pc, #348]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a56      	ldr	r2, [pc, #344]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800551a:	f023 0304 	bic.w	r3, r3, #4
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005528:	f7fe fae2 	bl	8003af0 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552e:	e00a      	b.n	8005546 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005530:	f7fe fade 	bl	8003af0 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f241 3288 	movw	r2, #5000	; 0x1388
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e0d7      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005546:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0ee      	beq.n	8005530 <HAL_RCC_OscConfig+0x368>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fe facc 	bl	8003af0 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555a:	e00a      	b.n	8005572 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7fe fac8 	bl	8003af0 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0c1      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005572:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1ee      	bne.n	800555c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	4a3a      	ldr	r2, [pc, #232]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80ad 	beq.w	80056f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d060      	beq.n	8005668 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d145      	bne.n	800563a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <HAL_RCC_OscConfig+0x4b4>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fe fa9c 	bl	8003af0 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fe fa98 	bl	8003af0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e093      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	3b01      	subs	r3, #1
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	071b      	lsls	r3, r3, #28
 8005606:	491b      	ldr	r1, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x4b4>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005612:	f7fe fa6d 	bl	8003af0 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561a:	f7fe fa69 	bl	8003af0 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e064      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x452>
 8005638:	e05c      	b.n	80056f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCC_OscConfig+0x4b4>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fe fa56 	bl	8003af0 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005648:	f7fe fa52 	bl	8003af0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e04d      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_OscConfig+0x4ac>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x480>
 8005666:	e045      	b.n	80056f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e040      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
 800567c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005680:	4b1f      	ldr	r3, [pc, #124]	; (8005700 <HAL_RCC_OscConfig+0x538>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d030      	beq.n	80056f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d129      	bne.n	80056f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d122      	bne.n	80056f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d119      	bne.n	80056f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d10f      	bne.n	80056f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800

08005704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e041      	b.n	800579a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f839 	bl	80057a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fdd2 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e04e      	b.n	800586e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a23      	ldr	r2, [pc, #140]	; (800587c <HAL_TIM_Base_Start_IT+0xc4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d022      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d01d      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <HAL_TIM_Base_Start_IT+0xc8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <HAL_TIM_Base_Start_IT+0xcc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_TIM_Base_Start_IT+0xd0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1b      	ldr	r2, [pc, #108]	; (800588c <HAL_TIM_Base_Start_IT+0xd4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a19      	ldr	r2, [pc, #100]	; (8005890 <HAL_TIM_Base_Start_IT+0xd8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x80>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_TIM_Base_Start_IT+0xdc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b06      	cmp	r3, #6
 8005848:	d010      	beq.n	800586c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	e007      	b.n	800586c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40010400 	.word	0x40010400
 8005890:	40014000 	.word	0x40014000
 8005894:	40001800 	.word	0x40001800

08005898 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e041      	b.n	800592e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fd fcda 	bl	8003278 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fd08 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e041      	b.n	80059cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fd fc53 	bl	8003208 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f000 fcb9 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_TIM_PWM_Start+0x24>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e022      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d109      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x3e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e015      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d109      	bne.n	8005a2c <HAL_TIM_PWM_Start+0x58>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e008      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e07c      	b.n	8005b40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x82>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	e013      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0x92>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a64:	e00b      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a74:	e003      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fe8c 	bl	80067a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <HAL_TIM_PWM_Start+0x174>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIM_PWM_Start+0xcc>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <HAL_TIM_PWM_Start+0x178>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIM_PWM_Start+0xd0>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xd2>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <HAL_TIM_PWM_Start+0x174>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005acc:	d01d      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_TIM_PWM_Start+0x17c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <HAL_TIM_PWM_Start+0x180>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_TIM_PWM_Start+0x184>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <HAL_TIM_PWM_Start+0x178>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <HAL_TIM_PWM_Start+0x188>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <HAL_TIM_PWM_Start+0x18c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d111      	bne.n	8005b2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b06      	cmp	r3, #6
 8005b1a:	d010      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2c:	e007      	b.n	8005b3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40001800 	.word	0x40001800

08005b64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fe14 	bl	80067a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <HAL_TIM_PWM_Stop+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_TIM_PWM_Stop+0x2c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <HAL_TIM_PWM_Stop+0xdc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIM_PWM_Stop+0x30>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_TIM_PWM_Stop+0x32>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d017      	beq.n	8005bca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <HAL_TIM_PWM_Stop+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	f240 4344 	movw	r3, #1092	; 0x444
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <HAL_TIM_PWM_Stop+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <HAL_TIM_PWM_Stop+0x96>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	f240 4344 	movw	r3, #1092	; 0x444
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_TIM_PWM_Stop+0x96>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Stop+0xa6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c08:	e013      	b.n	8005c32 <HAL_TIM_PWM_Stop+0xce>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Stop+0xb6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	e00b      	b.n	8005c32 <HAL_TIM_PWM_Stop+0xce>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Stop+0xc6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c28:	e003      	b.n	8005c32 <HAL_TIM_PWM_Stop+0xce>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_IC_Start_IT+0x1e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0x46>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_IC_Start_IT+0x2e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0x46>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_IC_Start_IT+0x3e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0x46>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_TIM_IC_Start_IT+0x58>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e013      	b.n	8005cc4 <HAL_TIM_IC_Start_IT+0x80>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d104      	bne.n	8005cac <HAL_TIM_IC_Start_IT+0x68>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e00b      	b.n	8005cc4 <HAL_TIM_IC_Start_IT+0x80>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d104      	bne.n	8005cbc <HAL_TIM_IC_Start_IT+0x78>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e003      	b.n	8005cc4 <HAL_TIM_IC_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d102      	bne.n	8005cd2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ccc:	7b7b      	ldrb	r3, [r7, #13]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d001      	beq.n	8005cd6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0cc      	b.n	8005e70 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_IC_Start_IT+0xa2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce4:	e013      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0xca>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_IC_Start_IT+0xb2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf4:	e00b      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0xca>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_IC_Start_IT+0xc2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d04:	e003      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0xca>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_IC_Start_IT+0xda>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1c:	e013      	b.n	8005d46 <HAL_TIM_IC_Start_IT+0x102>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_IC_Start_IT+0xea>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d2c:	e00b      	b.n	8005d46 <HAL_TIM_IC_Start_IT+0x102>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_IC_Start_IT+0xfa>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	e003      	b.n	8005d46 <HAL_TIM_IC_Start_IT+0x102>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d841      	bhi.n	8005dd0 <HAL_TIM_IC_Start_IT+0x18c>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <HAL_TIM_IC_Start_IT+0x110>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d89 	.word	0x08005d89
 8005d58:	08005dd1 	.word	0x08005dd1
 8005d5c:	08005dd1 	.word	0x08005dd1
 8005d60:	08005dd1 	.word	0x08005dd1
 8005d64:	08005d9b 	.word	0x08005d9b
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005dd1 	.word	0x08005dd1
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005dd1 	.word	0x08005dd1
 8005d84:	08005dbf 	.word	0x08005dbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0202 	orr.w	r2, r2, #2
 8005d96:	60da      	str	r2, [r3, #12]
      break;
 8005d98:	e01d      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0204 	orr.w	r2, r2, #4
 8005da8:	60da      	str	r2, [r3, #12]
      break;
 8005daa:	e014      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0208 	orr.w	r2, r2, #8
 8005dba:	60da      	str	r2, [r3, #12]
      break;
 8005dbc:	e00b      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0210 	orr.w	r2, r2, #16
 8005dcc:	60da      	str	r2, [r3, #12]
      break;
 8005dce:	e002      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d148      	bne.n	8005e6e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fcdd 	bl	80067a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <HAL_TIM_IC_Start_IT+0x234>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d01d      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <HAL_TIM_IC_Start_IT+0x238>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d018      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1c      	ldr	r2, [pc, #112]	; (8005e80 <HAL_TIM_IC_Start_IT+0x23c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_TIM_IC_Start_IT+0x240>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <HAL_TIM_IC_Start_IT+0x244>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIM_IC_Start_IT+0x248>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <HAL_TIM_IC_Start_IT+0x24c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d111      	bne.n	8005e5e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d010      	beq.n	8005e6e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5c:	e007      	b.n	8005e6e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40001800 	.word	0x40001800

08005e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d020      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0202 	mvn.w	r2, #2
 8005ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fb fb2e 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9e2 	bl	80062b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f9e9 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0204 	mvn.w	r2, #4
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fb fb08 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9bc 	bl	80062b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f9c3 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0208 	mvn.w	r2, #8
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2204      	movs	r2, #4
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb fae2 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f996 	bl	80062b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f99d 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0210 	mvn.w	r2, #16
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fb fabc 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f970 	bl	80062b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f977 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0201 	mvn.w	r2, #1
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fd f878 	bl	80030f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fcbe 	bl	80069a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f948 	bl	80062d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0220 	mvn.w	r2, #32
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fc90 	bl	800698c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_TIM_OC_ConfigChannel+0x1e>
 800608e:	2302      	movs	r3, #2
 8006090:	e048      	b.n	8006124 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b0c      	cmp	r3, #12
 800609e:	d839      	bhi.n	8006114 <HAL_TIM_OC_ConfigChannel+0xa0>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060dd 	.word	0x080060dd
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006115 	.word	0x08006115
 80060b4:	08006115 	.word	0x08006115
 80060b8:	080060eb 	.word	0x080060eb
 80060bc:	08006115 	.word	0x08006115
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006115 	.word	0x08006115
 80060c8:	080060f9 	.word	0x080060f9
 80060cc:	08006115 	.word	0x08006115
 80060d0:	08006115 	.word	0x08006115
 80060d4:	08006115 	.word	0x08006115
 80060d8:	08006107 	.word	0x08006107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f9ae 	bl	8006444 <TIM_OC1_SetConfig>
      break;
 80060e8:	e017      	b.n	800611a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fa17 	bl	8006524 <TIM_OC2_SetConfig>
      break;
 80060f6:	e010      	b.n	800611a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fa86 	bl	8006610 <TIM_OC3_SetConfig>
      break;
 8006104:	e009      	b.n	800611a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 faf3 	bl	80066f8 <TIM_OC4_SetConfig>
      break;
 8006112:	e002      	b.n	800611a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	75fb      	strb	r3, [r7, #23]
      break;
 8006118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006146:	2302      	movs	r3, #2
 8006148:	e0ae      	b.n	80062a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	f200 809f 	bhi.w	8006298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006195 	.word	0x08006195
 8006164:	08006299 	.word	0x08006299
 8006168:	08006299 	.word	0x08006299
 800616c:	08006299 	.word	0x08006299
 8006170:	080061d5 	.word	0x080061d5
 8006174:	08006299 	.word	0x08006299
 8006178:	08006299 	.word	0x08006299
 800617c:	08006299 	.word	0x08006299
 8006180:	08006217 	.word	0x08006217
 8006184:	08006299 	.word	0x08006299
 8006188:	08006299 	.word	0x08006299
 800618c:	08006299 	.word	0x08006299
 8006190:	08006257 	.word	0x08006257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f952 	bl	8006444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0208 	orr.w	r2, r2, #8
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0204 	bic.w	r2, r2, #4
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	619a      	str	r2, [r3, #24]
      break;
 80061d2:	e064      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f9a2 	bl	8006524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]
      break;
 8006214:	e043      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f9f7 	bl	8006610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0208 	orr.w	r2, r2, #8
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0204 	bic.w	r2, r2, #4
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	61da      	str	r2, [r3, #28]
      break;
 8006254:	e023      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fa4b 	bl	80066f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	021a      	lsls	r2, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	61da      	str	r2, [r3, #28]
      break;
 8006296:	e002      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
      break;
 800629c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a46      	ldr	r2, [pc, #280]	; (8006418 <TIM_Base_SetConfig+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d00f      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a43      	ldr	r2, [pc, #268]	; (800641c <TIM_Base_SetConfig+0x130>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00b      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a42      	ldr	r2, [pc, #264]	; (8006420 <TIM_Base_SetConfig+0x134>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a41      	ldr	r2, [pc, #260]	; (8006424 <TIM_Base_SetConfig+0x138>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a40      	ldr	r2, [pc, #256]	; (8006428 <TIM_Base_SetConfig+0x13c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a35      	ldr	r2, [pc, #212]	; (8006418 <TIM_Base_SetConfig+0x12c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d02b      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d027      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a32      	ldr	r2, [pc, #200]	; (800641c <TIM_Base_SetConfig+0x130>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d023      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a31      	ldr	r2, [pc, #196]	; (8006420 <TIM_Base_SetConfig+0x134>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01f      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a30      	ldr	r2, [pc, #192]	; (8006424 <TIM_Base_SetConfig+0x138>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01b      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <TIM_Base_SetConfig+0x13c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d017      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2e      	ldr	r2, [pc, #184]	; (800642c <TIM_Base_SetConfig+0x140>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2d      	ldr	r2, [pc, #180]	; (8006430 <TIM_Base_SetConfig+0x144>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <TIM_Base_SetConfig+0x148>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2b      	ldr	r2, [pc, #172]	; (8006438 <TIM_Base_SetConfig+0x14c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d007      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2a      	ldr	r2, [pc, #168]	; (800643c <TIM_Base_SetConfig+0x150>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <TIM_Base_SetConfig+0x154>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d108      	bne.n	80063b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a10      	ldr	r2, [pc, #64]	; (8006418 <TIM_Base_SetConfig+0x12c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a12      	ldr	r2, [pc, #72]	; (8006428 <TIM_Base_SetConfig+0x13c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d103      	bne.n	80063ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f023 0201 	bic.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	611a      	str	r2, [r3, #16]
  }
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40010400 	.word	0x40010400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800
 8006438:	40001800 	.word	0x40001800
 800643c:	40001c00 	.word	0x40001c00
 8006440:	40002000 	.word	0x40002000

08006444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f023 0201 	bic.w	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 0302 	bic.w	r3, r3, #2
 800648c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a20      	ldr	r2, [pc, #128]	; (800651c <TIM_OC1_SetConfig+0xd8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC1_SetConfig+0x64>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <TIM_OC1_SetConfig+0xdc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10c      	bne.n	80064c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0308 	bic.w	r3, r3, #8
 80064ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a15      	ldr	r2, [pc, #84]	; (800651c <TIM_OC1_SetConfig+0xd8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC1_SetConfig+0x8e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a14      	ldr	r2, [pc, #80]	; (8006520 <TIM_OC1_SetConfig+0xdc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d111      	bne.n	80064f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	621a      	str	r2, [r3, #32]
}
 8006510:	bf00      	nop
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40010000 	.word	0x40010000
 8006520:	40010400 	.word	0x40010400

08006524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f023 0210 	bic.w	r2, r3, #16
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0320 	bic.w	r3, r3, #32
 800656e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a22      	ldr	r2, [pc, #136]	; (8006608 <TIM_OC2_SetConfig+0xe4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC2_SetConfig+0x68>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <TIM_OC2_SetConfig+0xe8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10d      	bne.n	80065a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <TIM_OC2_SetConfig+0xe4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC2_SetConfig+0x94>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a16      	ldr	r2, [pc, #88]	; (800660c <TIM_OC2_SetConfig+0xe8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d113      	bne.n	80065e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40010400 	.word	0x40010400

08006610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a21      	ldr	r2, [pc, #132]	; (80066f0 <TIM_OC3_SetConfig+0xe0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC3_SetConfig+0x66>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a20      	ldr	r2, [pc, #128]	; (80066f4 <TIM_OC3_SetConfig+0xe4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10d      	bne.n	8006692 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800667c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <TIM_OC3_SetConfig+0xe0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC3_SetConfig+0x92>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <TIM_OC3_SetConfig+0xe4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d113      	bne.n	80066ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	621a      	str	r2, [r3, #32]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40010400 	.word	0x40010400

080066f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a12      	ldr	r2, [pc, #72]	; (800679c <TIM_OC4_SetConfig+0xa4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_OC4_SetConfig+0x68>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <TIM_OC4_SetConfig+0xa8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d109      	bne.n	8006774 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	019b      	lsls	r3, r3, #6
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40010400 	.word	0x40010400

080067a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2201      	movs	r2, #1
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	401a      	ands	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e05a      	b.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a21      	ldr	r2, [pc, #132]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006854:	d01d      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a18      	ldr	r2, [pc, #96]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d10c      	bne.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40001800 	.word	0x40001800

080068e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006900:	2302      	movs	r3, #2
 8006902:	e03d      	b.n	8006980 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e042      	b.n	8006a4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fc fd16 	bl	800340c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2224      	movs	r2, #36	; 0x24
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fdbd 	bl	8007578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d175      	bne.n	8006b60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Transmit+0x2c>
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e06e      	b.n	8006b62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2221      	movs	r2, #33	; 0x21
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a92:	f7fd f82d 	bl	8003af0 <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aac:	d108      	bne.n	8006ac0 <HAL_UART_Transmit+0x6c>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	e003      	b.n	8006ac8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ac8:	e02e      	b.n	8006b28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fb1f 	bl	8007118 <UART_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e03a      	b.n	8006b62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10b      	bne.n	8006b0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	3302      	adds	r3, #2
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e007      	b.n	8006b1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	3301      	adds	r3, #1
 8006b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1cb      	bne.n	8006aca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2140      	movs	r1, #64	; 0x40
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 faeb 	bl	8007118 <UART_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e006      	b.n	8006b62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	4613      	mov	r3, r2
 8006b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d112      	bne.n	8006baa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_UART_Receive_IT+0x26>
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e00b      	b.n	8006bac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fb12 	bl	80071ca <UART_Start_Receive_IT>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	e000      	b.n	8006bac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006baa:	2302      	movs	r3, #2
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b0ba      	sub	sp, #232	; 0xe8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <HAL_UART_IRQHandler+0x66>
 8006c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fbf2 	bl	80073fc <UART_Receive_IT>
      return;
 8006c18:	e25b      	b.n	80070d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80de 	beq.w	8006de0 <HAL_UART_IRQHandler+0x22c>
 8006c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 80d1 	beq.w	8006de0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_UART_IRQHandler+0xae>
 8006c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	f043 0201 	orr.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <HAL_UART_IRQHandler+0xd2>
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	f043 0202 	orr.w	r2, r3, #2
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <HAL_UART_IRQHandler+0xf6>
 8006c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	f043 0204 	orr.w	r2, r3, #4
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d011      	beq.n	8006cda <HAL_UART_IRQHandler+0x126>
 8006cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d105      	bne.n	8006cce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	f043 0208 	orr.w	r2, r3, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 81f2 	beq.w	80070c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_UART_IRQHandler+0x14e>
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fb7d 	bl	80073fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	bf0c      	ite	eq
 8006d10:	2301      	moveq	r3, #1
 8006d12:	2300      	movne	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <HAL_UART_IRQHandler+0x17a>
 8006d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d04f      	beq.n	8006dce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa85 	bl	800723e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d141      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3314      	adds	r3, #20
 8006d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1d9      	bne.n	8006d42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d013      	beq.n	8006dbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	4a7e      	ldr	r2, [pc, #504]	; (8006f94 <HAL_UART_IRQHandler+0x3e0>)
 8006d9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fd f826 	bl	8003df4 <HAL_DMA_Abort_IT>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d016      	beq.n	8006ddc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	e00e      	b.n	8006ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f994 	bl	80070ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	e00a      	b.n	8006ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f990 	bl	80070ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	e006      	b.n	8006ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f98c 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006dda:	e175      	b.n	80070c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	bf00      	nop
    return;
 8006dde:	e173      	b.n	80070c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	f040 814f 	bne.w	8007088 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dee:	f003 0310 	and.w	r3, r3, #16
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8148 	beq.w	8007088 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8141 	beq.w	8007088 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	f040 80b6 	bne.w	8006f98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8145 	beq.w	80070cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	f080 813e 	bcs.w	80070cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e62:	f000 8088 	beq.w	8006f76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1d9      	bne.n	8006e66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3314      	adds	r3, #20
 8006ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e1      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3314      	adds	r3, #20
 8006ef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e3      	bne.n	8006eee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f46:	f023 0310 	bic.w	r3, r3, #16
 8006f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e3      	bne.n	8006f34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fc fecf 	bl	8003d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8b7 	bl	8007100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f92:	e09b      	b.n	80070cc <HAL_UART_IRQHandler+0x518>
 8006f94:	08007305 	.word	0x08007305
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 808e 	beq.w	80070d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 8089 	beq.w	80070d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fe2:	647a      	str	r2, [r7, #68]	; 0x44
 8006fe4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e3      	bne.n	8006fbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	623b      	str	r3, [r7, #32]
   return(result);
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3314      	adds	r3, #20
 8007016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800701a:	633a      	str	r2, [r7, #48]	; 0x30
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e3      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	330c      	adds	r3, #12
 8007042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	60fb      	str	r3, [r7, #12]
   return(result);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0310 	bic.w	r3, r3, #16
 8007052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007060:	61fa      	str	r2, [r7, #28]
 8007062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	617b      	str	r3, [r7, #20]
   return(result);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e3      	bne.n	800703c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800707a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f83d 	bl	8007100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007086:	e023      	b.n	80070d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <HAL_UART_IRQHandler+0x4f4>
 8007094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f943 	bl	800732c <UART_Transmit_IT>
    return;
 80070a6:	e014      	b.n	80070d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <HAL_UART_IRQHandler+0x51e>
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f983 	bl	80073cc <UART_EndTransmit_IT>
    return;
 80070c6:	e004      	b.n	80070d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80070c8:	bf00      	nop
 80070ca:	e002      	b.n	80070d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80070d0:	bf00      	nop
  }
}
 80070d2:	37e8      	adds	r7, #232	; 0xe8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007128:	e03b      	b.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d037      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007132:	f7fc fcdd 	bl	8003af0 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	429a      	cmp	r2, r3
 8007140:	d302      	bcc.n	8007148 <UART_WaitOnFlagUntilTimeout+0x30>
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e03a      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d023      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b80      	cmp	r3, #128	; 0x80
 800715e:	d020      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d01d      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d116      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f857 	bl	800723e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2208      	movs	r2, #8
 8007194:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e00f      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4013      	ands	r3, r2
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0b4      	beq.n	800712a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	4613      	mov	r3, r2
 80071d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2222      	movs	r2, #34	; 0x22
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800720e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0220 	orr.w	r2, r2, #32
 800722e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800723e:	b480      	push	{r7}
 8007240:	b095      	sub	sp, #84	; 0x54
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800725c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	330c      	adds	r3, #12
 8007264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007266:	643a      	str	r2, [r7, #64]	; 0x40
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800726c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e5      	bne.n	8007246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	61fb      	str	r3, [r7, #28]
   return(result);
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	64bb      	str	r3, [r7, #72]	; 0x48
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3314      	adds	r3, #20
 8007298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800729a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e5      	bne.n	800727a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d119      	bne.n	80072ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f023 0310 	bic.w	r3, r3, #16
 80072cc:	647b      	str	r3, [r7, #68]	; 0x44
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d6:	61ba      	str	r2, [r7, #24]
 80072d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6979      	ldr	r1, [r7, #20]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	613b      	str	r3, [r7, #16]
   return(result);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072f8:	bf00      	nop
 80072fa:	3754      	adds	r7, #84	; 0x54
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fee4 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b21      	cmp	r3, #33	; 0x21
 800733e:	d13e      	bne.n	80073be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007348:	d114      	bne.n	8007374 <UART_Transmit_IT+0x48>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d110      	bne.n	8007374 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007366:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	1c9a      	adds	r2, r3, #2
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]
 8007372:	e008      	b.n	8007386 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6211      	str	r1, [r2, #32]
 800737e:	781a      	ldrb	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29b      	uxth	r3, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4619      	mov	r1, r3
 8007394:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073be:	2302      	movs	r3, #2
  }
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fe73 	bl	80070d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08c      	sub	sp, #48	; 0x30
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b22      	cmp	r3, #34	; 0x22
 800740e:	f040 80ae 	bne.w	800756e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741a:	d117      	bne.n	800744c <UART_Receive_IT+0x50>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d113      	bne.n	800744c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007424:	2300      	movs	r3, #0
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	b29a      	uxth	r2, r3
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	1c9a      	adds	r2, r3, #2
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	629a      	str	r2, [r3, #40]	; 0x28
 800744a:	e026      	b.n	800749a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	d007      	beq.n	8007470 <UART_Receive_IT+0x74>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <UART_Receive_IT+0x82>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e008      	b.n	8007490 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748a:	b2da      	uxtb	r2, r3
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d15d      	bne.n	800756a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0220 	bic.w	r2, r2, #32
 80074bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d135      	bne.n	8007560 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	613b      	str	r3, [r7, #16]
   return(result);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f023 0310 	bic.w	r3, r3, #16
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751a:	623a      	str	r2, [r7, #32]
 800751c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	69f9      	ldr	r1, [r7, #28]
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	61bb      	str	r3, [r7, #24]
   return(result);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e5      	bne.n	80074fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b10      	cmp	r3, #16
 800753a:	d10a      	bne.n	8007552 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fdd1 	bl	8007100 <HAL_UARTEx_RxEventCallback>
 800755e:	e002      	b.n	8007566 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7f9 ffad 	bl	80014c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	e002      	b.n	8007570 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800756e:	2302      	movs	r3, #2
  }
}
 8007570:	4618      	mov	r0, r3
 8007572:	3730      	adds	r7, #48	; 0x30
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800757c:	b0c0      	sub	sp, #256	; 0x100
 800757e:	af00      	add	r7, sp, #0
 8007580:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007594:	68d9      	ldr	r1, [r3, #12]
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	ea40 0301 	orr.w	r3, r0, r1
 80075a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075d0:	f021 010c 	bic.w	r1, r1, #12
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075de:	430b      	orrs	r3, r1
 80075e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f2:	6999      	ldr	r1, [r3, #24]
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	ea40 0301 	orr.w	r3, r0, r1
 80075fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b8f      	ldr	r3, [pc, #572]	; (8007844 <UART_SetConfig+0x2cc>)
 8007608:	429a      	cmp	r2, r3
 800760a:	d005      	beq.n	8007618 <UART_SetConfig+0xa0>
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <UART_SetConfig+0x2d0>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d104      	bne.n	8007622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007618:	f7fd fb60 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 800761c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007620:	e003      	b.n	800762a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007622:	f7fd fb47 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8007626:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007634:	f040 810c 	bne.w	8007850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763c:	2200      	movs	r2, #0
 800763e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007642:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	1891      	adds	r1, r2, r2
 8007650:	65b9      	str	r1, [r7, #88]	; 0x58
 8007652:	415b      	adcs	r3, r3
 8007654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800765a:	4621      	mov	r1, r4
 800765c:	eb12 0801 	adds.w	r8, r2, r1
 8007660:	4629      	mov	r1, r5
 8007662:	eb43 0901 	adc.w	r9, r3, r1
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800767a:	4690      	mov	r8, r2
 800767c:	4699      	mov	r9, r3
 800767e:	4623      	mov	r3, r4
 8007680:	eb18 0303 	adds.w	r3, r8, r3
 8007684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007688:	462b      	mov	r3, r5
 800768a:	eb49 0303 	adc.w	r3, r9, r3
 800768e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800769e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076a6:	460b      	mov	r3, r1
 80076a8:	18db      	adds	r3, r3, r3
 80076aa:	653b      	str	r3, [r7, #80]	; 0x50
 80076ac:	4613      	mov	r3, r2
 80076ae:	eb42 0303 	adc.w	r3, r2, r3
 80076b2:	657b      	str	r3, [r7, #84]	; 0x54
 80076b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076bc:	f7f9 fb04 	bl	8000cc8 <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4b61      	ldr	r3, [pc, #388]	; (800784c <UART_SetConfig+0x2d4>)
 80076c6:	fba3 2302 	umull	r2, r3, r3, r2
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	011c      	lsls	r4, r3, #4
 80076ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	1891      	adds	r1, r2, r2
 80076e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80076e8:	415b      	adcs	r3, r3
 80076ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076f0:	4641      	mov	r1, r8
 80076f2:	eb12 0a01 	adds.w	sl, r2, r1
 80076f6:	4649      	mov	r1, r9
 80076f8:	eb43 0b01 	adc.w	fp, r3, r1
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800770c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007710:	4692      	mov	sl, r2
 8007712:	469b      	mov	fp, r3
 8007714:	4643      	mov	r3, r8
 8007716:	eb1a 0303 	adds.w	r3, sl, r3
 800771a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800771e:	464b      	mov	r3, r9
 8007720:	eb4b 0303 	adc.w	r3, fp, r3
 8007724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007734:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800773c:	460b      	mov	r3, r1
 800773e:	18db      	adds	r3, r3, r3
 8007740:	643b      	str	r3, [r7, #64]	; 0x40
 8007742:	4613      	mov	r3, r2
 8007744:	eb42 0303 	adc.w	r3, r2, r3
 8007748:	647b      	str	r3, [r7, #68]	; 0x44
 800774a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800774e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007752:	f7f9 fab9 	bl	8000cc8 <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4611      	mov	r1, r2
 800775c:	4b3b      	ldr	r3, [pc, #236]	; (800784c <UART_SetConfig+0x2d4>)
 800775e:	fba3 2301 	umull	r2, r3, r3, r1
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2264      	movs	r2, #100	; 0x64
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	1acb      	subs	r3, r1, r3
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007772:	4b36      	ldr	r3, [pc, #216]	; (800784c <UART_SetConfig+0x2d4>)
 8007774:	fba3 2302 	umull	r2, r3, r3, r2
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007780:	441c      	add	r4, r3
 8007782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007786:	2200      	movs	r2, #0
 8007788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800778c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007794:	4642      	mov	r2, r8
 8007796:	464b      	mov	r3, r9
 8007798:	1891      	adds	r1, r2, r2
 800779a:	63b9      	str	r1, [r7, #56]	; 0x38
 800779c:	415b      	adcs	r3, r3
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077a4:	4641      	mov	r1, r8
 80077a6:	1851      	adds	r1, r2, r1
 80077a8:	6339      	str	r1, [r7, #48]	; 0x30
 80077aa:	4649      	mov	r1, r9
 80077ac:	414b      	adcs	r3, r1
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077bc:	4659      	mov	r1, fp
 80077be:	00cb      	lsls	r3, r1, #3
 80077c0:	4651      	mov	r1, sl
 80077c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077c6:	4651      	mov	r1, sl
 80077c8:	00ca      	lsls	r2, r1, #3
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	4642      	mov	r2, r8
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077d8:	464b      	mov	r3, r9
 80077da:	460a      	mov	r2, r1
 80077dc:	eb42 0303 	adc.w	r3, r2, r3
 80077e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077f8:	460b      	mov	r3, r1
 80077fa:	18db      	adds	r3, r3, r3
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fe:	4613      	mov	r3, r2
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800780a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800780e:	f7f9 fa5b 	bl	8000cc8 <__aeabi_uldivmod>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <UART_SetConfig+0x2d4>)
 8007818:	fba3 1302 	umull	r1, r3, r3, r2
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	2164      	movs	r1, #100	; 0x64
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	3332      	adds	r3, #50	; 0x32
 800782a:	4a08      	ldr	r2, [pc, #32]	; (800784c <UART_SetConfig+0x2d4>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	f003 0207 	and.w	r2, r3, #7
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4422      	add	r2, r4
 800783e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007840:	e106      	b.n	8007a50 <UART_SetConfig+0x4d8>
 8007842:	bf00      	nop
 8007844:	40011000 	.word	0x40011000
 8007848:	40011400 	.word	0x40011400
 800784c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800785a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800785e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007862:	4642      	mov	r2, r8
 8007864:	464b      	mov	r3, r9
 8007866:	1891      	adds	r1, r2, r2
 8007868:	6239      	str	r1, [r7, #32]
 800786a:	415b      	adcs	r3, r3
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007872:	4641      	mov	r1, r8
 8007874:	1854      	adds	r4, r2, r1
 8007876:	4649      	mov	r1, r9
 8007878:	eb43 0501 	adc.w	r5, r3, r1
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	00eb      	lsls	r3, r5, #3
 8007886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800788a:	00e2      	lsls	r2, r4, #3
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	4643      	mov	r3, r8
 8007892:	18e3      	adds	r3, r4, r3
 8007894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007898:	464b      	mov	r3, r9
 800789a:	eb45 0303 	adc.w	r3, r5, r3
 800789e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078be:	4629      	mov	r1, r5
 80078c0:	008b      	lsls	r3, r1, #2
 80078c2:	4621      	mov	r1, r4
 80078c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c8:	4621      	mov	r1, r4
 80078ca:	008a      	lsls	r2, r1, #2
 80078cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078d0:	f7f9 f9fa 	bl	8000cc8 <__aeabi_uldivmod>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4b60      	ldr	r3, [pc, #384]	; (8007a5c <UART_SetConfig+0x4e4>)
 80078da:	fba3 2302 	umull	r2, r3, r3, r2
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	011c      	lsls	r4, r3, #4
 80078e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	1891      	adds	r1, r2, r2
 80078fa:	61b9      	str	r1, [r7, #24]
 80078fc:	415b      	adcs	r3, r3
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007904:	4641      	mov	r1, r8
 8007906:	1851      	adds	r1, r2, r1
 8007908:	6139      	str	r1, [r7, #16]
 800790a:	4649      	mov	r1, r9
 800790c:	414b      	adcs	r3, r1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800791c:	4659      	mov	r1, fp
 800791e:	00cb      	lsls	r3, r1, #3
 8007920:	4651      	mov	r1, sl
 8007922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007926:	4651      	mov	r1, sl
 8007928:	00ca      	lsls	r2, r1, #3
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	4603      	mov	r3, r0
 8007930:	4642      	mov	r2, r8
 8007932:	189b      	adds	r3, r3, r2
 8007934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007938:	464b      	mov	r3, r9
 800793a:	460a      	mov	r2, r1
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	67bb      	str	r3, [r7, #120]	; 0x78
 800794e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800795c:	4649      	mov	r1, r9
 800795e:	008b      	lsls	r3, r1, #2
 8007960:	4641      	mov	r1, r8
 8007962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007966:	4641      	mov	r1, r8
 8007968:	008a      	lsls	r2, r1, #2
 800796a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800796e:	f7f9 f9ab 	bl	8000cc8 <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4611      	mov	r1, r2
 8007978:	4b38      	ldr	r3, [pc, #224]	; (8007a5c <UART_SetConfig+0x4e4>)
 800797a:	fba3 2301 	umull	r2, r3, r3, r1
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	2264      	movs	r2, #100	; 0x64
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	1acb      	subs	r3, r1, r3
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	3332      	adds	r3, #50	; 0x32
 800798c:	4a33      	ldr	r2, [pc, #204]	; (8007a5c <UART_SetConfig+0x4e4>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007998:	441c      	add	r4, r3
 800799a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800799e:	2200      	movs	r2, #0
 80079a0:	673b      	str	r3, [r7, #112]	; 0x70
 80079a2:	677a      	str	r2, [r7, #116]	; 0x74
 80079a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	1891      	adds	r1, r2, r2
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	415b      	adcs	r3, r3
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079b8:	4641      	mov	r1, r8
 80079ba:	1851      	adds	r1, r2, r1
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	4649      	mov	r1, r9
 80079c0:	414b      	adcs	r3, r1
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079d0:	4659      	mov	r1, fp
 80079d2:	00cb      	lsls	r3, r1, #3
 80079d4:	4651      	mov	r1, sl
 80079d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079da:	4651      	mov	r1, sl
 80079dc:	00ca      	lsls	r2, r1, #3
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	4642      	mov	r2, r8
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ea:	464b      	mov	r3, r9
 80079ec:	460a      	mov	r2, r1
 80079ee:	eb42 0303 	adc.w	r3, r2, r3
 80079f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	663b      	str	r3, [r7, #96]	; 0x60
 80079fe:	667a      	str	r2, [r7, #100]	; 0x64
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	008b      	lsls	r3, r1, #2
 8007a10:	4641      	mov	r1, r8
 8007a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a16:	4641      	mov	r1, r8
 8007a18:	008a      	lsls	r2, r1, #2
 8007a1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a1e:	f7f9 f953 	bl	8000cc8 <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4b0d      	ldr	r3, [pc, #52]	; (8007a5c <UART_SetConfig+0x4e4>)
 8007a28:	fba3 1302 	umull	r1, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	2164      	movs	r1, #100	; 0x64
 8007a30:	fb01 f303 	mul.w	r3, r1, r3
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	3332      	adds	r3, #50	; 0x32
 8007a3a:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <UART_SetConfig+0x4e4>)
 8007a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f003 020f 	and.w	r2, r3, #15
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4422      	add	r2, r4
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a5c:	51eb851f 	.word	0x51eb851f

08007a60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <SysTick_Handler+0x1c>)
 8007a66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a68:	f001 fc26 	bl	80092b8 <xTaskGetSchedulerState>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d001      	beq.n	8007a76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a72:	f002 fc69 	bl	800a348 <xPortSysTickHandler>
  }
}
 8007a76:	bf00      	nop
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	e000e010 	.word	0xe000e010

08007a80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a07      	ldr	r2, [pc, #28]	; (8007aac <vApplicationGetIdleTaskMemory+0x2c>)
 8007a90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	4a06      	ldr	r2, [pc, #24]	; (8007ab0 <vApplicationGetIdleTaskMemory+0x30>)
 8007a96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2280      	movs	r2, #128	; 0x80
 8007a9c:	601a      	str	r2, [r3, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	2000080c 	.word	0x2000080c
 8007ab0:	200008b4 	.word	0x200008b4

08007ab4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a07      	ldr	r2, [pc, #28]	; (8007ae0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ac4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4a06      	ldr	r2, [pc, #24]	; (8007ae4 <vApplicationGetTimerTaskMemory+0x30>)
 8007aca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000ab4 	.word	0x20000ab4
 8007ae4:	20000b5c 	.word	0x20000b5c

08007ae8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f103 0208 	add.w	r2, r3, #8
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f04f 32ff 	mov.w	r2, #4294967295
 8007b00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f103 0208 	add.w	r2, r3, #8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f103 0208 	add.w	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d103      	bne.n	8007baa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e00c      	b.n	8007bc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3308      	adds	r3, #8
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	e002      	b.n	8007bb8 <vListInsert+0x2e>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d2f6      	bcs.n	8007bb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6892      	ldr	r2, [r2, #8]
 8007c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6852      	ldr	r2, [r2, #4]
 8007c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d103      	bne.n	8007c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	1e5a      	subs	r2, r3, #1
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <xQueueGenericReset+0x2a>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	60bb      	str	r3, [r7, #8]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c7a:	f002 fad3 	bl	800a224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	441a      	add	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007caa:	3b01      	subs	r3, #1
 8007cac:	68f9      	ldr	r1, [r7, #12]
 8007cae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	441a      	add	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	22ff      	movs	r2, #255	; 0xff
 8007cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	22ff      	movs	r2, #255	; 0xff
 8007cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d114      	bne.n	8007cfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01a      	beq.n	8007d0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3310      	adds	r3, #16
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 f929 	bl	8008f34 <xTaskRemoveFromEventList>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d012      	beq.n	8007d0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <xQueueGenericReset+0xcc>)
 8007cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	e009      	b.n	8007d0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3310      	adds	r3, #16
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fef2 	bl	8007ae8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3324      	adds	r3, #36	; 0x24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff feed 	bl	8007ae8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d0e:	f002 fab9 	bl	800a284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d12:	2301      	movs	r3, #1
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08e      	sub	sp, #56	; 0x38
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <xQueueGenericCreateStatic+0x52>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <xQueueGenericCreateStatic+0x56>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <xQueueGenericCreateStatic+0x58>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	623b      	str	r3, [r7, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <xQueueGenericCreateStatic+0x7e>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <xQueueGenericCreateStatic+0x82>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <xQueueGenericCreateStatic+0x84>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	61fb      	str	r3, [r7, #28]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007dbe:	2350      	movs	r3, #80	; 0x50
 8007dc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b50      	cmp	r3, #80	; 0x50
 8007dc6:	d00a      	beq.n	8007dde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	61bb      	str	r3, [r7, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007dde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00d      	beq.n	8007e06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007df2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f805 	bl	8007e10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3730      	adds	r7, #48	; 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e3e:	2101      	movs	r1, #1
 8007e40:	69b8      	ldr	r0, [r7, #24]
 8007e42:	f7ff ff05 	bl	8007c50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	; 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e66:	2300      	movs	r3, #0
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xQueueGenericSend+0x32>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <xQueueGenericSend+0x40>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <xQueueGenericSend+0x44>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <xQueueGenericSend+0x46>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d103      	bne.n	8007ec6 <xQueueGenericSend+0x6e>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d101      	bne.n	8007eca <xQueueGenericSend+0x72>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <xQueueGenericSend+0x74>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	623b      	str	r3, [r7, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ee6:	f001 f9e7 	bl	80092b8 <xTaskGetSchedulerState>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xQueueGenericSend+0x9e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <xQueueGenericSend+0xa2>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <xQueueGenericSend+0xa4>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	61fb      	str	r3, [r7, #28]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f16:	f002 f985 	bl	800a224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <xQueueGenericSend+0xd4>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d129      	bne.n	8007f80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f32:	f000 fa0b 	bl	800834c <prvCopyDataToQueue>
 8007f36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d010      	beq.n	8007f62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	3324      	adds	r3, #36	; 0x24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fff5 	bl	8008f34 <xTaskRemoveFromEventList>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d013      	beq.n	8007f78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f50:	4b3f      	ldr	r3, [pc, #252]	; (8008050 <xQueueGenericSend+0x1f8>)
 8007f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	e00a      	b.n	8007f78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f68:	4b39      	ldr	r3, [pc, #228]	; (8008050 <xQueueGenericSend+0x1f8>)
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f78:	f002 f984 	bl	800a284 <vPortExitCritical>
				return pdPASS;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e063      	b.n	8008048 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f86:	f002 f97d 	bl	800a284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e05c      	b.n	8008048 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 f82f 	bl	8008ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fa2:	f002 f96f 	bl	800a284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fa6:	f000 fd9b 	bl	8008ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007faa:	f002 f93b 	bl	800a224 <vPortEnterCritical>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb4:	b25b      	sxtb	r3, r3
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fba:	d103      	bne.n	8007fc4 <xQueueGenericSend+0x16c>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d103      	bne.n	8007fda <xQueueGenericSend+0x182>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fda:	f002 f953 	bl	800a284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fde:	1d3a      	adds	r2, r7, #4
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f81e 	bl	8009028 <xTaskCheckForTimeOut>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d124      	bne.n	800803c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ff4:	f000 faa2 	bl	800853c <prvIsQueueFull>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d018      	beq.n	8008030 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	3310      	adds	r3, #16
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f000 ff44 	bl	8008e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800800c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800800e:	f000 fa2d 	bl	800846c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008012:	f000 fd73 	bl	8008afc <xTaskResumeAll>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f af7c 	bne.w	8007f16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800801e:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <xQueueGenericSend+0x1f8>)
 8008020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	e772      	b.n	8007f16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008032:	f000 fa1b 	bl	800846c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008036:	f000 fd61 	bl	8008afc <xTaskResumeAll>
 800803a:	e76c      	b.n	8007f16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800803c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803e:	f000 fa15 	bl	800846c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008042:	f000 fd5b 	bl	8008afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008046:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008048:	4618      	mov	r0, r3
 800804a:	3738      	adds	r7, #56	; 0x38
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	e000ed04 	.word	0xe000ed04

08008054 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b090      	sub	sp, #64	; 0x40
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d103      	bne.n	8008090 <xQueueGenericSendFromISR+0x3c>
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <xQueueGenericSendFromISR+0x40>
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <xQueueGenericSendFromISR+0x42>
 8008094:	2300      	movs	r3, #0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d103      	bne.n	80080be <xQueueGenericSendFromISR+0x6a>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <xQueueGenericSendFromISR+0x6e>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <xQueueGenericSendFromISR+0x70>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	623b      	str	r3, [r7, #32]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080de:	f002 f983 	bl	800a3e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080e2:	f3ef 8211 	mrs	r2, BASEPRI
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	61fa      	str	r2, [r7, #28]
 80080f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <xQueueGenericSendFromISR+0xbc>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d12f      	bne.n	8008170 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008126:	f000 f911 	bl	800834c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800812a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d112      	bne.n	800815a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d016      	beq.n	800816a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	3324      	adds	r3, #36	; 0x24
 8008140:	4618      	mov	r0, r3
 8008142:	f000 fef7 	bl	8008f34 <xTaskRemoveFromEventList>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00e      	beq.n	800816a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00b      	beq.n	800816a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e007      	b.n	800816a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800815a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800815e:	3301      	adds	r3, #1
 8008160:	b2db      	uxtb	r3, r3
 8008162:	b25a      	sxtb	r2, r3
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800816a:	2301      	movs	r3, #1
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800816e:	e001      	b.n	8008174 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008176:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800817e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008182:	4618      	mov	r0, r3
 8008184:	3740      	adds	r7, #64	; 0x40
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08c      	sub	sp, #48	; 0x30
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008198:	2300      	movs	r3, #0
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <xQueueReceive+0x30>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	623b      	str	r3, [r7, #32]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <xQueueReceive+0x3e>
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <xQueueReceive+0x42>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <xQueueReceive+0x44>
 80081ce:	2300      	movs	r3, #0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <xQueueReceive+0x5e>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	61fb      	str	r3, [r7, #28]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ea:	f001 f865 	bl	80092b8 <xTaskGetSchedulerState>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <xQueueReceive+0x6e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <xQueueReceive+0x72>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueReceive+0x74>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueReceive+0x8e>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61bb      	str	r3, [r7, #24]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800821a:	f002 f803 	bl	800a224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01f      	beq.n	800826a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822e:	f000 f8f7 	bl	8008420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	1e5a      	subs	r2, r3, #1
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00f      	beq.n	8008262 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	3310      	adds	r3, #16
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fe74 	bl	8008f34 <xTaskRemoveFromEventList>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008252:	4b3d      	ldr	r3, [pc, #244]	; (8008348 <xQueueReceive+0x1bc>)
 8008254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008262:	f002 f80f 	bl	800a284 <vPortExitCritical>
				return pdPASS;
 8008266:	2301      	movs	r3, #1
 8008268:	e069      	b.n	800833e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008270:	f002 f808 	bl	800a284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008274:	2300      	movs	r3, #0
 8008276:	e062      	b.n	800833e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800827e:	f107 0310 	add.w	r3, r7, #16
 8008282:	4618      	mov	r0, r3
 8008284:	f000 feba 	bl	8008ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800828c:	f001 fffa 	bl	800a284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008290:	f000 fc26 	bl	8008ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008294:	f001 ffc6 	bl	800a224 <vPortEnterCritical>
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d103      	bne.n	80082ae <xQueueReceive+0x122>
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b4:	b25b      	sxtb	r3, r3
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d103      	bne.n	80082c4 <xQueueReceive+0x138>
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c4:	f001 ffde 	bl	800a284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082c8:	1d3a      	adds	r2, r7, #4
 80082ca:	f107 0310 	add.w	r3, r7, #16
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fea9 	bl	8009028 <xTaskCheckForTimeOut>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d123      	bne.n	8008324 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082de:	f000 f917 	bl	8008510 <prvIsQueueEmpty>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d017      	beq.n	8008318 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	3324      	adds	r3, #36	; 0x24
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4611      	mov	r1, r2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fdcf 	bl	8008e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f8:	f000 f8b8 	bl	800846c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082fc:	f000 fbfe 	bl	8008afc <xTaskResumeAll>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d189      	bne.n	800821a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <xQueueReceive+0x1bc>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	e780      	b.n	800821a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831a:	f000 f8a7 	bl	800846c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800831e:	f000 fbed 	bl	8008afc <xTaskResumeAll>
 8008322:	e77a      	b.n	800821a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008326:	f000 f8a1 	bl	800846c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800832a:	f000 fbe7 	bl	8008afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800832e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008330:	f000 f8ee 	bl	8008510 <prvIsQueueEmpty>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	f43f af6f 	beq.w	800821a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800833c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800833e:	4618      	mov	r0, r3
 8008340:	3730      	adds	r7, #48	; 0x30
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10d      	bne.n	8008386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d14d      	bne.n	800840e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 ffbc 	bl	80092f4 <xTaskPriorityDisinherit>
 800837c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	609a      	str	r2, [r3, #8]
 8008384:	e043      	b.n	800840e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d119      	bne.n	80083c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6858      	ldr	r0, [r3, #4]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	461a      	mov	r2, r3
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	f003 f955 	bl	800b646 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d32b      	bcc.n	800840e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	605a      	str	r2, [r3, #4]
 80083be:	e026      	b.n	800840e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	68d8      	ldr	r0, [r3, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	461a      	mov	r2, r3
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	f003 f93b 	bl	800b646 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	425b      	negs	r3, r3
 80083da:	441a      	add	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d207      	bcs.n	80083fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	425b      	negs	r3, r3
 80083f6:	441a      	add	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d105      	bne.n	800840e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	3b01      	subs	r3, #1
 800840c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008416:	697b      	ldr	r3, [r7, #20]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d018      	beq.n	8008464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	441a      	add	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	d303      	bcc.n	8008454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68d9      	ldr	r1, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	461a      	mov	r2, r3
 800845e:	6838      	ldr	r0, [r7, #0]
 8008460:	f003 f8f1 	bl	800b646 <memcpy>
	}
}
 8008464:	bf00      	nop
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008474:	f001 fed6 	bl	800a224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800847e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008480:	e011      	b.n	80084a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d012      	beq.n	80084b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3324      	adds	r3, #36	; 0x24
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fd50 	bl	8008f34 <xTaskRemoveFromEventList>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800849a:	f000 fe27 	bl	80090ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dce9      	bgt.n	8008482 <prvUnlockQueue+0x16>
 80084ae:	e000      	b.n	80084b2 <prvUnlockQueue+0x46>
					break;
 80084b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80084ba:	f001 fee3 	bl	800a284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084be:	f001 feb1 	bl	800a224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ca:	e011      	b.n	80084f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d012      	beq.n	80084fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3310      	adds	r3, #16
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fd2b 	bl	8008f34 <xTaskRemoveFromEventList>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084e4:	f000 fe02 	bl	80090ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dce9      	bgt.n	80084cc <prvUnlockQueue+0x60>
 80084f8:	e000      	b.n	80084fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	22ff      	movs	r2, #255	; 0xff
 8008500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008504:	f001 febe 	bl	800a284 <vPortExitCritical>
}
 8008508:	bf00      	nop
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008518:	f001 fe84 	bl	800a224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	e001      	b.n	800852e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800852e:	f001 fea9 	bl	800a284 <vPortExitCritical>

	return xReturn;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008544:	f001 fe6e 	bl	800a224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008550:	429a      	cmp	r2, r3
 8008552:	d102      	bne.n	800855a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008554:	2301      	movs	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	e001      	b.n	800855e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800855e:	f001 fe91 	bl	800a284 <vPortExitCritical>

	return xReturn;
 8008562:	68fb      	ldr	r3, [r7, #12]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	e014      	b.n	80085a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800857c:	4a0f      	ldr	r2, [pc, #60]	; (80085bc <vQueueAddToRegistry+0x50>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008588:	490c      	ldr	r1, [pc, #48]	; (80085bc <vQueueAddToRegistry+0x50>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008592:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <vQueueAddToRegistry+0x50>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800859e:	e006      	b.n	80085ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	d9e7      	bls.n	800857c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20000f5c 	.word	0x20000f5c

080085c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085d0:	f001 fe28 	bl	800a224 <vPortEnterCritical>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085da:	b25b      	sxtb	r3, r3
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d103      	bne.n	80085ea <vQueueWaitForMessageRestricted+0x2a>
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d103      	bne.n	8008600 <vQueueWaitForMessageRestricted+0x40>
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008600:	f001 fe40 	bl	800a284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	2b00      	cmp	r3, #0
 800860a:	d106      	bne.n	800861a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	3324      	adds	r3, #36	; 0x24
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 fc61 	bl	8008edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800861a:	6978      	ldr	r0, [r7, #20]
 800861c:	f7ff ff26 	bl	800846c <prvUnlockQueue>
	}
 8008620:	bf00      	nop
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af04      	add	r7, sp, #16
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xTaskCreateStatic+0x2a>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	623b      	str	r3, [r7, #32]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xTaskCreateStatic+0x46>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	61fb      	str	r3, [r7, #28]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800866e:	23a8      	movs	r3, #168	; 0xa8
 8008670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2ba8      	cmp	r3, #168	; 0xa8
 8008676:	d00a      	beq.n	800868e <xTaskCreateStatic+0x66>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	61bb      	str	r3, [r7, #24]
}
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800868e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	d01e      	beq.n	80086d4 <xTaskCreateStatic+0xac>
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01b      	beq.n	80086d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	2202      	movs	r2, #2
 80086aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ae:	2300      	movs	r3, #0
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	f107 0314 	add.w	r3, r7, #20
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	68b9      	ldr	r1, [r7, #8]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f850 	bl	800876c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086ce:	f000 f8f3 	bl	80088b8 <prvAddNewTaskToReadyList>
 80086d2:	e001      	b.n	80086d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086d8:	697b      	ldr	r3, [r7, #20]
	}
 80086da:	4618      	mov	r0, r3
 80086dc:	3728      	adds	r7, #40	; 0x28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b08c      	sub	sp, #48	; 0x30
 80086e6:	af04      	add	r7, sp, #16
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 feb6 	bl	800a468 <pvPortMalloc>
 80086fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00e      	beq.n	8008722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008704:	20a8      	movs	r0, #168	; 0xa8
 8008706:	f001 feaf 	bl	800a468 <pvPortMalloc>
 800870a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	631a      	str	r2, [r3, #48]	; 0x30
 8008718:	e005      	b.n	8008726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800871a:	6978      	ldr	r0, [r7, #20]
 800871c:	f001 ff70 	bl	800a600 <vPortFree>
 8008720:	e001      	b.n	8008726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	2300      	movs	r3, #0
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	9302      	str	r3, [sp, #8]
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f80e 	bl	800876c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008750:	69f8      	ldr	r0, [r7, #28]
 8008752:	f000 f8b1 	bl	80088b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008756:	2301      	movs	r3, #1
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e002      	b.n	8008762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008762:	69bb      	ldr	r3, [r7, #24]
	}
 8008764:	4618      	mov	r0, r3
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	461a      	mov	r2, r3
 8008784:	21a5      	movs	r1, #165	; 0xa5
 8008786:	f002 fe88 	bl	800b49a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008794:	3b01      	subs	r3, #1
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f023 0307 	bic.w	r3, r3, #7
 80087a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	617b      	str	r3, [r7, #20]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01f      	beq.n	800880a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
 80087ce:	e012      	b.n	80087f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	7819      	ldrb	r1, [r3, #0]
 80087d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	3334      	adds	r3, #52	; 0x34
 80087e0:	460a      	mov	r2, r1
 80087e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	3301      	adds	r3, #1
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d9e9      	bls.n	80087d0 <prvInitialiseNewTask+0x64>
 80087fc:	e000      	b.n	8008800 <prvInitialiseNewTask+0x94>
			{
				break;
 80087fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008808:	e003      	b.n	8008812 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	2b37      	cmp	r3, #55	; 0x37
 8008816:	d901      	bls.n	800881c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008818:	2337      	movs	r3, #55	; 0x37
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	2200      	movs	r2, #0
 800882c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	3304      	adds	r3, #4
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff f978 	bl	8007b28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	3318      	adds	r3, #24
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff f973 	bl	8007b28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	2200      	movs	r2, #0
 8008864:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	3354      	adds	r3, #84	; 0x54
 800886c:	224c      	movs	r2, #76	; 0x4c
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fe12 	bl	800b49a <memset>
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	4a0c      	ldr	r2, [pc, #48]	; (80088ac <prvInitialiseNewTask+0x140>)
 800887a:	659a      	str	r2, [r3, #88]	; 0x58
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	4a0c      	ldr	r2, [pc, #48]	; (80088b0 <prvInitialiseNewTask+0x144>)
 8008880:	65da      	str	r2, [r3, #92]	; 0x5c
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	4a0b      	ldr	r2, [pc, #44]	; (80088b4 <prvInitialiseNewTask+0x148>)
 8008886:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	69b8      	ldr	r0, [r7, #24]
 800888e:	f001 fb9f 	bl	8009fd0 <pxPortInitialiseStack>
 8008892:	4602      	mov	r2, r0
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088a4:	bf00      	nop
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	200051f0 	.word	0x200051f0
 80088b0:	20005258 	.word	0x20005258
 80088b4:	200052c0 	.word	0x200052c0

080088b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088c0:	f001 fcb0 	bl	800a224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <prvAddNewTaskToReadyList+0xc4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3301      	adds	r3, #1
 80088ca:	4a2c      	ldr	r2, [pc, #176]	; (800897c <prvAddNewTaskToReadyList+0xc4>)
 80088cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088ce:	4b2c      	ldr	r3, [pc, #176]	; (8008980 <prvAddNewTaskToReadyList+0xc8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088d6:	4a2a      	ldr	r2, [pc, #168]	; (8008980 <prvAddNewTaskToReadyList+0xc8>)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088dc:	4b27      	ldr	r3, [pc, #156]	; (800897c <prvAddNewTaskToReadyList+0xc4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d110      	bne.n	8008906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088e4:	f000 fc26 	bl	8009134 <prvInitialiseTaskLists>
 80088e8:	e00d      	b.n	8008906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088ea:	4b26      	ldr	r3, [pc, #152]	; (8008984 <prvAddNewTaskToReadyList+0xcc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088f2:	4b23      	ldr	r3, [pc, #140]	; (8008980 <prvAddNewTaskToReadyList+0xc8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d802      	bhi.n	8008906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008900:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <prvAddNewTaskToReadyList+0xc8>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008906:	4b20      	ldr	r3, [pc, #128]	; (8008988 <prvAddNewTaskToReadyList+0xd0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <prvAddNewTaskToReadyList+0xd0>)
 800890e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008910:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <prvAddNewTaskToReadyList+0xd0>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4b1b      	ldr	r3, [pc, #108]	; (800898c <prvAddNewTaskToReadyList+0xd4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d903      	bls.n	800892c <prvAddNewTaskToReadyList+0x74>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	4a18      	ldr	r2, [pc, #96]	; (800898c <prvAddNewTaskToReadyList+0xd4>)
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4a15      	ldr	r2, [pc, #84]	; (8008990 <prvAddNewTaskToReadyList+0xd8>)
 800893a:	441a      	add	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7ff f8fd 	bl	8007b42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008948:	f001 fc9c 	bl	800a284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800894c:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <prvAddNewTaskToReadyList+0xcc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00e      	beq.n	8008972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <prvAddNewTaskToReadyList+0xc8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	429a      	cmp	r2, r3
 8008960:	d207      	bcs.n	8008972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <prvAddNewTaskToReadyList+0xdc>)
 8008964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20001470 	.word	0x20001470
 8008980:	20000f9c 	.word	0x20000f9c
 8008984:	2000147c 	.word	0x2000147c
 8008988:	2000148c 	.word	0x2000148c
 800898c:	20001478 	.word	0x20001478
 8008990:	20000fa0 	.word	0x20000fa0
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d017      	beq.n	80089da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <vTaskDelay+0x60>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <vTaskDelay+0x30>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	60bb      	str	r3, [r7, #8]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089c8:	f000 f88a 	bl	8008ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 ff00 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089d4:	f000 f892 	bl	8008afc <xTaskResumeAll>
 80089d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d107      	bne.n	80089f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <vTaskDelay+0x64>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001498 	.word	0x20001498
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	; 0x28
 8008a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a0e:	463a      	mov	r2, r7
 8008a10:	1d39      	adds	r1, r7, #4
 8008a12:	f107 0308 	add.w	r3, r7, #8
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff f832 	bl	8007a80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	9202      	str	r2, [sp, #8]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	2300      	movs	r3, #0
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	4924      	ldr	r1, [pc, #144]	; (8008ac0 <vTaskStartScheduler+0xc0>)
 8008a30:	4824      	ldr	r0, [pc, #144]	; (8008ac4 <vTaskStartScheduler+0xc4>)
 8008a32:	f7ff fdf9 	bl	8008628 <xTaskCreateStatic>
 8008a36:	4603      	mov	r3, r0
 8008a38:	4a23      	ldr	r2, [pc, #140]	; (8008ac8 <vTaskStartScheduler+0xc8>)
 8008a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a3c:	4b22      	ldr	r3, [pc, #136]	; (8008ac8 <vTaskStartScheduler+0xc8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e001      	b.n	8008a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d102      	bne.n	8008a5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a54:	f000 ff12 	bl	800987c <xTimerCreateTimerTask>
 8008a58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11b      	bne.n	8008a98 <vTaskStartScheduler+0x98>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a74:	4b15      	ldr	r3, [pc, #84]	; (8008acc <vTaskStartScheduler+0xcc>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3354      	adds	r3, #84	; 0x54
 8008a7a:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <vTaskStartScheduler+0xd0>)
 8008a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a7e:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <vTaskStartScheduler+0xd4>)
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <vTaskStartScheduler+0xd8>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <vTaskStartScheduler+0xdc>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a92:	f001 fb25 	bl	800a0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a96:	e00e      	b.n	8008ab6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9e:	d10a      	bne.n	8008ab6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	60fb      	str	r3, [r7, #12]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <vTaskStartScheduler+0xb4>
}
 8008ab6:	bf00      	nop
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800e73c 	.word	0x0800e73c
 8008ac4:	08009105 	.word	0x08009105
 8008ac8:	20001494 	.word	0x20001494
 8008acc:	20000f9c 	.word	0x20000f9c
 8008ad0:	200001dc 	.word	0x200001dc
 8008ad4:	20001490 	.word	0x20001490
 8008ad8:	2000147c 	.word	0x2000147c
 8008adc:	20001474 	.word	0x20001474

08008ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <vTaskSuspendAll+0x18>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	4a03      	ldr	r2, [pc, #12]	; (8008af8 <vTaskSuspendAll+0x18>)
 8008aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008aee:	bf00      	nop
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	20001498 	.word	0x20001498

08008afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b0a:	4b42      	ldr	r3, [pc, #264]	; (8008c14 <xTaskResumeAll+0x118>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	603b      	str	r3, [r7, #0]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b28:	f001 fb7c 	bl	800a224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b2c:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <xTaskResumeAll+0x118>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	4a38      	ldr	r2, [pc, #224]	; (8008c14 <xTaskResumeAll+0x118>)
 8008b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b36:	4b37      	ldr	r3, [pc, #220]	; (8008c14 <xTaskResumeAll+0x118>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d162      	bne.n	8008c04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b3e:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <xTaskResumeAll+0x11c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d05e      	beq.n	8008c04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b46:	e02f      	b.n	8008ba8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b48:	4b34      	ldr	r3, [pc, #208]	; (8008c1c <xTaskResumeAll+0x120>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3318      	adds	r3, #24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff f851 	bl	8007bfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff f84c 	bl	8007bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b68:	4b2d      	ldr	r3, [pc, #180]	; (8008c20 <xTaskResumeAll+0x124>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d903      	bls.n	8008b78 <xTaskResumeAll+0x7c>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	4a2a      	ldr	r2, [pc, #168]	; (8008c20 <xTaskResumeAll+0x124>)
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4a27      	ldr	r2, [pc, #156]	; (8008c24 <xTaskResumeAll+0x128>)
 8008b86:	441a      	add	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f7fe ffd7 	bl	8007b42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4b23      	ldr	r3, [pc, #140]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ba2:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <xTaskResumeAll+0x130>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ba8:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <xTaskResumeAll+0x120>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1cb      	bne.n	8008b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bb6:	f000 fb5f 	bl	8009278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bba:	4b1d      	ldr	r3, [pc, #116]	; (8008c30 <xTaskResumeAll+0x134>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d010      	beq.n	8008be8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bc6:	f000 f847 	bl	8008c58 <xTaskIncrementTick>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008bd0:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <xTaskResumeAll+0x130>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f1      	bne.n	8008bc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008be2:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <xTaskResumeAll+0x134>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008be8:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <xTaskResumeAll+0x130>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d009      	beq.n	8008c04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <xTaskResumeAll+0x138>)
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c04:	f001 fb3e 	bl	800a284 <vPortExitCritical>

	return xAlreadyYielded;
 8008c08:	68bb      	ldr	r3, [r7, #8]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20001498 	.word	0x20001498
 8008c18:	20001470 	.word	0x20001470
 8008c1c:	20001430 	.word	0x20001430
 8008c20:	20001478 	.word	0x20001478
 8008c24:	20000fa0 	.word	0x20000fa0
 8008c28:	20000f9c 	.word	0x20000f9c
 8008c2c:	20001484 	.word	0x20001484
 8008c30:	20001480 	.word	0x20001480
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <xTaskGetTickCount+0x1c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c44:	687b      	ldr	r3, [r7, #4]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20001474 	.word	0x20001474

08008c58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c62:	4b4f      	ldr	r3, [pc, #316]	; (8008da0 <xTaskIncrementTick+0x148>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 808f 	bne.w	8008d8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c6c:	4b4d      	ldr	r3, [pc, #308]	; (8008da4 <xTaskIncrementTick+0x14c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3301      	adds	r3, #1
 8008c72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c74:	4a4b      	ldr	r2, [pc, #300]	; (8008da4 <xTaskIncrementTick+0x14c>)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d120      	bne.n	8008cc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c80:	4b49      	ldr	r3, [pc, #292]	; (8008da8 <xTaskIncrementTick+0x150>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	603b      	str	r3, [r7, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xTaskIncrementTick+0x46>
 8008ca0:	4b41      	ldr	r3, [pc, #260]	; (8008da8 <xTaskIncrementTick+0x150>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	4b41      	ldr	r3, [pc, #260]	; (8008dac <xTaskIncrementTick+0x154>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a3f      	ldr	r2, [pc, #252]	; (8008da8 <xTaskIncrementTick+0x150>)
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	4a3f      	ldr	r2, [pc, #252]	; (8008dac <xTaskIncrementTick+0x154>)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	4b3e      	ldr	r3, [pc, #248]	; (8008db0 <xTaskIncrementTick+0x158>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	4a3d      	ldr	r2, [pc, #244]	; (8008db0 <xTaskIncrementTick+0x158>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	f000 fadb 	bl	8009278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cc2:	4b3c      	ldr	r3, [pc, #240]	; (8008db4 <xTaskIncrementTick+0x15c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d349      	bcc.n	8008d60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ccc:	4b36      	ldr	r3, [pc, #216]	; (8008da8 <xTaskIncrementTick+0x150>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd6:	4b37      	ldr	r3, [pc, #220]	; (8008db4 <xTaskIncrementTick+0x15c>)
 8008cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cdc:	601a      	str	r2, [r3, #0]
					break;
 8008cde:	e03f      	b.n	8008d60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ce0:	4b31      	ldr	r3, [pc, #196]	; (8008da8 <xTaskIncrementTick+0x150>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d203      	bcs.n	8008d00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cf8:	4a2e      	ldr	r2, [pc, #184]	; (8008db4 <xTaskIncrementTick+0x15c>)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cfe:	e02f      	b.n	8008d60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe ff79 	bl	8007bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	3318      	adds	r3, #24
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe ff70 	bl	8007bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d20:	4b25      	ldr	r3, [pc, #148]	; (8008db8 <xTaskIncrementTick+0x160>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d903      	bls.n	8008d30 <xTaskIncrementTick+0xd8>
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a22      	ldr	r2, [pc, #136]	; (8008db8 <xTaskIncrementTick+0x160>)
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <xTaskIncrementTick+0x164>)
 8008d3e:	441a      	add	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe fefb 	bl	8007b42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <xTaskIncrementTick+0x168>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d3b8      	bcc.n	8008ccc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d5e:	e7b5      	b.n	8008ccc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d60:	4b17      	ldr	r3, [pc, #92]	; (8008dc0 <xTaskIncrementTick+0x168>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4915      	ldr	r1, [pc, #84]	; (8008dbc <xTaskIncrementTick+0x164>)
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d901      	bls.n	8008d7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d7c:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <xTaskIncrementTick+0x16c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d84:	2301      	movs	r3, #1
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	e004      	b.n	8008d94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d8a:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <xTaskIncrementTick+0x170>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	4a0d      	ldr	r2, [pc, #52]	; (8008dc8 <xTaskIncrementTick+0x170>)
 8008d92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d94:	697b      	ldr	r3, [r7, #20]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20001498 	.word	0x20001498
 8008da4:	20001474 	.word	0x20001474
 8008da8:	20001428 	.word	0x20001428
 8008dac:	2000142c 	.word	0x2000142c
 8008db0:	20001488 	.word	0x20001488
 8008db4:	20001490 	.word	0x20001490
 8008db8:	20001478 	.word	0x20001478
 8008dbc:	20000fa0 	.word	0x20000fa0
 8008dc0:	20000f9c 	.word	0x20000f9c
 8008dc4:	20001484 	.word	0x20001484
 8008dc8:	20001480 	.word	0x20001480

08008dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <vTaskSwitchContext+0xb0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dda:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <vTaskSwitchContext+0xb4>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008de0:	e046      	b.n	8008e70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <vTaskSwitchContext+0xb4>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de8:	4b26      	ldr	r3, [pc, #152]	; (8008e84 <vTaskSwitchContext+0xb8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e010      	b.n	8008e12 <vTaskSwitchContext+0x46>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <vTaskSwitchContext+0x40>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	607b      	str	r3, [r7, #4]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <vTaskSwitchContext+0x3e>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	491d      	ldr	r1, [pc, #116]	; (8008e88 <vTaskSwitchContext+0xbc>)
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0e4      	beq.n	8008df0 <vTaskSwitchContext+0x24>
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <vTaskSwitchContext+0xbc>)
 8008e32:	4413      	add	r3, r2
 8008e34:	60bb      	str	r3, [r7, #8]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3308      	adds	r3, #8
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d104      	bne.n	8008e56 <vTaskSwitchContext+0x8a>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	4a0b      	ldr	r2, [pc, #44]	; (8008e8c <vTaskSwitchContext+0xc0>)
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <vTaskSwitchContext+0xb8>)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <vTaskSwitchContext+0xc0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3354      	adds	r3, #84	; 0x54
 8008e6c:	4a08      	ldr	r2, [pc, #32]	; (8008e90 <vTaskSwitchContext+0xc4>)
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	20001498 	.word	0x20001498
 8008e80:	20001484 	.word	0x20001484
 8008e84:	20001478 	.word	0x20001478
 8008e88:	20000fa0 	.word	0x20000fa0
 8008e8c:	20000f9c 	.word	0x20000f9c
 8008e90:	200001dc 	.word	0x200001dc

08008e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60fb      	str	r3, [r7, #12]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <vTaskPlaceOnEventList+0x44>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3318      	adds	r3, #24
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe fe61 	bl	8007b8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ec8:	2101      	movs	r1, #1
 8008eca:	6838      	ldr	r0, [r7, #0]
 8008ecc:	f000 fc82 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000f9c 	.word	0x20000f9c

08008edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	617b      	str	r3, [r7, #20]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7fe fe18 	bl	8007b42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f000 fc57 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
	}
 8008f26:	bf00      	nop
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000f9c 	.word	0x20000f9c

08008f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60fb      	str	r3, [r7, #12]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3318      	adds	r3, #24
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fe49 	bl	8007bfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f6a:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <xTaskRemoveFromEventList+0xb0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d11d      	bne.n	8008fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fe40 	bl	8007bfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <xTaskRemoveFromEventList+0xb4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <xTaskRemoveFromEventList+0x5c>
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	4a16      	ldr	r2, [pc, #88]	; (8008fe8 <xTaskRemoveFromEventList+0xb4>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <xTaskRemoveFromEventList+0xb8>)
 8008f9e:	441a      	add	r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe fdcb 	bl	8007b42 <vListInsertEnd>
 8008fac:	e005      	b.n	8008fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3318      	adds	r3, #24
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	480e      	ldr	r0, [pc, #56]	; (8008ff0 <xTaskRemoveFromEventList+0xbc>)
 8008fb6:	f7fe fdc4 	bl	8007b42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <xTaskRemoveFromEventList+0xc0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d905      	bls.n	8008fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <xTaskRemoveFromEventList+0xc4>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	e001      	b.n	8008fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20001498 	.word	0x20001498
 8008fe8:	20001478 	.word	0x20001478
 8008fec:	20000fa0 	.word	0x20000fa0
 8008ff0:	20001430 	.word	0x20001430
 8008ff4:	20000f9c 	.word	0x20000f9c
 8008ff8:	20001484 	.word	0x20001484

08008ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009004:	4b06      	ldr	r3, [pc, #24]	; (8009020 <vTaskInternalSetTimeOutState+0x24>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <vTaskInternalSetTimeOutState+0x28>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	605a      	str	r2, [r3, #4]
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	20001488 	.word	0x20001488
 8009024:	20001474 	.word	0x20001474

08009028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	613b      	str	r3, [r7, #16]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60fb      	str	r3, [r7, #12]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800906a:	f001 f8db 	bl	800a224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800906e:	4b1d      	ldr	r3, [pc, #116]	; (80090e4 <xTaskCheckForTimeOut+0xbc>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d102      	bne.n	800908e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009088:	2300      	movs	r3, #0
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	e023      	b.n	80090d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <xTaskCheckForTimeOut+0xc0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d007      	beq.n	80090aa <xTaskCheckForTimeOut+0x82>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	e015      	b.n	80090d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d20b      	bcs.n	80090cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff ff9b 	bl	8008ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61fb      	str	r3, [r7, #28]
 80090ca:	e004      	b.n	80090d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090d6:	f001 f8d5 	bl	800a284 <vPortExitCritical>

	return xReturn;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20001474 	.word	0x20001474
 80090e8:	20001488 	.word	0x20001488

080090ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090f0:	4b03      	ldr	r3, [pc, #12]	; (8009100 <vTaskMissedYield+0x14>)
 80090f2:	2201      	movs	r2, #1
 80090f4:	601a      	str	r2, [r3, #0]
}
 80090f6:	bf00      	nop
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	20001484 	.word	0x20001484

08009104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800910c:	f000 f852 	bl	80091b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <prvIdleTask+0x28>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d9f9      	bls.n	800910c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009118:	4b05      	ldr	r3, [pc, #20]	; (8009130 <prvIdleTask+0x2c>)
 800911a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009128:	e7f0      	b.n	800910c <prvIdleTask+0x8>
 800912a:	bf00      	nop
 800912c:	20000fa0 	.word	0x20000fa0
 8009130:	e000ed04 	.word	0xe000ed04

08009134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800913a:	2300      	movs	r3, #0
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	e00c      	b.n	800915a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4a12      	ldr	r2, [pc, #72]	; (8009194 <prvInitialiseTaskLists+0x60>)
 800914c:	4413      	add	r3, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fcca 	bl	8007ae8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3301      	adds	r3, #1
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b37      	cmp	r3, #55	; 0x37
 800915e:	d9ef      	bls.n	8009140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009160:	480d      	ldr	r0, [pc, #52]	; (8009198 <prvInitialiseTaskLists+0x64>)
 8009162:	f7fe fcc1 	bl	8007ae8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009166:	480d      	ldr	r0, [pc, #52]	; (800919c <prvInitialiseTaskLists+0x68>)
 8009168:	f7fe fcbe 	bl	8007ae8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800916c:	480c      	ldr	r0, [pc, #48]	; (80091a0 <prvInitialiseTaskLists+0x6c>)
 800916e:	f7fe fcbb 	bl	8007ae8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009172:	480c      	ldr	r0, [pc, #48]	; (80091a4 <prvInitialiseTaskLists+0x70>)
 8009174:	f7fe fcb8 	bl	8007ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009178:	480b      	ldr	r0, [pc, #44]	; (80091a8 <prvInitialiseTaskLists+0x74>)
 800917a:	f7fe fcb5 	bl	8007ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <prvInitialiseTaskLists+0x78>)
 8009180:	4a05      	ldr	r2, [pc, #20]	; (8009198 <prvInitialiseTaskLists+0x64>)
 8009182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009184:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <prvInitialiseTaskLists+0x7c>)
 8009186:	4a05      	ldr	r2, [pc, #20]	; (800919c <prvInitialiseTaskLists+0x68>)
 8009188:	601a      	str	r2, [r3, #0]
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20000fa0 	.word	0x20000fa0
 8009198:	20001400 	.word	0x20001400
 800919c:	20001414 	.word	0x20001414
 80091a0:	20001430 	.word	0x20001430
 80091a4:	20001444 	.word	0x20001444
 80091a8:	2000145c 	.word	0x2000145c
 80091ac:	20001428 	.word	0x20001428
 80091b0:	2000142c 	.word	0x2000142c

080091b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091ba:	e019      	b.n	80091f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091bc:	f001 f832 	bl	800a224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c0:	4b10      	ldr	r3, [pc, #64]	; (8009204 <prvCheckTasksWaitingTermination+0x50>)
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe fd15 	bl	8007bfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091d2:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <prvCheckTasksWaitingTermination+0x54>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <prvCheckTasksWaitingTermination+0x54>)
 80091da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091dc:	4b0b      	ldr	r3, [pc, #44]	; (800920c <prvCheckTasksWaitingTermination+0x58>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	4a0a      	ldr	r2, [pc, #40]	; (800920c <prvCheckTasksWaitingTermination+0x58>)
 80091e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091e6:	f001 f84d 	bl	800a284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f810 	bl	8009210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091f0:	4b06      	ldr	r3, [pc, #24]	; (800920c <prvCheckTasksWaitingTermination+0x58>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e1      	bne.n	80091bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20001444 	.word	0x20001444
 8009208:	20001470 	.word	0x20001470
 800920c:	20001458 	.word	0x20001458

08009210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3354      	adds	r3, #84	; 0x54
 800921c:	4618      	mov	r0, r3
 800921e:	f002 f959 	bl	800b4d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009228:	2b00      	cmp	r3, #0
 800922a:	d108      	bne.n	800923e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	4618      	mov	r0, r3
 8009232:	f001 f9e5 	bl	800a600 <vPortFree>
				vPortFree( pxTCB );
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 f9e2 	bl	800a600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800923c:	e018      	b.n	8009270 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009244:	2b01      	cmp	r3, #1
 8009246:	d103      	bne.n	8009250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f9d9 	bl	800a600 <vPortFree>
	}
 800924e:	e00f      	b.n	8009270 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009256:	2b02      	cmp	r3, #2
 8009258:	d00a      	beq.n	8009270 <prvDeleteTCB+0x60>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	60fb      	str	r3, [r7, #12]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <prvDeleteTCB+0x5e>
	}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800927e:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <prvResetNextTaskUnblockTime+0x38>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d104      	bne.n	8009292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <prvResetNextTaskUnblockTime+0x3c>)
 800928a:	f04f 32ff 	mov.w	r2, #4294967295
 800928e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009290:	e008      	b.n	80092a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <prvResetNextTaskUnblockTime+0x38>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <prvResetNextTaskUnblockTime+0x3c>)
 80092a2:	6013      	str	r3, [r2, #0]
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20001428 	.word	0x20001428
 80092b4:	20001490 	.word	0x20001490

080092b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092be:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <xTaskGetSchedulerState+0x34>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092c6:	2301      	movs	r3, #1
 80092c8:	607b      	str	r3, [r7, #4]
 80092ca:	e008      	b.n	80092de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092cc:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <xTaskGetSchedulerState+0x38>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092d4:	2302      	movs	r3, #2
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	e001      	b.n	80092de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092de:	687b      	ldr	r3, [r7, #4]
	}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	2000147c 	.word	0x2000147c
 80092f0:	20001498 	.word	0x20001498

080092f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d056      	beq.n	80093b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800930a:	4b2e      	ldr	r3, [pc, #184]	; (80093c4 <xTaskPriorityDisinherit+0xd0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	429a      	cmp	r2, r3
 8009312:	d00a      	beq.n	800932a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	60fb      	str	r3, [r7, #12]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60bb      	str	r3, [r7, #8]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934c:	1e5a      	subs	r2, r3, #1
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800935a:	429a      	cmp	r2, r3
 800935c:	d02c      	beq.n	80093b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009362:	2b00      	cmp	r3, #0
 8009364:	d128      	bne.n	80093b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	3304      	adds	r3, #4
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fc46 	bl	8007bfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <xTaskPriorityDisinherit+0xd4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d903      	bls.n	8009398 <xTaskPriorityDisinherit+0xa4>
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	4a0c      	ldr	r2, [pc, #48]	; (80093c8 <xTaskPriorityDisinherit+0xd4>)
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4a09      	ldr	r2, [pc, #36]	; (80093cc <xTaskPriorityDisinherit+0xd8>)
 80093a6:	441a      	add	r2, r3
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	3304      	adds	r3, #4
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7fe fbc7 	bl	8007b42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093b8:	697b      	ldr	r3, [r7, #20]
	}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000f9c 	.word	0x20000f9c
 80093c8:	20001478 	.word	0x20001478
 80093cc:	20000fa0 	.word	0x20000fa0

080093d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80093de:	f000 ff21 	bl	800a224 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80093e2:	4b29      	ldr	r3, [pc, #164]	; (8009488 <xTaskNotifyWait+0xb8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d01c      	beq.n	800942a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80093f0:	4b25      	ldr	r3, [pc, #148]	; (8009488 <xTaskNotifyWait+0xb8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	43d2      	mvns	r2, r2
 80093fc:	400a      	ands	r2, r1
 80093fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009402:	4b21      	ldr	r3, [pc, #132]	; (8009488 <xTaskNotifyWait+0xb8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00b      	beq.n	800942a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009412:	2101      	movs	r1, #1
 8009414:	6838      	ldr	r0, [r7, #0]
 8009416:	f000 f9dd 	bl	80097d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800941a:	4b1c      	ldr	r3, [pc, #112]	; (800948c <xTaskNotifyWait+0xbc>)
 800941c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800942a:	f000 ff2b 	bl	800a284 <vPortExitCritical>

		taskENTER_CRITICAL();
 800942e:	f000 fef9 	bl	800a224 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009438:	4b13      	ldr	r3, [pc, #76]	; (8009488 <xTaskNotifyWait+0xb8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009444:	4b10      	ldr	r3, [pc, #64]	; (8009488 <xTaskNotifyWait+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d002      	beq.n	8009458 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	e00a      	b.n	800946e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009458:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <xTaskNotifyWait+0xb8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	43d2      	mvns	r2, r2
 8009464:	400a      	ands	r2, r1
 8009466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 800946a:	2301      	movs	r3, #1
 800946c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800946e:	4b06      	ldr	r3, [pc, #24]	; (8009488 <xTaskNotifyWait+0xb8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8009478:	f000 ff04 	bl	800a284 <vPortExitCritical>

		return xReturn;
 800947c:	697b      	ldr	r3, [r7, #20]
	}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000f9c 	.word	0x20000f9c
 800948c:	e000ed04 	.word	0xe000ed04

08009490 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	4613      	mov	r3, r2
 800949e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10a      	bne.n	80094c0 <xTaskGenericNotify+0x30>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	61bb      	str	r3, [r7, #24]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80094c4:	f000 feae 	bl	800a224 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80094de:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d82d      	bhi.n	800954a <xTaskGenericNotify+0xba>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <xTaskGenericNotify+0x64>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	0800956d 	.word	0x0800956d
 80094f8:	08009509 	.word	0x08009509
 80094fc:	0800951b 	.word	0x0800951b
 8009500:	0800952b 	.word	0x0800952b
 8009504:	08009535 	.word	0x08009535
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	431a      	orrs	r2, r3
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8009518:	e02b      	b.n	8009572 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8009528:	e023      	b.n	8009572 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8009532:	e01e      	b.n	8009572 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009534:	7ffb      	ldrb	r3, [r7, #31]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d004      	beq.n	8009544 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009542:	e016      	b.n	8009572 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009544:	2300      	movs	r3, #0
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009548:	e013      	b.n	8009572 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009554:	d00c      	beq.n	8009570 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	617b      	str	r3, [r7, #20]
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <xTaskGenericNotify+0xda>
					break;
 800956c:	bf00      	nop
 800956e:	e000      	b.n	8009572 <xTaskGenericNotify+0xe2>

					break;
 8009570:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009572:	7ffb      	ldrb	r3, [r7, #31]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d13a      	bne.n	80095ee <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	3304      	adds	r3, #4
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fb3d 	bl	8007bfc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009586:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <xTaskGenericNotify+0x16c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d903      	bls.n	8009596 <xTaskGenericNotify+0x106>
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	4a1a      	ldr	r2, [pc, #104]	; (80095fc <xTaskGenericNotify+0x16c>)
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4a17      	ldr	r2, [pc, #92]	; (8009600 <xTaskGenericNotify+0x170>)
 80095a4:	441a      	add	r2, r3
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f7fe fac8 	bl	8007b42 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <xTaskGenericNotify+0x140>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	613b      	str	r3, [r7, #16]
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d4:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <xTaskGenericNotify+0x174>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	429a      	cmp	r2, r3
 80095dc:	d907      	bls.n	80095ee <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80095de:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <xTaskGenericNotify+0x178>)
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80095ee:	f000 fe49 	bl	800a284 <vPortExitCritical>

		return xReturn;
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3728      	adds	r7, #40	; 0x28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20001478 	.word	0x20001478
 8009600:	20000fa0 	.word	0x20000fa0
 8009604:	20000f9c 	.word	0x20000f9c
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	4613      	mov	r3, r2
 800961a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800961c:	2301      	movs	r3, #1
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800963c:	f000 fed4 	bl	800a3e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009644:	f3ef 8211 	mrs	r2, BASEPRI
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	623a      	str	r2, [r7, #32]
 800965a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800965c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800965e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	2202      	movs	r2, #2
 800967e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	2b04      	cmp	r3, #4
 8009686:	d82f      	bhi.n	80096e8 <xTaskGenericNotifyFromISR+0xdc>
 8009688:	a201      	add	r2, pc, #4	; (adr r2, 8009690 <xTaskGenericNotifyFromISR+0x84>)
 800968a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968e:	bf00      	nop
 8009690:	0800970b 	.word	0x0800970b
 8009694:	080096a5 	.word	0x080096a5
 8009698:	080096b7 	.word	0x080096b7
 800969c:	080096c7 	.word	0x080096c7
 80096a0:	080096d1 	.word	0x080096d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80096b4:	e02c      	b.n	8009710 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80096c4:	e024      	b.n	8009710 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80096ce:	e01f      	b.n	8009710 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80096d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d004      	beq.n	80096e2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80096e0:	e016      	b.n	8009710 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80096e6:	e013      	b.n	8009710 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d00c      	beq.n	800970e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	61bb      	str	r3, [r7, #24]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <xTaskGenericNotifyFromISR+0x104>
					break;
 800970e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009710:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009714:	2b01      	cmp	r3, #1
 8009716:	d146      	bne.n	80097a6 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	617b      	str	r3, [r7, #20]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009736:	4b21      	ldr	r3, [pc, #132]	; (80097bc <xTaskGenericNotifyFromISR+0x1b0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11d      	bne.n	800977a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	3304      	adds	r3, #4
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fa5a 	bl	8007bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	4b1c      	ldr	r3, [pc, #112]	; (80097c0 <xTaskGenericNotifyFromISR+0x1b4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d903      	bls.n	800975c <xTaskGenericNotifyFromISR+0x150>
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	4a19      	ldr	r2, [pc, #100]	; (80097c0 <xTaskGenericNotifyFromISR+0x1b4>)
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4a16      	ldr	r2, [pc, #88]	; (80097c4 <xTaskGenericNotifyFromISR+0x1b8>)
 800976a:	441a      	add	r2, r3
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fe f9e5 	bl	8007b42 <vListInsertEnd>
 8009778:	e005      	b.n	8009786 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	3318      	adds	r3, #24
 800977e:	4619      	mov	r1, r3
 8009780:	4811      	ldr	r0, [pc, #68]	; (80097c8 <xTaskGenericNotifyFromISR+0x1bc>)
 8009782:	f7fe f9de 	bl	8007b42 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	4b10      	ldr	r3, [pc, #64]	; (80097cc <xTaskGenericNotifyFromISR+0x1c0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d908      	bls.n	80097a6 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800979a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979c:	2201      	movs	r2, #1
 800979e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <xTaskGenericNotifyFromISR+0x1c4>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f383 8811 	msr	BASEPRI, r3
}
 80097b0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3738      	adds	r7, #56	; 0x38
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20001498 	.word	0x20001498
 80097c0:	20001478 	.word	0x20001478
 80097c4:	20000fa0 	.word	0x20000fa0
 80097c8:	20001430 	.word	0x20001430
 80097cc:	20000f9c 	.word	0x20000f9c
 80097d0:	20001484 	.word	0x20001484

080097d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097de:	4b21      	ldr	r3, [pc, #132]	; (8009864 <prvAddCurrentTaskToDelayedList+0x90>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e4:	4b20      	ldr	r3, [pc, #128]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fa06 	bl	8007bfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d10a      	bne.n	800980e <prvAddCurrentTaskToDelayedList+0x3a>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097fe:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4819      	ldr	r0, [pc, #100]	; (800986c <prvAddCurrentTaskToDelayedList+0x98>)
 8009808:	f7fe f99b 	bl	8007b42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800980c:	e026      	b.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	429a      	cmp	r2, r3
 8009824:	d209      	bcs.n	800983a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009826:	4b12      	ldr	r3, [pc, #72]	; (8009870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fe f9a9 	bl	8007b8a <vListInsert>
}
 8009838:	e010      	b.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983a:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b0a      	ldr	r3, [pc, #40]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fe f99f 	bl	8007b8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d202      	bcs.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009856:	4a08      	ldr	r2, [pc, #32]	; (8009878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6013      	str	r3, [r2, #0]
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20001474 	.word	0x20001474
 8009868:	20000f9c 	.word	0x20000f9c
 800986c:	2000145c 	.word	0x2000145c
 8009870:	2000142c 	.word	0x2000142c
 8009874:	20001428 	.word	0x20001428
 8009878:	20001490 	.word	0x20001490

0800987c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	; 0x28
 8009880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009886:	f000 fb63 	bl	8009f50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800988a:	4b1c      	ldr	r3, [pc, #112]	; (80098fc <xTimerCreateTimerTask+0x80>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d021      	beq.n	80098d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800989a:	1d3a      	adds	r2, r7, #4
 800989c:	f107 0108 	add.w	r1, r7, #8
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe f905 	bl	8007ab4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	9202      	str	r2, [sp, #8]
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	2302      	movs	r3, #2
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2300      	movs	r3, #0
 80098ba:	460a      	mov	r2, r1
 80098bc:	4910      	ldr	r1, [pc, #64]	; (8009900 <xTimerCreateTimerTask+0x84>)
 80098be:	4811      	ldr	r0, [pc, #68]	; (8009904 <xTimerCreateTimerTask+0x88>)
 80098c0:	f7fe feb2 	bl	8008628 <xTaskCreateStatic>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4a10      	ldr	r2, [pc, #64]	; (8009908 <xTimerCreateTimerTask+0x8c>)
 80098c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ca:	4b0f      	ldr	r3, [pc, #60]	; (8009908 <xTimerCreateTimerTask+0x8c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098d2:	2301      	movs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	613b      	str	r3, [r7, #16]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098f2:	697b      	ldr	r3, [r7, #20]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200014cc 	.word	0x200014cc
 8009900:	0800e744 	.word	0x0800e744
 8009904:	08009af9 	.word	0x08009af9
 8009908:	200014d0 	.word	0x200014d0

0800990c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800991a:	202c      	movs	r0, #44	; 0x2c
 800991c:	f000 fda4 	bl	800a468 <pvPortMalloc>
 8009920:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00d      	beq.n	8009944 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	68b9      	ldr	r1, [r7, #8]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 f805 	bl	800994e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009944:	697b      	ldr	r3, [r7, #20]
	}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	607a      	str	r2, [r7, #4]
 800995a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	617b      	str	r3, [r7, #20]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01e      	beq.n	80099bc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800997e:	f000 fae7 	bl	8009f50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	6a3a      	ldr	r2, [r7, #32]
 8009998:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	3304      	adds	r3, #4
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe f8c2 	bl	8007b28 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b0:	f043 0304 	orr.w	r3, r3, #4
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80099bc:	bf00      	nop
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	623b      	str	r3, [r7, #32]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099f2:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <xTimerGenericCommand+0x98>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d02a      	beq.n	8009a50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	dc18      	bgt.n	8009a3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a0c:	f7ff fc54 	bl	80092b8 <xTaskGetSchedulerState>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d109      	bne.n	8009a2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a16:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <xTimerGenericCommand+0x98>)
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f107 0110 	add.w	r1, r7, #16
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a22:	f7fe fa19 	bl	8007e58 <xQueueGenericSend>
 8009a26:	6278      	str	r0, [r7, #36]	; 0x24
 8009a28:	e012      	b.n	8009a50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <xTimerGenericCommand+0x98>)
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f107 0110 	add.w	r1, r7, #16
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	f7fe fa0f 	bl	8007e58 <xQueueGenericSend>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a3c:	e008      	b.n	8009a50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a3e:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <xTimerGenericCommand+0x98>)
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f107 0110 	add.w	r1, r7, #16
 8009a46:	2300      	movs	r3, #0
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	f7fe fb03 	bl	8008054 <xQueueGenericSendFromISR>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3728      	adds	r7, #40	; 0x28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	200014cc 	.word	0x200014cc

08009a60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6a:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <prvProcessExpiredTimer+0x94>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe f8bf 	bl	8007bfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d022      	beq.n	8009ad2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	18d1      	adds	r1, r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	6978      	ldr	r0, [r7, #20]
 8009a9a:	f000 f8d1 	bl	8009c40 <prvInsertTimerInActiveList>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01f      	beq.n	8009ae4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	2100      	movs	r1, #0
 8009aae:	6978      	ldr	r0, [r7, #20]
 8009ab0:	f7ff ff88 	bl	80099c4 <xTimerGenericCommand>
 8009ab4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d113      	bne.n	8009ae4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	60fb      	str	r3, [r7, #12]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad8:	f023 0301 	bic.w	r3, r3, #1
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	6978      	ldr	r0, [r7, #20]
 8009aea:	4798      	blx	r3
}
 8009aec:	bf00      	nop
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	200014c4 	.word	0x200014c4

08009af8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 f857 	bl	8009bb8 <prvGetNextExpireTime>
 8009b0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f803 	bl	8009b1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b16:	f000 f8d5 	bl	8009cc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b1a:	e7f1      	b.n	8009b00 <prvTimerTask+0x8>

08009b1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b26:	f7fe ffdb 	bl	8008ae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f866 	bl	8009c00 <prvSampleTimeNow>
 8009b34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d130      	bne.n	8009b9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <prvProcessTimerOrBlockTask+0x3c>
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d806      	bhi.n	8009b58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b4a:	f7fe ffd7 	bl	8008afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff ff85 	bl	8009a60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b56:	e024      	b.n	8009ba2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d008      	beq.n	8009b70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <prvProcessTimerOrBlockTask+0x90>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <prvProcessTimerOrBlockTask+0x50>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <prvProcessTimerOrBlockTask+0x52>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b70:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <prvProcessTimerOrBlockTask+0x94>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f7fe fd1f 	bl	80085c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b82:	f7fe ffbb 	bl	8008afc <xTaskResumeAll>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <prvProcessTimerOrBlockTask+0x98>)
 8009b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	f3bf 8f6f 	isb	sy
}
 8009b9c:	e001      	b.n	8009ba2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b9e:	f7fe ffad 	bl	8008afc <xTaskResumeAll>
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200014c8 	.word	0x200014c8
 8009bb0:	200014cc 	.word	0x200014cc
 8009bb4:	e000ed04 	.word	0xe000ed04

08009bb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <prvGetNextExpireTime+0x44>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <prvGetNextExpireTime+0x16>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	e000      	b.n	8009bd0 <prvGetNextExpireTime+0x18>
 8009bce:	2200      	movs	r2, #0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d105      	bne.n	8009be8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bdc:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <prvGetNextExpireTime+0x44>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	e001      	b.n	8009bec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bec:	68fb      	ldr	r3, [r7, #12]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	200014c4 	.word	0x200014c4

08009c00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c08:	f7ff f816 	bl	8008c38 <xTaskGetTickCount>
 8009c0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <prvSampleTimeNow+0x3c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d205      	bcs.n	8009c24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c18:	f000 f936 	bl	8009e88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e002      	b.n	8009c2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c2a:	4a04      	ldr	r2, [pc, #16]	; (8009c3c <prvSampleTimeNow+0x3c>)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c30:	68fb      	ldr	r3, [r7, #12]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	200014d4 	.word	0x200014d4

08009c40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d812      	bhi.n	8009c8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	1ad2      	subs	r2, r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d302      	bcc.n	8009c7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c74:	2301      	movs	r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e01b      	b.n	8009cb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c7a:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <prvInsertTimerInActiveList+0x7c>)
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3304      	adds	r3, #4
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f7fd ff80 	bl	8007b8a <vListInsert>
 8009c8a:	e012      	b.n	8009cb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d206      	bcs.n	8009ca2 <prvInsertTimerInActiveList+0x62>
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d302      	bcc.n	8009ca2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e007      	b.n	8009cb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <prvInsertTimerInActiveList+0x80>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4619      	mov	r1, r3
 8009cac:	4610      	mov	r0, r2
 8009cae:	f7fd ff6c 	bl	8007b8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cb2:	697b      	ldr	r3, [r7, #20]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	200014c8 	.word	0x200014c8
 8009cc0:	200014c4 	.word	0x200014c4

08009cc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08e      	sub	sp, #56	; 0x38
 8009cc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cca:	e0ca      	b.n	8009e62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da18      	bge.n	8009d04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cd2:	1d3b      	adds	r3, r7, #4
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	61fb      	str	r3, [r7, #28]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cfa:	6850      	ldr	r0, [r2, #4]
 8009cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cfe:	6892      	ldr	r2, [r2, #8]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f2c0 80ab 	blt.w	8009e62 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fd ff6d 	bl	8007bfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d22:	463b      	mov	r3, r7
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff ff6b 	bl	8009c00 <prvSampleTimeNow>
 8009d2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	f200 8096 	bhi.w	8009e60 <prvProcessReceivedCommands+0x19c>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <prvProcessReceivedCommands+0x78>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d65 	.word	0x08009d65
 8009d40:	08009d65 	.word	0x08009d65
 8009d44:	08009d65 	.word	0x08009d65
 8009d48:	08009dd9 	.word	0x08009dd9
 8009d4c:	08009ded 	.word	0x08009ded
 8009d50:	08009e37 	.word	0x08009e37
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d65 	.word	0x08009d65
 8009d5c:	08009dd9 	.word	0x08009dd9
 8009d60:	08009ded 	.word	0x08009ded
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	18d1      	adds	r1, r2, r3
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d84:	f7ff ff5c 	bl	8009c40 <prvInsertTimerInActiveList>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d069      	beq.n	8009e62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d05e      	beq.n	8009e62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	441a      	add	r2, r3
 8009dac:	2300      	movs	r3, #0
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	2300      	movs	r3, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db6:	f7ff fe05 	bl	80099c4 <xTimerGenericCommand>
 8009dba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d14f      	bne.n	8009e62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	61bb      	str	r3, [r7, #24]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dde:	f023 0301 	bic.w	r3, r3, #1
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009dea:	e03a      	b.n	8009e62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	617b      	str	r3, [r7, #20]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	18d1      	adds	r1, r2, r3
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e30:	f7ff ff06 	bl	8009c40 <prvInsertTimerInActiveList>
					break;
 8009e34:	e015      	b.n	8009e62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d103      	bne.n	8009e4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e46:	f000 fbdb 	bl	800a600 <vPortFree>
 8009e4a:	e00a      	b.n	8009e62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e52:	f023 0301 	bic.w	r3, r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e5e:	e000      	b.n	8009e62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009e60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e62:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <prvProcessReceivedCommands+0x1c0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	1d39      	adds	r1, r7, #4
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe f98e 	bl	800818c <xQueueReceive>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f47f af2a 	bne.w	8009ccc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	3730      	adds	r7, #48	; 0x30
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200014cc 	.word	0x200014cc

08009e88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e8e:	e048      	b.n	8009f22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e90:	4b2d      	ldr	r3, [pc, #180]	; (8009f48 <prvSwitchTimerLists+0xc0>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9a:	4b2b      	ldr	r3, [pc, #172]	; (8009f48 <prvSwitchTimerLists+0xc0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fd fea7 	bl	8007bfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d02e      	beq.n	8009f22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4413      	add	r3, r2
 8009ecc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d90e      	bls.n	8009ef4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <prvSwitchTimerLists+0xc0>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7fd fe4c 	bl	8007b8a <vListInsert>
 8009ef2:	e016      	b.n	8009f22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	2100      	movs	r1, #0
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fd60 	bl	80099c4 <xTimerGenericCommand>
 8009f04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	603b      	str	r3, [r7, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <prvSwitchTimerLists+0xc0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1b1      	bne.n	8009e90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f2c:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <prvSwitchTimerLists+0xc0>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f32:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <prvSwitchTimerLists+0xc4>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <prvSwitchTimerLists+0xc0>)
 8009f38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f3a:	4a04      	ldr	r2, [pc, #16]	; (8009f4c <prvSwitchTimerLists+0xc4>)
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	6013      	str	r3, [r2, #0]
}
 8009f40:	bf00      	nop
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	200014c4 	.word	0x200014c4
 8009f4c:	200014c8 	.word	0x200014c8

08009f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f56:	f000 f965 	bl	800a224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f5a:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d120      	bne.n	8009fa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f62:	4814      	ldr	r0, [pc, #80]	; (8009fb4 <prvCheckForValidListAndQueue+0x64>)
 8009f64:	f7fd fdc0 	bl	8007ae8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f68:	4813      	ldr	r0, [pc, #76]	; (8009fb8 <prvCheckForValidListAndQueue+0x68>)
 8009f6a:	f7fd fdbd 	bl	8007ae8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <prvCheckForValidListAndQueue+0x6c>)
 8009f70:	4a10      	ldr	r2, [pc, #64]	; (8009fb4 <prvCheckForValidListAndQueue+0x64>)
 8009f72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f74:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <prvCheckForValidListAndQueue+0x70>)
 8009f76:	4a10      	ldr	r2, [pc, #64]	; (8009fb8 <prvCheckForValidListAndQueue+0x68>)
 8009f78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <prvCheckForValidListAndQueue+0x74>)
 8009f80:	4a11      	ldr	r2, [pc, #68]	; (8009fc8 <prvCheckForValidListAndQueue+0x78>)
 8009f82:	2110      	movs	r1, #16
 8009f84:	200a      	movs	r0, #10
 8009f86:	f7fd fecb 	bl	8007d20 <xQueueGenericCreateStatic>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	4a08      	ldr	r2, [pc, #32]	; (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f98:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	490b      	ldr	r1, [pc, #44]	; (8009fcc <prvCheckForValidListAndQueue+0x7c>)
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fae4 	bl	800856c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fa4:	f000 f96e 	bl	800a284 <vPortExitCritical>
}
 8009fa8:	bf00      	nop
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	200014cc 	.word	0x200014cc
 8009fb4:	2000149c 	.word	0x2000149c
 8009fb8:	200014b0 	.word	0x200014b0
 8009fbc:	200014c4 	.word	0x200014c4
 8009fc0:	200014c8 	.word	0x200014c8
 8009fc4:	20001578 	.word	0x20001578
 8009fc8:	200014d8 	.word	0x200014d8
 8009fcc:	0800e74c 	.word	0x0800e74c

08009fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3b04      	subs	r3, #4
 8009fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f023 0201 	bic.w	r2, r3, #1
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3b04      	subs	r3, #4
 8009ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a000:	4a0c      	ldr	r2, [pc, #48]	; (800a034 <pxPortInitialiseStack+0x64>)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3b14      	subs	r3, #20
 800a00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3b04      	subs	r3, #4
 800a016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f06f 0202 	mvn.w	r2, #2
 800a01e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3b20      	subs	r3, #32
 800a024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a026:	68fb      	ldr	r3, [r7, #12]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	0800a039 	.word	0x0800a039

0800a038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a042:	4b12      	ldr	r3, [pc, #72]	; (800a08c <prvTaskExitError+0x54>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04a:	d00a      	beq.n	800a062 <prvTaskExitError+0x2a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	60fb      	str	r3, [r7, #12]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <prvTaskExitError+0x28>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	60bb      	str	r3, [r7, #8]
}
 800a074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a076:	bf00      	nop
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0fc      	beq.n	800a078 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20000014 	.word	0x20000014

0800a090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <pxCurrentTCBConst2>)
 800a092:	6819      	ldr	r1, [r3, #0]
 800a094:	6808      	ldr	r0, [r1, #0]
 800a096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09a:	f380 8809 	msr	PSP, r0
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	f380 8811 	msr	BASEPRI, r0
 800a0aa:	4770      	bx	lr
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <pxCurrentTCBConst2>:
 800a0b0:	20000f9c 	.word	0x20000f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop

0800a0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0b8:	4808      	ldr	r0, [pc, #32]	; (800a0dc <prvPortStartFirstTask+0x24>)
 800a0ba:	6800      	ldr	r0, [r0, #0]
 800a0bc:	6800      	ldr	r0, [r0, #0]
 800a0be:	f380 8808 	msr	MSP, r0
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8814 	msr	CONTROL, r0
 800a0ca:	b662      	cpsie	i
 800a0cc:	b661      	cpsie	f
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	df00      	svc	0
 800a0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0da:	bf00      	nop
 800a0dc:	e000ed08 	.word	0xe000ed08

0800a0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0e6:	4b46      	ldr	r3, [pc, #280]	; (800a200 <xPortStartScheduler+0x120>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a46      	ldr	r2, [pc, #280]	; (800a204 <xPortStartScheduler+0x124>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10a      	bne.n	800a106 <xPortStartScheduler+0x26>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	613b      	str	r3, [r7, #16]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a106:	4b3e      	ldr	r3, [pc, #248]	; (800a200 <xPortStartScheduler+0x120>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a3f      	ldr	r2, [pc, #252]	; (800a208 <xPortStartScheduler+0x128>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10a      	bne.n	800a126 <xPortStartScheduler+0x46>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60fb      	str	r3, [r7, #12]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a126:	4b39      	ldr	r3, [pc, #228]	; (800a20c <xPortStartScheduler+0x12c>)
 800a128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	4b31      	ldr	r3, [pc, #196]	; (800a210 <xPortStartScheduler+0x130>)
 800a14c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a14e:	4b31      	ldr	r3, [pc, #196]	; (800a214 <xPortStartScheduler+0x134>)
 800a150:	2207      	movs	r2, #7
 800a152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a154:	e009      	b.n	800a16a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a156:	4b2f      	ldr	r3, [pc, #188]	; (800a214 <xPortStartScheduler+0x134>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4a2d      	ldr	r2, [pc, #180]	; (800a214 <xPortStartScheduler+0x134>)
 800a15e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	b2db      	uxtb	r3, r3
 800a168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b80      	cmp	r3, #128	; 0x80
 800a174:	d0ef      	beq.n	800a156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a176:	4b27      	ldr	r3, [pc, #156]	; (800a214 <xPortStartScheduler+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f1c3 0307 	rsb	r3, r3, #7
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d00a      	beq.n	800a198 <xPortStartScheduler+0xb8>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	60bb      	str	r3, [r7, #8]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a198:	4b1e      	ldr	r3, [pc, #120]	; (800a214 <xPortStartScheduler+0x134>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	4a1d      	ldr	r2, [pc, #116]	; (800a214 <xPortStartScheduler+0x134>)
 800a1a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1a2:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <xPortStartScheduler+0x134>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1aa:	4a1a      	ldr	r2, [pc, #104]	; (800a214 <xPortStartScheduler+0x134>)
 800a1ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1b6:	4b18      	ldr	r3, [pc, #96]	; (800a218 <xPortStartScheduler+0x138>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a17      	ldr	r2, [pc, #92]	; (800a218 <xPortStartScheduler+0x138>)
 800a1bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <xPortStartScheduler+0x138>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a14      	ldr	r2, [pc, #80]	; (800a218 <xPortStartScheduler+0x138>)
 800a1c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ce:	f000 f8dd 	bl	800a38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1d2:	4b12      	ldr	r3, [pc, #72]	; (800a21c <xPortStartScheduler+0x13c>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1d8:	f000 f8fc 	bl	800a3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1dc:	4b10      	ldr	r3, [pc, #64]	; (800a220 <xPortStartScheduler+0x140>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a0f      	ldr	r2, [pc, #60]	; (800a220 <xPortStartScheduler+0x140>)
 800a1e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1e8:	f7ff ff66 	bl	800a0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1ec:	f7fe fdee 	bl	8008dcc <vTaskSwitchContext>
	prvTaskExitError();
 800a1f0:	f7ff ff22 	bl	800a038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	e000ed00 	.word	0xe000ed00
 800a204:	410fc271 	.word	0x410fc271
 800a208:	410fc270 	.word	0x410fc270
 800a20c:	e000e400 	.word	0xe000e400
 800a210:	200015c8 	.word	0x200015c8
 800a214:	200015cc 	.word	0x200015cc
 800a218:	e000ed20 	.word	0xe000ed20
 800a21c:	20000014 	.word	0x20000014
 800a220:	e000ef34 	.word	0xe000ef34

0800a224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	607b      	str	r3, [r7, #4]
}
 800a23c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a23e:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <vPortEnterCritical+0x58>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3301      	adds	r3, #1
 800a244:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <vPortEnterCritical+0x58>)
 800a246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <vPortEnterCritical+0x58>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d10f      	bne.n	800a270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <vPortEnterCritical+0x5c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <vPortEnterCritical+0x4c>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	603b      	str	r3, [r7, #0]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <vPortEnterCritical+0x4a>
	}
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	20000014 	.word	0x20000014
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a28a:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <vPortExitCritical+0x50>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <vPortExitCritical+0x24>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	607b      	str	r3, [r7, #4]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <vPortExitCritical+0x50>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	4a09      	ldr	r2, [pc, #36]	; (800a2d4 <vPortExitCritical+0x50>)
 800a2b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2b2:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <vPortExitCritical+0x50>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d105      	bne.n	800a2c6 <vPortExitCritical+0x42>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	f383 8811 	msr	BASEPRI, r3
}
 800a2c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2c6:	bf00      	nop
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000014 	.word	0x20000014
	...

0800a2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2e0:	f3ef 8009 	mrs	r0, PSP
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	4b15      	ldr	r3, [pc, #84]	; (800a340 <pxCurrentTCBConst>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	f01e 0f10 	tst.w	lr, #16
 800a2f0:	bf08      	it	eq
 800a2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fa:	6010      	str	r0, [r2, #0]
 800a2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a300:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a304:	f380 8811 	msr	BASEPRI, r0
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f7fe fd5c 	bl	8008dcc <vTaskSwitchContext>
 800a314:	f04f 0000 	mov.w	r0, #0
 800a318:	f380 8811 	msr	BASEPRI, r0
 800a31c:	bc09      	pop	{r0, r3}
 800a31e:	6819      	ldr	r1, [r3, #0]
 800a320:	6808      	ldr	r0, [r1, #0]
 800a322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a326:	f01e 0f10 	tst.w	lr, #16
 800a32a:	bf08      	it	eq
 800a32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a330:	f380 8809 	msr	PSP, r0
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w

0800a340 <pxCurrentTCBConst>:
 800a340:	20000f9c 	.word	0x20000f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop

0800a348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a362:	f7fe fc79 	bl	8008c58 <xTaskIncrementTick>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <xPortSysTickHandler+0x40>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	2300      	movs	r3, #0
 800a376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f383 8811 	msr	BASEPRI, r3
}
 800a37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <vPortSetupTimerInterrupt+0x34>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <vPortSetupTimerInterrupt+0x38>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a39c:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <vPortSetupTimerInterrupt+0x3c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0a      	ldr	r2, [pc, #40]	; (800a3cc <vPortSetupTimerInterrupt+0x40>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	099b      	lsrs	r3, r3, #6
 800a3a8:	4a09      	ldr	r2, [pc, #36]	; (800a3d0 <vPortSetupTimerInterrupt+0x44>)
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ae:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <vPortSetupTimerInterrupt+0x34>)
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	601a      	str	r2, [r3, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	e000e010 	.word	0xe000e010
 800a3c4:	e000e018 	.word	0xe000e018
 800a3c8:	20000008 	.word	0x20000008
 800a3cc:	10624dd3 	.word	0x10624dd3
 800a3d0:	e000e014 	.word	0xe000e014

0800a3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3e4 <vPortEnableVFP+0x10>
 800a3d8:	6801      	ldr	r1, [r0, #0]
 800a3da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3de:	6001      	str	r1, [r0, #0]
 800a3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3e2:	bf00      	nop
 800a3e4:	e000ed88 	.word	0xe000ed88

0800a3e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3ee:	f3ef 8305 	mrs	r3, IPSR
 800a3f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b0f      	cmp	r3, #15
 800a3f8:	d914      	bls.n	800a424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3fa:	4a17      	ldr	r2, [pc, #92]	; (800a458 <vPortValidateInterruptPriority+0x70>)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	4413      	add	r3, r2
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a404:	4b15      	ldr	r3, [pc, #84]	; (800a45c <vPortValidateInterruptPriority+0x74>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	7afa      	ldrb	r2, [r7, #11]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d20a      	bcs.n	800a424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	607b      	str	r3, [r7, #4]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a424:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <vPortValidateInterruptPriority+0x78>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a42c:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <vPortValidateInterruptPriority+0x7c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d90a      	bls.n	800a44a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	603b      	str	r3, [r7, #0]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <vPortValidateInterruptPriority+0x60>
	}
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	e000e3f0 	.word	0xe000e3f0
 800a45c:	200015c8 	.word	0x200015c8
 800a460:	e000ed0c 	.word	0xe000ed0c
 800a464:	200015cc 	.word	0x200015cc

0800a468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	; 0x28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a474:	f7fe fb34 	bl	8008ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a478:	4b5b      	ldr	r3, [pc, #364]	; (800a5e8 <pvPortMalloc+0x180>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a480:	f000 f920 	bl	800a6c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a484:	4b59      	ldr	r3, [pc, #356]	; (800a5ec <pvPortMalloc+0x184>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4013      	ands	r3, r2
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 8093 	bne.w	800a5b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01d      	beq.n	800a4d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a498:	2208      	movs	r2, #8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d014      	beq.n	800a4d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f023 0307 	bic.w	r3, r3, #7
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	617b      	str	r3, [r7, #20]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d06e      	beq.n	800a5b8 <pvPortMalloc+0x150>
 800a4da:	4b45      	ldr	r3, [pc, #276]	; (800a5f0 <pvPortMalloc+0x188>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d869      	bhi.n	800a5b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4e4:	4b43      	ldr	r3, [pc, #268]	; (800a5f4 <pvPortMalloc+0x18c>)
 800a4e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4e8:	4b42      	ldr	r3, [pc, #264]	; (800a5f4 <pvPortMalloc+0x18c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ee:	e004      	b.n	800a4fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d903      	bls.n	800a50c <pvPortMalloc+0xa4>
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1f1      	bne.n	800a4f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a50c:	4b36      	ldr	r3, [pc, #216]	; (800a5e8 <pvPortMalloc+0x180>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a512:	429a      	cmp	r2, r3
 800a514:	d050      	beq.n	800a5b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2208      	movs	r2, #8
 800a51c:	4413      	add	r3, r2
 800a51e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	2308      	movs	r3, #8
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	429a      	cmp	r2, r3
 800a536:	d91f      	bls.n	800a578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <pvPortMalloc+0xf8>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	613b      	str	r3, [r7, #16]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	1ad2      	subs	r2, r2, r3
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a572:	69b8      	ldr	r0, [r7, #24]
 800a574:	f000 f908 	bl	800a788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a578:	4b1d      	ldr	r3, [pc, #116]	; (800a5f0 <pvPortMalloc+0x188>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	4a1b      	ldr	r2, [pc, #108]	; (800a5f0 <pvPortMalloc+0x188>)
 800a584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <pvPortMalloc+0x188>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b1b      	ldr	r3, [pc, #108]	; (800a5f8 <pvPortMalloc+0x190>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d203      	bcs.n	800a59a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a592:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <pvPortMalloc+0x188>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a18      	ldr	r2, [pc, #96]	; (800a5f8 <pvPortMalloc+0x190>)
 800a598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <pvPortMalloc+0x184>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ae:	4b13      	ldr	r3, [pc, #76]	; (800a5fc <pvPortMalloc+0x194>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a11      	ldr	r2, [pc, #68]	; (800a5fc <pvPortMalloc+0x194>)
 800a5b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5b8:	f7fe faa0 	bl	8008afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <pvPortMalloc+0x174>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60fb      	str	r3, [r7, #12]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <pvPortMalloc+0x172>
	return pvReturn;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3728      	adds	r7, #40	; 0x28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200051d8 	.word	0x200051d8
 800a5ec:	200051ec 	.word	0x200051ec
 800a5f0:	200051dc 	.word	0x200051dc
 800a5f4:	200051d0 	.word	0x200051d0
 800a5f8:	200051e0 	.word	0x200051e0
 800a5fc:	200051e4 	.word	0x200051e4

0800a600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d04d      	beq.n	800a6ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a612:	2308      	movs	r3, #8
 800a614:	425b      	negs	r3, r3
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4413      	add	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <vPortFree+0xb8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4013      	ands	r3, r2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <vPortFree+0x44>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	60fb      	str	r3, [r7, #12]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00a      	beq.n	800a662 <vPortFree+0x62>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60bb      	str	r3, [r7, #8]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <vPortFree+0xb8>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4013      	ands	r3, r2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d01e      	beq.n	800a6ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d11a      	bne.n	800a6ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <vPortFree+0xb8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	43db      	mvns	r3, r3
 800a682:	401a      	ands	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a688:	f7fe fa2a 	bl	8008ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <vPortFree+0xbc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4413      	add	r3, r2
 800a696:	4a09      	ldr	r2, [pc, #36]	; (800a6bc <vPortFree+0xbc>)
 800a698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f000 f874 	bl	800a788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <vPortFree+0xc0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	4a06      	ldr	r2, [pc, #24]	; (800a6c0 <vPortFree+0xc0>)
 800a6a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6aa:	f7fe fa27 	bl	8008afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ae:	bf00      	nop
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	200051ec 	.word	0x200051ec
 800a6bc:	200051dc 	.word	0x200051dc
 800a6c0:	200051e8 	.word	0x200051e8

0800a6c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6d0:	4b27      	ldr	r3, [pc, #156]	; (800a770 <prvHeapInit+0xac>)
 800a6d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00c      	beq.n	800a6f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3307      	adds	r3, #7
 800a6e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0307 	bic.w	r3, r3, #7
 800a6ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	4a1f      	ldr	r2, [pc, #124]	; (800a770 <prvHeapInit+0xac>)
 800a6f4:	4413      	add	r3, r2
 800a6f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6fc:	4a1d      	ldr	r2, [pc, #116]	; (800a774 <prvHeapInit+0xb0>)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a702:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <prvHeapInit+0xb0>)
 800a704:	2200      	movs	r2, #0
 800a706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4413      	add	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a710:	2208      	movs	r2, #8
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	1a9b      	subs	r3, r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f023 0307 	bic.w	r3, r3, #7
 800a71e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4a15      	ldr	r2, [pc, #84]	; (800a778 <prvHeapInit+0xb4>)
 800a724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a726:	4b14      	ldr	r3, [pc, #80]	; (800a778 <prvHeapInit+0xb4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2200      	movs	r2, #0
 800a72c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a72e:	4b12      	ldr	r3, [pc, #72]	; (800a778 <prvHeapInit+0xb4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a744:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvHeapInit+0xb4>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <prvHeapInit+0xb8>)
 800a752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	4a09      	ldr	r2, [pc, #36]	; (800a780 <prvHeapInit+0xbc>)
 800a75a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a75c:	4b09      	ldr	r3, [pc, #36]	; (800a784 <prvHeapInit+0xc0>)
 800a75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a762:	601a      	str	r2, [r3, #0]
}
 800a764:	bf00      	nop
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	200015d0 	.word	0x200015d0
 800a774:	200051d0 	.word	0x200051d0
 800a778:	200051d8 	.word	0x200051d8
 800a77c:	200051e0 	.word	0x200051e0
 800a780:	200051dc 	.word	0x200051dc
 800a784:	200051ec 	.word	0x200051ec

0800a788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a790:	4b28      	ldr	r3, [pc, #160]	; (800a834 <prvInsertBlockIntoFreeList+0xac>)
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	e002      	b.n	800a79c <prvInsertBlockIntoFreeList+0x14>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d8f7      	bhi.n	800a796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d108      	bne.n	800a7ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d118      	bne.n	800a810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <prvInsertBlockIntoFreeList+0xb0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d00d      	beq.n	800a806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	e008      	b.n	800a818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <prvInsertBlockIntoFreeList+0xb0>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	e003      	b.n	800a818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d002      	beq.n	800a826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	200051d0 	.word	0x200051d0
 800a838:	200051d8 	.word	0x200051d8

0800a83c <atoi>:
 800a83c:	220a      	movs	r2, #10
 800a83e:	2100      	movs	r1, #0
 800a840:	f000 b882 	b.w	800a948 <strtol>

0800a844 <_strtol_l.constprop.0>:
 800a844:	2b01      	cmp	r3, #1
 800a846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a84a:	d001      	beq.n	800a850 <_strtol_l.constprop.0+0xc>
 800a84c:	2b24      	cmp	r3, #36	; 0x24
 800a84e:	d906      	bls.n	800a85e <_strtol_l.constprop.0+0x1a>
 800a850:	f000 fecc 	bl	800b5ec <__errno>
 800a854:	2316      	movs	r3, #22
 800a856:	6003      	str	r3, [r0, #0]
 800a858:	2000      	movs	r0, #0
 800a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a944 <_strtol_l.constprop.0+0x100>
 800a862:	460d      	mov	r5, r1
 800a864:	462e      	mov	r6, r5
 800a866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a86a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a86e:	f017 0708 	ands.w	r7, r7, #8
 800a872:	d1f7      	bne.n	800a864 <_strtol_l.constprop.0+0x20>
 800a874:	2c2d      	cmp	r4, #45	; 0x2d
 800a876:	d132      	bne.n	800a8de <_strtol_l.constprop.0+0x9a>
 800a878:	782c      	ldrb	r4, [r5, #0]
 800a87a:	2701      	movs	r7, #1
 800a87c:	1cb5      	adds	r5, r6, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d05b      	beq.n	800a93a <_strtol_l.constprop.0+0xf6>
 800a882:	2b10      	cmp	r3, #16
 800a884:	d109      	bne.n	800a89a <_strtol_l.constprop.0+0x56>
 800a886:	2c30      	cmp	r4, #48	; 0x30
 800a888:	d107      	bne.n	800a89a <_strtol_l.constprop.0+0x56>
 800a88a:	782c      	ldrb	r4, [r5, #0]
 800a88c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a890:	2c58      	cmp	r4, #88	; 0x58
 800a892:	d14d      	bne.n	800a930 <_strtol_l.constprop.0+0xec>
 800a894:	786c      	ldrb	r4, [r5, #1]
 800a896:	2310      	movs	r3, #16
 800a898:	3502      	adds	r5, #2
 800a89a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a89e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8a2:	f04f 0e00 	mov.w	lr, #0
 800a8a6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a8aa:	4676      	mov	r6, lr
 800a8ac:	fb03 8a19 	mls	sl, r3, r9, r8
 800a8b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a8b4:	f1bc 0f09 	cmp.w	ip, #9
 800a8b8:	d816      	bhi.n	800a8e8 <_strtol_l.constprop.0+0xa4>
 800a8ba:	4664      	mov	r4, ip
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	dd24      	ble.n	800a90a <_strtol_l.constprop.0+0xc6>
 800a8c0:	f1be 3fff 	cmp.w	lr, #4294967295
 800a8c4:	d008      	beq.n	800a8d8 <_strtol_l.constprop.0+0x94>
 800a8c6:	45b1      	cmp	r9, r6
 800a8c8:	d31c      	bcc.n	800a904 <_strtol_l.constprop.0+0xc0>
 800a8ca:	d101      	bne.n	800a8d0 <_strtol_l.constprop.0+0x8c>
 800a8cc:	45a2      	cmp	sl, r4
 800a8ce:	db19      	blt.n	800a904 <_strtol_l.constprop.0+0xc0>
 800a8d0:	fb06 4603 	mla	r6, r6, r3, r4
 800a8d4:	f04f 0e01 	mov.w	lr, #1
 800a8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8dc:	e7e8      	b.n	800a8b0 <_strtol_l.constprop.0+0x6c>
 800a8de:	2c2b      	cmp	r4, #43	; 0x2b
 800a8e0:	bf04      	itt	eq
 800a8e2:	782c      	ldrbeq	r4, [r5, #0]
 800a8e4:	1cb5      	addeq	r5, r6, #2
 800a8e6:	e7ca      	b.n	800a87e <_strtol_l.constprop.0+0x3a>
 800a8e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a8ec:	f1bc 0f19 	cmp.w	ip, #25
 800a8f0:	d801      	bhi.n	800a8f6 <_strtol_l.constprop.0+0xb2>
 800a8f2:	3c37      	subs	r4, #55	; 0x37
 800a8f4:	e7e2      	b.n	800a8bc <_strtol_l.constprop.0+0x78>
 800a8f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a8fa:	f1bc 0f19 	cmp.w	ip, #25
 800a8fe:	d804      	bhi.n	800a90a <_strtol_l.constprop.0+0xc6>
 800a900:	3c57      	subs	r4, #87	; 0x57
 800a902:	e7db      	b.n	800a8bc <_strtol_l.constprop.0+0x78>
 800a904:	f04f 3eff 	mov.w	lr, #4294967295
 800a908:	e7e6      	b.n	800a8d8 <_strtol_l.constprop.0+0x94>
 800a90a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a90e:	d105      	bne.n	800a91c <_strtol_l.constprop.0+0xd8>
 800a910:	2322      	movs	r3, #34	; 0x22
 800a912:	6003      	str	r3, [r0, #0]
 800a914:	4646      	mov	r6, r8
 800a916:	b942      	cbnz	r2, 800a92a <_strtol_l.constprop.0+0xe6>
 800a918:	4630      	mov	r0, r6
 800a91a:	e79e      	b.n	800a85a <_strtol_l.constprop.0+0x16>
 800a91c:	b107      	cbz	r7, 800a920 <_strtol_l.constprop.0+0xdc>
 800a91e:	4276      	negs	r6, r6
 800a920:	2a00      	cmp	r2, #0
 800a922:	d0f9      	beq.n	800a918 <_strtol_l.constprop.0+0xd4>
 800a924:	f1be 0f00 	cmp.w	lr, #0
 800a928:	d000      	beq.n	800a92c <_strtol_l.constprop.0+0xe8>
 800a92a:	1e69      	subs	r1, r5, #1
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	e7f3      	b.n	800a918 <_strtol_l.constprop.0+0xd4>
 800a930:	2430      	movs	r4, #48	; 0x30
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1b1      	bne.n	800a89a <_strtol_l.constprop.0+0x56>
 800a936:	2308      	movs	r3, #8
 800a938:	e7af      	b.n	800a89a <_strtol_l.constprop.0+0x56>
 800a93a:	2c30      	cmp	r4, #48	; 0x30
 800a93c:	d0a5      	beq.n	800a88a <_strtol_l.constprop.0+0x46>
 800a93e:	230a      	movs	r3, #10
 800a940:	e7ab      	b.n	800a89a <_strtol_l.constprop.0+0x56>
 800a942:	bf00      	nop
 800a944:	0800e76d 	.word	0x0800e76d

0800a948 <strtol>:
 800a948:	4613      	mov	r3, r2
 800a94a:	460a      	mov	r2, r1
 800a94c:	4601      	mov	r1, r0
 800a94e:	4802      	ldr	r0, [pc, #8]	; (800a958 <strtol+0x10>)
 800a950:	6800      	ldr	r0, [r0, #0]
 800a952:	f7ff bf77 	b.w	800a844 <_strtol_l.constprop.0>
 800a956:	bf00      	nop
 800a958:	200001dc 	.word	0x200001dc

0800a95c <__cvt>:
 800a95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	ec55 4b10 	vmov	r4, r5, d0
 800a964:	2d00      	cmp	r5, #0
 800a966:	460e      	mov	r6, r1
 800a968:	4619      	mov	r1, r3
 800a96a:	462b      	mov	r3, r5
 800a96c:	bfbb      	ittet	lt
 800a96e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a972:	461d      	movlt	r5, r3
 800a974:	2300      	movge	r3, #0
 800a976:	232d      	movlt	r3, #45	; 0x2d
 800a978:	700b      	strb	r3, [r1, #0]
 800a97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a97c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a980:	4691      	mov	r9, r2
 800a982:	f023 0820 	bic.w	r8, r3, #32
 800a986:	bfbc      	itt	lt
 800a988:	4622      	movlt	r2, r4
 800a98a:	4614      	movlt	r4, r2
 800a98c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a990:	d005      	beq.n	800a99e <__cvt+0x42>
 800a992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a996:	d100      	bne.n	800a99a <__cvt+0x3e>
 800a998:	3601      	adds	r6, #1
 800a99a:	2102      	movs	r1, #2
 800a99c:	e000      	b.n	800a9a0 <__cvt+0x44>
 800a99e:	2103      	movs	r1, #3
 800a9a0:	ab03      	add	r3, sp, #12
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	ab02      	add	r3, sp, #8
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	ec45 4b10 	vmov	d0, r4, r5
 800a9ac:	4653      	mov	r3, sl
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	f000 fee2 	bl	800b778 <_dtoa_r>
 800a9b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	d102      	bne.n	800a9c2 <__cvt+0x66>
 800a9bc:	f019 0f01 	tst.w	r9, #1
 800a9c0:	d022      	beq.n	800aa08 <__cvt+0xac>
 800a9c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9c6:	eb07 0906 	add.w	r9, r7, r6
 800a9ca:	d110      	bne.n	800a9ee <__cvt+0x92>
 800a9cc:	783b      	ldrb	r3, [r7, #0]
 800a9ce:	2b30      	cmp	r3, #48	; 0x30
 800a9d0:	d10a      	bne.n	800a9e8 <__cvt+0x8c>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f6 f895 	bl	8000b08 <__aeabi_dcmpeq>
 800a9de:	b918      	cbnz	r0, 800a9e8 <__cvt+0x8c>
 800a9e0:	f1c6 0601 	rsb	r6, r6, #1
 800a9e4:	f8ca 6000 	str.w	r6, [sl]
 800a9e8:	f8da 3000 	ldr.w	r3, [sl]
 800a9ec:	4499      	add	r9, r3
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f6 f887 	bl	8000b08 <__aeabi_dcmpeq>
 800a9fa:	b108      	cbz	r0, 800aa00 <__cvt+0xa4>
 800a9fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa00:	2230      	movs	r2, #48	; 0x30
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	454b      	cmp	r3, r9
 800aa06:	d307      	bcc.n	800aa18 <__cvt+0xbc>
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa0c:	1bdb      	subs	r3, r3, r7
 800aa0e:	4638      	mov	r0, r7
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	b004      	add	sp, #16
 800aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa18:	1c59      	adds	r1, r3, #1
 800aa1a:	9103      	str	r1, [sp, #12]
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e7f0      	b.n	800aa02 <__cvt+0xa6>

0800aa20 <__exponent>:
 800aa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa22:	4603      	mov	r3, r0
 800aa24:	2900      	cmp	r1, #0
 800aa26:	bfb8      	it	lt
 800aa28:	4249      	neglt	r1, r1
 800aa2a:	f803 2b02 	strb.w	r2, [r3], #2
 800aa2e:	bfb4      	ite	lt
 800aa30:	222d      	movlt	r2, #45	; 0x2d
 800aa32:	222b      	movge	r2, #43	; 0x2b
 800aa34:	2909      	cmp	r1, #9
 800aa36:	7042      	strb	r2, [r0, #1]
 800aa38:	dd2a      	ble.n	800aa90 <__exponent+0x70>
 800aa3a:	f10d 0207 	add.w	r2, sp, #7
 800aa3e:	4617      	mov	r7, r2
 800aa40:	260a      	movs	r6, #10
 800aa42:	4694      	mov	ip, r2
 800aa44:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa48:	fb06 1415 	mls	r4, r6, r5, r1
 800aa4c:	3430      	adds	r4, #48	; 0x30
 800aa4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aa52:	460c      	mov	r4, r1
 800aa54:	2c63      	cmp	r4, #99	; 0x63
 800aa56:	f102 32ff 	add.w	r2, r2, #4294967295
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	dcf1      	bgt.n	800aa42 <__exponent+0x22>
 800aa5e:	3130      	adds	r1, #48	; 0x30
 800aa60:	f1ac 0402 	sub.w	r4, ip, #2
 800aa64:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa68:	1c41      	adds	r1, r0, #1
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	42ba      	cmp	r2, r7
 800aa6e:	d30a      	bcc.n	800aa86 <__exponent+0x66>
 800aa70:	f10d 0209 	add.w	r2, sp, #9
 800aa74:	eba2 020c 	sub.w	r2, r2, ip
 800aa78:	42bc      	cmp	r4, r7
 800aa7a:	bf88      	it	hi
 800aa7c:	2200      	movhi	r2, #0
 800aa7e:	4413      	add	r3, r2
 800aa80:	1a18      	subs	r0, r3, r0
 800aa82:	b003      	add	sp, #12
 800aa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa86:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aa8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aa8e:	e7ed      	b.n	800aa6c <__exponent+0x4c>
 800aa90:	2330      	movs	r3, #48	; 0x30
 800aa92:	3130      	adds	r1, #48	; 0x30
 800aa94:	7083      	strb	r3, [r0, #2]
 800aa96:	70c1      	strb	r1, [r0, #3]
 800aa98:	1d03      	adds	r3, r0, #4
 800aa9a:	e7f1      	b.n	800aa80 <__exponent+0x60>

0800aa9c <_printf_float>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	ed2d 8b02 	vpush	{d8}
 800aaa4:	b08d      	sub	sp, #52	; 0x34
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aaac:	4616      	mov	r6, r2
 800aaae:	461f      	mov	r7, r3
 800aab0:	4605      	mov	r5, r0
 800aab2:	f000 fcfb 	bl	800b4ac <_localeconv_r>
 800aab6:	f8d0 a000 	ldr.w	sl, [r0]
 800aaba:	4650      	mov	r0, sl
 800aabc:	f7f5 fbf8 	bl	80002b0 <strlen>
 800aac0:	2300      	movs	r3, #0
 800aac2:	930a      	str	r3, [sp, #40]	; 0x28
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	9305      	str	r3, [sp, #20]
 800aac8:	f8d8 3000 	ldr.w	r3, [r8]
 800aacc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aad0:	3307      	adds	r3, #7
 800aad2:	f023 0307 	bic.w	r3, r3, #7
 800aad6:	f103 0208 	add.w	r2, r3, #8
 800aada:	f8c8 2000 	str.w	r2, [r8]
 800aade:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaec:	ee08 0a10 	vmov	s16, r0
 800aaf0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800aaf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaf8:	4b9e      	ldr	r3, [pc, #632]	; (800ad74 <_printf_float+0x2d8>)
 800aafa:	f04f 32ff 	mov.w	r2, #4294967295
 800aafe:	f7f6 f835 	bl	8000b6c <__aeabi_dcmpun>
 800ab02:	bb88      	cbnz	r0, 800ab68 <_printf_float+0xcc>
 800ab04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab08:	4b9a      	ldr	r3, [pc, #616]	; (800ad74 <_printf_float+0x2d8>)
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	f7f6 f80f 	bl	8000b30 <__aeabi_dcmple>
 800ab12:	bb48      	cbnz	r0, 800ab68 <_printf_float+0xcc>
 800ab14:	2200      	movs	r2, #0
 800ab16:	2300      	movs	r3, #0
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	f7f5 fffe 	bl	8000b1c <__aeabi_dcmplt>
 800ab20:	b110      	cbz	r0, 800ab28 <_printf_float+0x8c>
 800ab22:	232d      	movs	r3, #45	; 0x2d
 800ab24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab28:	4a93      	ldr	r2, [pc, #588]	; (800ad78 <_printf_float+0x2dc>)
 800ab2a:	4b94      	ldr	r3, [pc, #592]	; (800ad7c <_printf_float+0x2e0>)
 800ab2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab30:	bf94      	ite	ls
 800ab32:	4690      	movls	r8, r2
 800ab34:	4698      	movhi	r8, r3
 800ab36:	2303      	movs	r3, #3
 800ab38:	6123      	str	r3, [r4, #16]
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	f023 0304 	bic.w	r3, r3, #4
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	f04f 0900 	mov.w	r9, #0
 800ab46:	9700      	str	r7, [sp, #0]
 800ab48:	4633      	mov	r3, r6
 800ab4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f000 f9da 	bl	800af08 <_printf_common>
 800ab54:	3001      	adds	r0, #1
 800ab56:	f040 8090 	bne.w	800ac7a <_printf_float+0x1de>
 800ab5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5e:	b00d      	add	sp, #52	; 0x34
 800ab60:	ecbd 8b02 	vpop	{d8}
 800ab64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab68:	4642      	mov	r2, r8
 800ab6a:	464b      	mov	r3, r9
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	4649      	mov	r1, r9
 800ab70:	f7f5 fffc 	bl	8000b6c <__aeabi_dcmpun>
 800ab74:	b140      	cbz	r0, 800ab88 <_printf_float+0xec>
 800ab76:	464b      	mov	r3, r9
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	bfbc      	itt	lt
 800ab7c:	232d      	movlt	r3, #45	; 0x2d
 800ab7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab82:	4a7f      	ldr	r2, [pc, #508]	; (800ad80 <_printf_float+0x2e4>)
 800ab84:	4b7f      	ldr	r3, [pc, #508]	; (800ad84 <_printf_float+0x2e8>)
 800ab86:	e7d1      	b.n	800ab2c <_printf_float+0x90>
 800ab88:	6863      	ldr	r3, [r4, #4]
 800ab8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab8e:	9206      	str	r2, [sp, #24]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	d13f      	bne.n	800ac14 <_printf_float+0x178>
 800ab94:	2306      	movs	r3, #6
 800ab96:	6063      	str	r3, [r4, #4]
 800ab98:	9b05      	ldr	r3, [sp, #20]
 800ab9a:	6861      	ldr	r1, [r4, #4]
 800ab9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aba0:	2300      	movs	r3, #0
 800aba2:	9303      	str	r3, [sp, #12]
 800aba4:	ab0a      	add	r3, sp, #40	; 0x28
 800aba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abaa:	ab09      	add	r3, sp, #36	; 0x24
 800abac:	ec49 8b10 	vmov	d0, r8, r9
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abb8:	4628      	mov	r0, r5
 800abba:	f7ff fecf 	bl	800a95c <__cvt>
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abc2:	2b47      	cmp	r3, #71	; 0x47
 800abc4:	4680      	mov	r8, r0
 800abc6:	d108      	bne.n	800abda <_printf_float+0x13e>
 800abc8:	1cc8      	adds	r0, r1, #3
 800abca:	db02      	blt.n	800abd2 <_printf_float+0x136>
 800abcc:	6863      	ldr	r3, [r4, #4]
 800abce:	4299      	cmp	r1, r3
 800abd0:	dd41      	ble.n	800ac56 <_printf_float+0x1ba>
 800abd2:	f1ab 0302 	sub.w	r3, fp, #2
 800abd6:	fa5f fb83 	uxtb.w	fp, r3
 800abda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abde:	d820      	bhi.n	800ac22 <_printf_float+0x186>
 800abe0:	3901      	subs	r1, #1
 800abe2:	465a      	mov	r2, fp
 800abe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abe8:	9109      	str	r1, [sp, #36]	; 0x24
 800abea:	f7ff ff19 	bl	800aa20 <__exponent>
 800abee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abf0:	1813      	adds	r3, r2, r0
 800abf2:	2a01      	cmp	r2, #1
 800abf4:	4681      	mov	r9, r0
 800abf6:	6123      	str	r3, [r4, #16]
 800abf8:	dc02      	bgt.n	800ac00 <_printf_float+0x164>
 800abfa:	6822      	ldr	r2, [r4, #0]
 800abfc:	07d2      	lsls	r2, r2, #31
 800abfe:	d501      	bpl.n	800ac04 <_printf_float+0x168>
 800ac00:	3301      	adds	r3, #1
 800ac02:	6123      	str	r3, [r4, #16]
 800ac04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d09c      	beq.n	800ab46 <_printf_float+0xaa>
 800ac0c:	232d      	movs	r3, #45	; 0x2d
 800ac0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac12:	e798      	b.n	800ab46 <_printf_float+0xaa>
 800ac14:	9a06      	ldr	r2, [sp, #24]
 800ac16:	2a47      	cmp	r2, #71	; 0x47
 800ac18:	d1be      	bne.n	800ab98 <_printf_float+0xfc>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1bc      	bne.n	800ab98 <_printf_float+0xfc>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e7b9      	b.n	800ab96 <_printf_float+0xfa>
 800ac22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac26:	d118      	bne.n	800ac5a <_printf_float+0x1be>
 800ac28:	2900      	cmp	r1, #0
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	dd0b      	ble.n	800ac46 <_printf_float+0x1aa>
 800ac2e:	6121      	str	r1, [r4, #16]
 800ac30:	b913      	cbnz	r3, 800ac38 <_printf_float+0x19c>
 800ac32:	6822      	ldr	r2, [r4, #0]
 800ac34:	07d0      	lsls	r0, r2, #31
 800ac36:	d502      	bpl.n	800ac3e <_printf_float+0x1a2>
 800ac38:	3301      	adds	r3, #1
 800ac3a:	440b      	add	r3, r1
 800ac3c:	6123      	str	r3, [r4, #16]
 800ac3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac40:	f04f 0900 	mov.w	r9, #0
 800ac44:	e7de      	b.n	800ac04 <_printf_float+0x168>
 800ac46:	b913      	cbnz	r3, 800ac4e <_printf_float+0x1b2>
 800ac48:	6822      	ldr	r2, [r4, #0]
 800ac4a:	07d2      	lsls	r2, r2, #31
 800ac4c:	d501      	bpl.n	800ac52 <_printf_float+0x1b6>
 800ac4e:	3302      	adds	r3, #2
 800ac50:	e7f4      	b.n	800ac3c <_printf_float+0x1a0>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e7f2      	b.n	800ac3c <_printf_float+0x1a0>
 800ac56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	db05      	blt.n	800ac6c <_printf_float+0x1d0>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	6121      	str	r1, [r4, #16]
 800ac64:	07d8      	lsls	r0, r3, #31
 800ac66:	d5ea      	bpl.n	800ac3e <_printf_float+0x1a2>
 800ac68:	1c4b      	adds	r3, r1, #1
 800ac6a:	e7e7      	b.n	800ac3c <_printf_float+0x1a0>
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	bfd4      	ite	le
 800ac70:	f1c1 0202 	rsble	r2, r1, #2
 800ac74:	2201      	movgt	r2, #1
 800ac76:	4413      	add	r3, r2
 800ac78:	e7e0      	b.n	800ac3c <_printf_float+0x1a0>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	055a      	lsls	r2, r3, #21
 800ac7e:	d407      	bmi.n	800ac90 <_printf_float+0x1f4>
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	4642      	mov	r2, r8
 800ac84:	4631      	mov	r1, r6
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d12c      	bne.n	800ace8 <_printf_float+0x24c>
 800ac8e:	e764      	b.n	800ab5a <_printf_float+0xbe>
 800ac90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac94:	f240 80e0 	bls.w	800ae58 <_printf_float+0x3bc>
 800ac98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f7f5 ff32 	bl	8000b08 <__aeabi_dcmpeq>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d034      	beq.n	800ad12 <_printf_float+0x276>
 800aca8:	4a37      	ldr	r2, [pc, #220]	; (800ad88 <_printf_float+0x2ec>)
 800acaa:	2301      	movs	r3, #1
 800acac:	4631      	mov	r1, r6
 800acae:	4628      	mov	r0, r5
 800acb0:	47b8      	blx	r7
 800acb2:	3001      	adds	r0, #1
 800acb4:	f43f af51 	beq.w	800ab5a <_printf_float+0xbe>
 800acb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acbc:	429a      	cmp	r2, r3
 800acbe:	db02      	blt.n	800acc6 <_printf_float+0x22a>
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	07d8      	lsls	r0, r3, #31
 800acc4:	d510      	bpl.n	800ace8 <_printf_float+0x24c>
 800acc6:	ee18 3a10 	vmov	r3, s16
 800acca:	4652      	mov	r2, sl
 800accc:	4631      	mov	r1, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	47b8      	blx	r7
 800acd2:	3001      	adds	r0, #1
 800acd4:	f43f af41 	beq.w	800ab5a <_printf_float+0xbe>
 800acd8:	f04f 0800 	mov.w	r8, #0
 800acdc:	f104 091a 	add.w	r9, r4, #26
 800ace0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace2:	3b01      	subs	r3, #1
 800ace4:	4543      	cmp	r3, r8
 800ace6:	dc09      	bgt.n	800acfc <_printf_float+0x260>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	079b      	lsls	r3, r3, #30
 800acec:	f100 8107 	bmi.w	800aefe <_printf_float+0x462>
 800acf0:	68e0      	ldr	r0, [r4, #12]
 800acf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf4:	4298      	cmp	r0, r3
 800acf6:	bfb8      	it	lt
 800acf8:	4618      	movlt	r0, r3
 800acfa:	e730      	b.n	800ab5e <_printf_float+0xc2>
 800acfc:	2301      	movs	r3, #1
 800acfe:	464a      	mov	r2, r9
 800ad00:	4631      	mov	r1, r6
 800ad02:	4628      	mov	r0, r5
 800ad04:	47b8      	blx	r7
 800ad06:	3001      	adds	r0, #1
 800ad08:	f43f af27 	beq.w	800ab5a <_printf_float+0xbe>
 800ad0c:	f108 0801 	add.w	r8, r8, #1
 800ad10:	e7e6      	b.n	800ace0 <_printf_float+0x244>
 800ad12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	dc39      	bgt.n	800ad8c <_printf_float+0x2f0>
 800ad18:	4a1b      	ldr	r2, [pc, #108]	; (800ad88 <_printf_float+0x2ec>)
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	47b8      	blx	r7
 800ad22:	3001      	adds	r0, #1
 800ad24:	f43f af19 	beq.w	800ab5a <_printf_float+0xbe>
 800ad28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	d102      	bne.n	800ad36 <_printf_float+0x29a>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	07d9      	lsls	r1, r3, #31
 800ad34:	d5d8      	bpl.n	800ace8 <_printf_float+0x24c>
 800ad36:	ee18 3a10 	vmov	r3, s16
 800ad3a:	4652      	mov	r2, sl
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b8      	blx	r7
 800ad42:	3001      	adds	r0, #1
 800ad44:	f43f af09 	beq.w	800ab5a <_printf_float+0xbe>
 800ad48:	f04f 0900 	mov.w	r9, #0
 800ad4c:	f104 0a1a 	add.w	sl, r4, #26
 800ad50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad52:	425b      	negs	r3, r3
 800ad54:	454b      	cmp	r3, r9
 800ad56:	dc01      	bgt.n	800ad5c <_printf_float+0x2c0>
 800ad58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5a:	e792      	b.n	800ac82 <_printf_float+0x1e6>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	4652      	mov	r2, sl
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f aef7 	beq.w	800ab5a <_printf_float+0xbe>
 800ad6c:	f109 0901 	add.w	r9, r9, #1
 800ad70:	e7ee      	b.n	800ad50 <_printf_float+0x2b4>
 800ad72:	bf00      	nop
 800ad74:	7fefffff 	.word	0x7fefffff
 800ad78:	0800e86d 	.word	0x0800e86d
 800ad7c:	0800e871 	.word	0x0800e871
 800ad80:	0800e875 	.word	0x0800e875
 800ad84:	0800e879 	.word	0x0800e879
 800ad88:	0800e87d 	.word	0x0800e87d
 800ad8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad90:	429a      	cmp	r2, r3
 800ad92:	bfa8      	it	ge
 800ad94:	461a      	movge	r2, r3
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	4691      	mov	r9, r2
 800ad9a:	dc37      	bgt.n	800ae0c <_printf_float+0x370>
 800ad9c:	f04f 0b00 	mov.w	fp, #0
 800ada0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ada4:	f104 021a 	add.w	r2, r4, #26
 800ada8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adaa:	9305      	str	r3, [sp, #20]
 800adac:	eba3 0309 	sub.w	r3, r3, r9
 800adb0:	455b      	cmp	r3, fp
 800adb2:	dc33      	bgt.n	800ae1c <_printf_float+0x380>
 800adb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adb8:	429a      	cmp	r2, r3
 800adba:	db3b      	blt.n	800ae34 <_printf_float+0x398>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	07da      	lsls	r2, r3, #31
 800adc0:	d438      	bmi.n	800ae34 <_printf_float+0x398>
 800adc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800adc6:	eba2 0903 	sub.w	r9, r2, r3
 800adca:	9b05      	ldr	r3, [sp, #20]
 800adcc:	1ad2      	subs	r2, r2, r3
 800adce:	4591      	cmp	r9, r2
 800add0:	bfa8      	it	ge
 800add2:	4691      	movge	r9, r2
 800add4:	f1b9 0f00 	cmp.w	r9, #0
 800add8:	dc35      	bgt.n	800ae46 <_printf_float+0x3aa>
 800adda:	f04f 0800 	mov.w	r8, #0
 800adde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ade2:	f104 0a1a 	add.w	sl, r4, #26
 800ade6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adea:	1a9b      	subs	r3, r3, r2
 800adec:	eba3 0309 	sub.w	r3, r3, r9
 800adf0:	4543      	cmp	r3, r8
 800adf2:	f77f af79 	ble.w	800ace8 <_printf_float+0x24c>
 800adf6:	2301      	movs	r3, #1
 800adf8:	4652      	mov	r2, sl
 800adfa:	4631      	mov	r1, r6
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b8      	blx	r7
 800ae00:	3001      	adds	r0, #1
 800ae02:	f43f aeaa 	beq.w	800ab5a <_printf_float+0xbe>
 800ae06:	f108 0801 	add.w	r8, r8, #1
 800ae0a:	e7ec      	b.n	800ade6 <_printf_float+0x34a>
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4642      	mov	r2, r8
 800ae12:	4628      	mov	r0, r5
 800ae14:	47b8      	blx	r7
 800ae16:	3001      	adds	r0, #1
 800ae18:	d1c0      	bne.n	800ad9c <_printf_float+0x300>
 800ae1a:	e69e      	b.n	800ab5a <_printf_float+0xbe>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4628      	mov	r0, r5
 800ae22:	9205      	str	r2, [sp, #20]
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	f43f ae97 	beq.w	800ab5a <_printf_float+0xbe>
 800ae2c:	9a05      	ldr	r2, [sp, #20]
 800ae2e:	f10b 0b01 	add.w	fp, fp, #1
 800ae32:	e7b9      	b.n	800ada8 <_printf_float+0x30c>
 800ae34:	ee18 3a10 	vmov	r3, s16
 800ae38:	4652      	mov	r2, sl
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	47b8      	blx	r7
 800ae40:	3001      	adds	r0, #1
 800ae42:	d1be      	bne.n	800adc2 <_printf_float+0x326>
 800ae44:	e689      	b.n	800ab5a <_printf_float+0xbe>
 800ae46:	9a05      	ldr	r2, [sp, #20]
 800ae48:	464b      	mov	r3, r9
 800ae4a:	4442      	add	r2, r8
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4628      	mov	r0, r5
 800ae50:	47b8      	blx	r7
 800ae52:	3001      	adds	r0, #1
 800ae54:	d1c1      	bne.n	800adda <_printf_float+0x33e>
 800ae56:	e680      	b.n	800ab5a <_printf_float+0xbe>
 800ae58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae5a:	2a01      	cmp	r2, #1
 800ae5c:	dc01      	bgt.n	800ae62 <_printf_float+0x3c6>
 800ae5e:	07db      	lsls	r3, r3, #31
 800ae60:	d53a      	bpl.n	800aed8 <_printf_float+0x43c>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4642      	mov	r2, r8
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f43f ae74 	beq.w	800ab5a <_printf_float+0xbe>
 800ae72:	ee18 3a10 	vmov	r3, s16
 800ae76:	4652      	mov	r2, sl
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	47b8      	blx	r7
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f43f ae6b 	beq.w	800ab5a <_printf_float+0xbe>
 800ae84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ae90:	f7f5 fe3a 	bl	8000b08 <__aeabi_dcmpeq>
 800ae94:	b9d8      	cbnz	r0, 800aece <_printf_float+0x432>
 800ae96:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae9a:	f108 0201 	add.w	r2, r8, #1
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	d10e      	bne.n	800aec6 <_printf_float+0x42a>
 800aea8:	e657      	b.n	800ab5a <_printf_float+0xbe>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4652      	mov	r2, sl
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	47b8      	blx	r7
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f43f ae50 	beq.w	800ab5a <_printf_float+0xbe>
 800aeba:	f108 0801 	add.w	r8, r8, #1
 800aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4543      	cmp	r3, r8
 800aec4:	dcf1      	bgt.n	800aeaa <_printf_float+0x40e>
 800aec6:	464b      	mov	r3, r9
 800aec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aecc:	e6da      	b.n	800ac84 <_printf_float+0x1e8>
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	f104 0a1a 	add.w	sl, r4, #26
 800aed6:	e7f2      	b.n	800aebe <_printf_float+0x422>
 800aed8:	2301      	movs	r3, #1
 800aeda:	4642      	mov	r2, r8
 800aedc:	e7df      	b.n	800ae9e <_printf_float+0x402>
 800aede:	2301      	movs	r3, #1
 800aee0:	464a      	mov	r2, r9
 800aee2:	4631      	mov	r1, r6
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b8      	blx	r7
 800aee8:	3001      	adds	r0, #1
 800aeea:	f43f ae36 	beq.w	800ab5a <_printf_float+0xbe>
 800aeee:	f108 0801 	add.w	r8, r8, #1
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aef6:	1a5b      	subs	r3, r3, r1
 800aef8:	4543      	cmp	r3, r8
 800aefa:	dcf0      	bgt.n	800aede <_printf_float+0x442>
 800aefc:	e6f8      	b.n	800acf0 <_printf_float+0x254>
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	f104 0919 	add.w	r9, r4, #25
 800af06:	e7f4      	b.n	800aef2 <_printf_float+0x456>

0800af08 <_printf_common>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	4616      	mov	r6, r2
 800af0e:	4699      	mov	r9, r3
 800af10:	688a      	ldr	r2, [r1, #8]
 800af12:	690b      	ldr	r3, [r1, #16]
 800af14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af18:	4293      	cmp	r3, r2
 800af1a:	bfb8      	it	lt
 800af1c:	4613      	movlt	r3, r2
 800af1e:	6033      	str	r3, [r6, #0]
 800af20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af24:	4607      	mov	r7, r0
 800af26:	460c      	mov	r4, r1
 800af28:	b10a      	cbz	r2, 800af2e <_printf_common+0x26>
 800af2a:	3301      	adds	r3, #1
 800af2c:	6033      	str	r3, [r6, #0]
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	0699      	lsls	r1, r3, #26
 800af32:	bf42      	ittt	mi
 800af34:	6833      	ldrmi	r3, [r6, #0]
 800af36:	3302      	addmi	r3, #2
 800af38:	6033      	strmi	r3, [r6, #0]
 800af3a:	6825      	ldr	r5, [r4, #0]
 800af3c:	f015 0506 	ands.w	r5, r5, #6
 800af40:	d106      	bne.n	800af50 <_printf_common+0x48>
 800af42:	f104 0a19 	add.w	sl, r4, #25
 800af46:	68e3      	ldr	r3, [r4, #12]
 800af48:	6832      	ldr	r2, [r6, #0]
 800af4a:	1a9b      	subs	r3, r3, r2
 800af4c:	42ab      	cmp	r3, r5
 800af4e:	dc26      	bgt.n	800af9e <_printf_common+0x96>
 800af50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af54:	1e13      	subs	r3, r2, #0
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	bf18      	it	ne
 800af5a:	2301      	movne	r3, #1
 800af5c:	0692      	lsls	r2, r2, #26
 800af5e:	d42b      	bmi.n	800afb8 <_printf_common+0xb0>
 800af60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af64:	4649      	mov	r1, r9
 800af66:	4638      	mov	r0, r7
 800af68:	47c0      	blx	r8
 800af6a:	3001      	adds	r0, #1
 800af6c:	d01e      	beq.n	800afac <_printf_common+0xa4>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	6922      	ldr	r2, [r4, #16]
 800af72:	f003 0306 	and.w	r3, r3, #6
 800af76:	2b04      	cmp	r3, #4
 800af78:	bf02      	ittt	eq
 800af7a:	68e5      	ldreq	r5, [r4, #12]
 800af7c:	6833      	ldreq	r3, [r6, #0]
 800af7e:	1aed      	subeq	r5, r5, r3
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	bf0c      	ite	eq
 800af84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af88:	2500      	movne	r5, #0
 800af8a:	4293      	cmp	r3, r2
 800af8c:	bfc4      	itt	gt
 800af8e:	1a9b      	subgt	r3, r3, r2
 800af90:	18ed      	addgt	r5, r5, r3
 800af92:	2600      	movs	r6, #0
 800af94:	341a      	adds	r4, #26
 800af96:	42b5      	cmp	r5, r6
 800af98:	d11a      	bne.n	800afd0 <_printf_common+0xc8>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e008      	b.n	800afb0 <_printf_common+0xa8>
 800af9e:	2301      	movs	r3, #1
 800afa0:	4652      	mov	r2, sl
 800afa2:	4649      	mov	r1, r9
 800afa4:	4638      	mov	r0, r7
 800afa6:	47c0      	blx	r8
 800afa8:	3001      	adds	r0, #1
 800afaa:	d103      	bne.n	800afb4 <_printf_common+0xac>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb4:	3501      	adds	r5, #1
 800afb6:	e7c6      	b.n	800af46 <_printf_common+0x3e>
 800afb8:	18e1      	adds	r1, r4, r3
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	2030      	movs	r0, #48	; 0x30
 800afbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afc2:	4422      	add	r2, r4
 800afc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afcc:	3302      	adds	r3, #2
 800afce:	e7c7      	b.n	800af60 <_printf_common+0x58>
 800afd0:	2301      	movs	r3, #1
 800afd2:	4622      	mov	r2, r4
 800afd4:	4649      	mov	r1, r9
 800afd6:	4638      	mov	r0, r7
 800afd8:	47c0      	blx	r8
 800afda:	3001      	adds	r0, #1
 800afdc:	d0e6      	beq.n	800afac <_printf_common+0xa4>
 800afde:	3601      	adds	r6, #1
 800afe0:	e7d9      	b.n	800af96 <_printf_common+0x8e>
	...

0800afe4 <_printf_i>:
 800afe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	7e0f      	ldrb	r7, [r1, #24]
 800afea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afec:	2f78      	cmp	r7, #120	; 0x78
 800afee:	4691      	mov	r9, r2
 800aff0:	4680      	mov	r8, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	469a      	mov	sl, r3
 800aff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800affa:	d807      	bhi.n	800b00c <_printf_i+0x28>
 800affc:	2f62      	cmp	r7, #98	; 0x62
 800affe:	d80a      	bhi.n	800b016 <_printf_i+0x32>
 800b000:	2f00      	cmp	r7, #0
 800b002:	f000 80d4 	beq.w	800b1ae <_printf_i+0x1ca>
 800b006:	2f58      	cmp	r7, #88	; 0x58
 800b008:	f000 80c0 	beq.w	800b18c <_printf_i+0x1a8>
 800b00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b014:	e03a      	b.n	800b08c <_printf_i+0xa8>
 800b016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b01a:	2b15      	cmp	r3, #21
 800b01c:	d8f6      	bhi.n	800b00c <_printf_i+0x28>
 800b01e:	a101      	add	r1, pc, #4	; (adr r1, 800b024 <_printf_i+0x40>)
 800b020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b024:	0800b07d 	.word	0x0800b07d
 800b028:	0800b091 	.word	0x0800b091
 800b02c:	0800b00d 	.word	0x0800b00d
 800b030:	0800b00d 	.word	0x0800b00d
 800b034:	0800b00d 	.word	0x0800b00d
 800b038:	0800b00d 	.word	0x0800b00d
 800b03c:	0800b091 	.word	0x0800b091
 800b040:	0800b00d 	.word	0x0800b00d
 800b044:	0800b00d 	.word	0x0800b00d
 800b048:	0800b00d 	.word	0x0800b00d
 800b04c:	0800b00d 	.word	0x0800b00d
 800b050:	0800b195 	.word	0x0800b195
 800b054:	0800b0bd 	.word	0x0800b0bd
 800b058:	0800b14f 	.word	0x0800b14f
 800b05c:	0800b00d 	.word	0x0800b00d
 800b060:	0800b00d 	.word	0x0800b00d
 800b064:	0800b1b7 	.word	0x0800b1b7
 800b068:	0800b00d 	.word	0x0800b00d
 800b06c:	0800b0bd 	.word	0x0800b0bd
 800b070:	0800b00d 	.word	0x0800b00d
 800b074:	0800b00d 	.word	0x0800b00d
 800b078:	0800b157 	.word	0x0800b157
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	602a      	str	r2, [r5, #0]
 800b084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b08c:	2301      	movs	r3, #1
 800b08e:	e09f      	b.n	800b1d0 <_printf_i+0x1ec>
 800b090:	6820      	ldr	r0, [r4, #0]
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	0607      	lsls	r7, r0, #24
 800b096:	f103 0104 	add.w	r1, r3, #4
 800b09a:	6029      	str	r1, [r5, #0]
 800b09c:	d501      	bpl.n	800b0a2 <_printf_i+0xbe>
 800b09e:	681e      	ldr	r6, [r3, #0]
 800b0a0:	e003      	b.n	800b0aa <_printf_i+0xc6>
 800b0a2:	0646      	lsls	r6, r0, #25
 800b0a4:	d5fb      	bpl.n	800b09e <_printf_i+0xba>
 800b0a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0aa:	2e00      	cmp	r6, #0
 800b0ac:	da03      	bge.n	800b0b6 <_printf_i+0xd2>
 800b0ae:	232d      	movs	r3, #45	; 0x2d
 800b0b0:	4276      	negs	r6, r6
 800b0b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b6:	485a      	ldr	r0, [pc, #360]	; (800b220 <_printf_i+0x23c>)
 800b0b8:	230a      	movs	r3, #10
 800b0ba:	e012      	b.n	800b0e2 <_printf_i+0xfe>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	6820      	ldr	r0, [r4, #0]
 800b0c0:	1d19      	adds	r1, r3, #4
 800b0c2:	6029      	str	r1, [r5, #0]
 800b0c4:	0605      	lsls	r5, r0, #24
 800b0c6:	d501      	bpl.n	800b0cc <_printf_i+0xe8>
 800b0c8:	681e      	ldr	r6, [r3, #0]
 800b0ca:	e002      	b.n	800b0d2 <_printf_i+0xee>
 800b0cc:	0641      	lsls	r1, r0, #25
 800b0ce:	d5fb      	bpl.n	800b0c8 <_printf_i+0xe4>
 800b0d0:	881e      	ldrh	r6, [r3, #0]
 800b0d2:	4853      	ldr	r0, [pc, #332]	; (800b220 <_printf_i+0x23c>)
 800b0d4:	2f6f      	cmp	r7, #111	; 0x6f
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2308      	moveq	r3, #8
 800b0da:	230a      	movne	r3, #10
 800b0dc:	2100      	movs	r1, #0
 800b0de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0e2:	6865      	ldr	r5, [r4, #4]
 800b0e4:	60a5      	str	r5, [r4, #8]
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	bfa2      	ittt	ge
 800b0ea:	6821      	ldrge	r1, [r4, #0]
 800b0ec:	f021 0104 	bicge.w	r1, r1, #4
 800b0f0:	6021      	strge	r1, [r4, #0]
 800b0f2:	b90e      	cbnz	r6, 800b0f8 <_printf_i+0x114>
 800b0f4:	2d00      	cmp	r5, #0
 800b0f6:	d04b      	beq.n	800b190 <_printf_i+0x1ac>
 800b0f8:	4615      	mov	r5, r2
 800b0fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0fe:	fb03 6711 	mls	r7, r3, r1, r6
 800b102:	5dc7      	ldrb	r7, [r0, r7]
 800b104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b108:	4637      	mov	r7, r6
 800b10a:	42bb      	cmp	r3, r7
 800b10c:	460e      	mov	r6, r1
 800b10e:	d9f4      	bls.n	800b0fa <_printf_i+0x116>
 800b110:	2b08      	cmp	r3, #8
 800b112:	d10b      	bne.n	800b12c <_printf_i+0x148>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	07de      	lsls	r6, r3, #31
 800b118:	d508      	bpl.n	800b12c <_printf_i+0x148>
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	6861      	ldr	r1, [r4, #4]
 800b11e:	4299      	cmp	r1, r3
 800b120:	bfde      	ittt	le
 800b122:	2330      	movle	r3, #48	; 0x30
 800b124:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b12c:	1b52      	subs	r2, r2, r5
 800b12e:	6122      	str	r2, [r4, #16]
 800b130:	f8cd a000 	str.w	sl, [sp]
 800b134:	464b      	mov	r3, r9
 800b136:	aa03      	add	r2, sp, #12
 800b138:	4621      	mov	r1, r4
 800b13a:	4640      	mov	r0, r8
 800b13c:	f7ff fee4 	bl	800af08 <_printf_common>
 800b140:	3001      	adds	r0, #1
 800b142:	d14a      	bne.n	800b1da <_printf_i+0x1f6>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295
 800b148:	b004      	add	sp, #16
 800b14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	f043 0320 	orr.w	r3, r3, #32
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	4833      	ldr	r0, [pc, #204]	; (800b224 <_printf_i+0x240>)
 800b158:	2778      	movs	r7, #120	; 0x78
 800b15a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	6829      	ldr	r1, [r5, #0]
 800b162:	061f      	lsls	r7, r3, #24
 800b164:	f851 6b04 	ldr.w	r6, [r1], #4
 800b168:	d402      	bmi.n	800b170 <_printf_i+0x18c>
 800b16a:	065f      	lsls	r7, r3, #25
 800b16c:	bf48      	it	mi
 800b16e:	b2b6      	uxthmi	r6, r6
 800b170:	07df      	lsls	r7, r3, #31
 800b172:	bf48      	it	mi
 800b174:	f043 0320 	orrmi.w	r3, r3, #32
 800b178:	6029      	str	r1, [r5, #0]
 800b17a:	bf48      	it	mi
 800b17c:	6023      	strmi	r3, [r4, #0]
 800b17e:	b91e      	cbnz	r6, 800b188 <_printf_i+0x1a4>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	f023 0320 	bic.w	r3, r3, #32
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	2310      	movs	r3, #16
 800b18a:	e7a7      	b.n	800b0dc <_printf_i+0xf8>
 800b18c:	4824      	ldr	r0, [pc, #144]	; (800b220 <_printf_i+0x23c>)
 800b18e:	e7e4      	b.n	800b15a <_printf_i+0x176>
 800b190:	4615      	mov	r5, r2
 800b192:	e7bd      	b.n	800b110 <_printf_i+0x12c>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	6826      	ldr	r6, [r4, #0]
 800b198:	6961      	ldr	r1, [r4, #20]
 800b19a:	1d18      	adds	r0, r3, #4
 800b19c:	6028      	str	r0, [r5, #0]
 800b19e:	0635      	lsls	r5, r6, #24
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	d501      	bpl.n	800b1a8 <_printf_i+0x1c4>
 800b1a4:	6019      	str	r1, [r3, #0]
 800b1a6:	e002      	b.n	800b1ae <_printf_i+0x1ca>
 800b1a8:	0670      	lsls	r0, r6, #25
 800b1aa:	d5fb      	bpl.n	800b1a4 <_printf_i+0x1c0>
 800b1ac:	8019      	strh	r1, [r3, #0]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	6123      	str	r3, [r4, #16]
 800b1b2:	4615      	mov	r5, r2
 800b1b4:	e7bc      	b.n	800b130 <_printf_i+0x14c>
 800b1b6:	682b      	ldr	r3, [r5, #0]
 800b1b8:	1d1a      	adds	r2, r3, #4
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	681d      	ldr	r5, [r3, #0]
 800b1be:	6862      	ldr	r2, [r4, #4]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f7f5 f824 	bl	8000210 <memchr>
 800b1c8:	b108      	cbz	r0, 800b1ce <_printf_i+0x1ea>
 800b1ca:	1b40      	subs	r0, r0, r5
 800b1cc:	6060      	str	r0, [r4, #4]
 800b1ce:	6863      	ldr	r3, [r4, #4]
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d8:	e7aa      	b.n	800b130 <_printf_i+0x14c>
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	462a      	mov	r2, r5
 800b1de:	4649      	mov	r1, r9
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	47d0      	blx	sl
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d0ad      	beq.n	800b144 <_printf_i+0x160>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	079b      	lsls	r3, r3, #30
 800b1ec:	d413      	bmi.n	800b216 <_printf_i+0x232>
 800b1ee:	68e0      	ldr	r0, [r4, #12]
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	4298      	cmp	r0, r3
 800b1f4:	bfb8      	it	lt
 800b1f6:	4618      	movlt	r0, r3
 800b1f8:	e7a6      	b.n	800b148 <_printf_i+0x164>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4649      	mov	r1, r9
 800b200:	4640      	mov	r0, r8
 800b202:	47d0      	blx	sl
 800b204:	3001      	adds	r0, #1
 800b206:	d09d      	beq.n	800b144 <_printf_i+0x160>
 800b208:	3501      	adds	r5, #1
 800b20a:	68e3      	ldr	r3, [r4, #12]
 800b20c:	9903      	ldr	r1, [sp, #12]
 800b20e:	1a5b      	subs	r3, r3, r1
 800b210:	42ab      	cmp	r3, r5
 800b212:	dcf2      	bgt.n	800b1fa <_printf_i+0x216>
 800b214:	e7eb      	b.n	800b1ee <_printf_i+0x20a>
 800b216:	2500      	movs	r5, #0
 800b218:	f104 0619 	add.w	r6, r4, #25
 800b21c:	e7f5      	b.n	800b20a <_printf_i+0x226>
 800b21e:	bf00      	nop
 800b220:	0800e87f 	.word	0x0800e87f
 800b224:	0800e890 	.word	0x0800e890

0800b228 <std>:
 800b228:	2300      	movs	r3, #0
 800b22a:	b510      	push	{r4, lr}
 800b22c:	4604      	mov	r4, r0
 800b22e:	e9c0 3300 	strd	r3, r3, [r0]
 800b232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b236:	6083      	str	r3, [r0, #8]
 800b238:	8181      	strh	r1, [r0, #12]
 800b23a:	6643      	str	r3, [r0, #100]	; 0x64
 800b23c:	81c2      	strh	r2, [r0, #14]
 800b23e:	6183      	str	r3, [r0, #24]
 800b240:	4619      	mov	r1, r3
 800b242:	2208      	movs	r2, #8
 800b244:	305c      	adds	r0, #92	; 0x5c
 800b246:	f000 f928 	bl	800b49a <memset>
 800b24a:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <std+0x58>)
 800b24c:	6263      	str	r3, [r4, #36]	; 0x24
 800b24e:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <std+0x5c>)
 800b250:	62a3      	str	r3, [r4, #40]	; 0x28
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <std+0x60>)
 800b254:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <std+0x64>)
 800b258:	6323      	str	r3, [r4, #48]	; 0x30
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <std+0x68>)
 800b25c:	6224      	str	r4, [r4, #32]
 800b25e:	429c      	cmp	r4, r3
 800b260:	d006      	beq.n	800b270 <std+0x48>
 800b262:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b266:	4294      	cmp	r4, r2
 800b268:	d002      	beq.n	800b270 <std+0x48>
 800b26a:	33d0      	adds	r3, #208	; 0xd0
 800b26c:	429c      	cmp	r4, r3
 800b26e:	d105      	bne.n	800b27c <std+0x54>
 800b270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b278:	f000 b9e2 	b.w	800b640 <__retarget_lock_init_recursive>
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	bf00      	nop
 800b280:	0800b415 	.word	0x0800b415
 800b284:	0800b437 	.word	0x0800b437
 800b288:	0800b46f 	.word	0x0800b46f
 800b28c:	0800b493 	.word	0x0800b493
 800b290:	200051f0 	.word	0x200051f0

0800b294 <stdio_exit_handler>:
 800b294:	4a02      	ldr	r2, [pc, #8]	; (800b2a0 <stdio_exit_handler+0xc>)
 800b296:	4903      	ldr	r1, [pc, #12]	; (800b2a4 <stdio_exit_handler+0x10>)
 800b298:	4803      	ldr	r0, [pc, #12]	; (800b2a8 <stdio_exit_handler+0x14>)
 800b29a:	f000 b869 	b.w	800b370 <_fwalk_sglue>
 800b29e:	bf00      	nop
 800b2a0:	20000018 	.word	0x20000018
 800b2a4:	0800d051 	.word	0x0800d051
 800b2a8:	20000190 	.word	0x20000190

0800b2ac <cleanup_stdio>:
 800b2ac:	6841      	ldr	r1, [r0, #4]
 800b2ae:	4b0c      	ldr	r3, [pc, #48]	; (800b2e0 <cleanup_stdio+0x34>)
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	b510      	push	{r4, lr}
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	d001      	beq.n	800b2bc <cleanup_stdio+0x10>
 800b2b8:	f001 feca 	bl	800d050 <_fflush_r>
 800b2bc:	68a1      	ldr	r1, [r4, #8]
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <cleanup_stdio+0x38>)
 800b2c0:	4299      	cmp	r1, r3
 800b2c2:	d002      	beq.n	800b2ca <cleanup_stdio+0x1e>
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f001 fec3 	bl	800d050 <_fflush_r>
 800b2ca:	68e1      	ldr	r1, [r4, #12]
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <cleanup_stdio+0x3c>)
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	d004      	beq.n	800b2dc <cleanup_stdio+0x30>
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d8:	f001 beba 	b.w	800d050 <_fflush_r>
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	bf00      	nop
 800b2e0:	200051f0 	.word	0x200051f0
 800b2e4:	20005258 	.word	0x20005258
 800b2e8:	200052c0 	.word	0x200052c0

0800b2ec <global_stdio_init.part.0>:
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	4b0b      	ldr	r3, [pc, #44]	; (800b31c <global_stdio_init.part.0+0x30>)
 800b2f0:	4c0b      	ldr	r4, [pc, #44]	; (800b320 <global_stdio_init.part.0+0x34>)
 800b2f2:	4a0c      	ldr	r2, [pc, #48]	; (800b324 <global_stdio_init.part.0+0x38>)
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2104      	movs	r1, #4
 800b2fc:	f7ff ff94 	bl	800b228 <std>
 800b300:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b304:	2201      	movs	r2, #1
 800b306:	2109      	movs	r1, #9
 800b308:	f7ff ff8e 	bl	800b228 <std>
 800b30c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b310:	2202      	movs	r2, #2
 800b312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b316:	2112      	movs	r1, #18
 800b318:	f7ff bf86 	b.w	800b228 <std>
 800b31c:	20005328 	.word	0x20005328
 800b320:	200051f0 	.word	0x200051f0
 800b324:	0800b295 	.word	0x0800b295

0800b328 <__sfp_lock_acquire>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sfp_lock_acquire+0x8>)
 800b32a:	f000 b98a 	b.w	800b642 <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	20005331 	.word	0x20005331

0800b334 <__sfp_lock_release>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sfp_lock_release+0x8>)
 800b336:	f000 b985 	b.w	800b644 <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	20005331 	.word	0x20005331

0800b340 <__sinit>:
 800b340:	b510      	push	{r4, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	f7ff fff0 	bl	800b328 <__sfp_lock_acquire>
 800b348:	6a23      	ldr	r3, [r4, #32]
 800b34a:	b11b      	cbz	r3, 800b354 <__sinit+0x14>
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	f7ff bff0 	b.w	800b334 <__sfp_lock_release>
 800b354:	4b04      	ldr	r3, [pc, #16]	; (800b368 <__sinit+0x28>)
 800b356:	6223      	str	r3, [r4, #32]
 800b358:	4b04      	ldr	r3, [pc, #16]	; (800b36c <__sinit+0x2c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1f5      	bne.n	800b34c <__sinit+0xc>
 800b360:	f7ff ffc4 	bl	800b2ec <global_stdio_init.part.0>
 800b364:	e7f2      	b.n	800b34c <__sinit+0xc>
 800b366:	bf00      	nop
 800b368:	0800b2ad 	.word	0x0800b2ad
 800b36c:	20005328 	.word	0x20005328

0800b370 <_fwalk_sglue>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	4607      	mov	r7, r0
 800b376:	4688      	mov	r8, r1
 800b378:	4614      	mov	r4, r2
 800b37a:	2600      	movs	r6, #0
 800b37c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b380:	f1b9 0901 	subs.w	r9, r9, #1
 800b384:	d505      	bpl.n	800b392 <_fwalk_sglue+0x22>
 800b386:	6824      	ldr	r4, [r4, #0]
 800b388:	2c00      	cmp	r4, #0
 800b38a:	d1f7      	bne.n	800b37c <_fwalk_sglue+0xc>
 800b38c:	4630      	mov	r0, r6
 800b38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d907      	bls.n	800b3a8 <_fwalk_sglue+0x38>
 800b398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b39c:	3301      	adds	r3, #1
 800b39e:	d003      	beq.n	800b3a8 <_fwalk_sglue+0x38>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c0      	blx	r8
 800b3a6:	4306      	orrs	r6, r0
 800b3a8:	3568      	adds	r5, #104	; 0x68
 800b3aa:	e7e9      	b.n	800b380 <_fwalk_sglue+0x10>

0800b3ac <sniprintf>:
 800b3ac:	b40c      	push	{r2, r3}
 800b3ae:	b530      	push	{r4, r5, lr}
 800b3b0:	4b17      	ldr	r3, [pc, #92]	; (800b410 <sniprintf+0x64>)
 800b3b2:	1e0c      	subs	r4, r1, #0
 800b3b4:	681d      	ldr	r5, [r3, #0]
 800b3b6:	b09d      	sub	sp, #116	; 0x74
 800b3b8:	da08      	bge.n	800b3cc <sniprintf+0x20>
 800b3ba:	238b      	movs	r3, #139	; 0x8b
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	b01d      	add	sp, #116	; 0x74
 800b3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3c8:	b002      	add	sp, #8
 800b3ca:	4770      	bx	lr
 800b3cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b3d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b3d4:	bf14      	ite	ne
 800b3d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b3da:	4623      	moveq	r3, r4
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	9307      	str	r3, [sp, #28]
 800b3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3e4:	9002      	str	r0, [sp, #8]
 800b3e6:	9006      	str	r0, [sp, #24]
 800b3e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b3ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b3ee:	ab21      	add	r3, sp, #132	; 0x84
 800b3f0:	a902      	add	r1, sp, #8
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	f001 fca7 	bl	800cd48 <_svfiprintf_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	bfbc      	itt	lt
 800b3fe:	238b      	movlt	r3, #139	; 0x8b
 800b400:	602b      	strlt	r3, [r5, #0]
 800b402:	2c00      	cmp	r4, #0
 800b404:	d0dd      	beq.n	800b3c2 <sniprintf+0x16>
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	2200      	movs	r2, #0
 800b40a:	701a      	strb	r2, [r3, #0]
 800b40c:	e7d9      	b.n	800b3c2 <sniprintf+0x16>
 800b40e:	bf00      	nop
 800b410:	200001dc 	.word	0x200001dc

0800b414 <__sread>:
 800b414:	b510      	push	{r4, lr}
 800b416:	460c      	mov	r4, r1
 800b418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41c:	f000 f8c2 	bl	800b5a4 <_read_r>
 800b420:	2800      	cmp	r0, #0
 800b422:	bfab      	itete	ge
 800b424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b426:	89a3      	ldrhlt	r3, [r4, #12]
 800b428:	181b      	addge	r3, r3, r0
 800b42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b42e:	bfac      	ite	ge
 800b430:	6563      	strge	r3, [r4, #84]	; 0x54
 800b432:	81a3      	strhlt	r3, [r4, #12]
 800b434:	bd10      	pop	{r4, pc}

0800b436 <__swrite>:
 800b436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	461f      	mov	r7, r3
 800b43c:	898b      	ldrh	r3, [r1, #12]
 800b43e:	05db      	lsls	r3, r3, #23
 800b440:	4605      	mov	r5, r0
 800b442:	460c      	mov	r4, r1
 800b444:	4616      	mov	r6, r2
 800b446:	d505      	bpl.n	800b454 <__swrite+0x1e>
 800b448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44c:	2302      	movs	r3, #2
 800b44e:	2200      	movs	r2, #0
 800b450:	f000 f896 	bl	800b580 <_lseek_r>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	4632      	mov	r2, r6
 800b462:	463b      	mov	r3, r7
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b46a:	f000 b8ad 	b.w	800b5c8 <_write_r>

0800b46e <__sseek>:
 800b46e:	b510      	push	{r4, lr}
 800b470:	460c      	mov	r4, r1
 800b472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b476:	f000 f883 	bl	800b580 <_lseek_r>
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	bf15      	itete	ne
 800b480:	6560      	strne	r0, [r4, #84]	; 0x54
 800b482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b48a:	81a3      	strheq	r3, [r4, #12]
 800b48c:	bf18      	it	ne
 800b48e:	81a3      	strhne	r3, [r4, #12]
 800b490:	bd10      	pop	{r4, pc}

0800b492 <__sclose>:
 800b492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b496:	f000 b80d 	b.w	800b4b4 <_close_r>

0800b49a <memset>:
 800b49a:	4402      	add	r2, r0
 800b49c:	4603      	mov	r3, r0
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d100      	bne.n	800b4a4 <memset+0xa>
 800b4a2:	4770      	bx	lr
 800b4a4:	f803 1b01 	strb.w	r1, [r3], #1
 800b4a8:	e7f9      	b.n	800b49e <memset+0x4>
	...

0800b4ac <_localeconv_r>:
 800b4ac:	4800      	ldr	r0, [pc, #0]	; (800b4b0 <_localeconv_r+0x4>)
 800b4ae:	4770      	bx	lr
 800b4b0:	20000114 	.word	0x20000114

0800b4b4 <_close_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4d06      	ldr	r5, [pc, #24]	; (800b4d0 <_close_r+0x1c>)
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4608      	mov	r0, r1
 800b4be:	602b      	str	r3, [r5, #0]
 800b4c0:	f7f8 fa39 	bl	8003936 <_close>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d102      	bne.n	800b4ce <_close_r+0x1a>
 800b4c8:	682b      	ldr	r3, [r5, #0]
 800b4ca:	b103      	cbz	r3, 800b4ce <_close_r+0x1a>
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	2000532c 	.word	0x2000532c

0800b4d4 <_reclaim_reent>:
 800b4d4:	4b29      	ldr	r3, [pc, #164]	; (800b57c <_reclaim_reent+0xa8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4283      	cmp	r3, r0
 800b4da:	b570      	push	{r4, r5, r6, lr}
 800b4dc:	4604      	mov	r4, r0
 800b4de:	d04b      	beq.n	800b578 <_reclaim_reent+0xa4>
 800b4e0:	69c3      	ldr	r3, [r0, #28]
 800b4e2:	b143      	cbz	r3, 800b4f6 <_reclaim_reent+0x22>
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d144      	bne.n	800b574 <_reclaim_reent+0xa0>
 800b4ea:	69e3      	ldr	r3, [r4, #28]
 800b4ec:	6819      	ldr	r1, [r3, #0]
 800b4ee:	b111      	cbz	r1, 800b4f6 <_reclaim_reent+0x22>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f000 ff33 	bl	800c35c <_free_r>
 800b4f6:	6961      	ldr	r1, [r4, #20]
 800b4f8:	b111      	cbz	r1, 800b500 <_reclaim_reent+0x2c>
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 ff2e 	bl	800c35c <_free_r>
 800b500:	69e1      	ldr	r1, [r4, #28]
 800b502:	b111      	cbz	r1, 800b50a <_reclaim_reent+0x36>
 800b504:	4620      	mov	r0, r4
 800b506:	f000 ff29 	bl	800c35c <_free_r>
 800b50a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b50c:	b111      	cbz	r1, 800b514 <_reclaim_reent+0x40>
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 ff24 	bl	800c35c <_free_r>
 800b514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b516:	b111      	cbz	r1, 800b51e <_reclaim_reent+0x4a>
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 ff1f 	bl	800c35c <_free_r>
 800b51e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b520:	b111      	cbz	r1, 800b528 <_reclaim_reent+0x54>
 800b522:	4620      	mov	r0, r4
 800b524:	f000 ff1a 	bl	800c35c <_free_r>
 800b528:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b52a:	b111      	cbz	r1, 800b532 <_reclaim_reent+0x5e>
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 ff15 	bl	800c35c <_free_r>
 800b532:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b534:	b111      	cbz	r1, 800b53c <_reclaim_reent+0x68>
 800b536:	4620      	mov	r0, r4
 800b538:	f000 ff10 	bl	800c35c <_free_r>
 800b53c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b53e:	b111      	cbz	r1, 800b546 <_reclaim_reent+0x72>
 800b540:	4620      	mov	r0, r4
 800b542:	f000 ff0b 	bl	800c35c <_free_r>
 800b546:	6a23      	ldr	r3, [r4, #32]
 800b548:	b1b3      	cbz	r3, 800b578 <_reclaim_reent+0xa4>
 800b54a:	4620      	mov	r0, r4
 800b54c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b550:	4718      	bx	r3
 800b552:	5949      	ldr	r1, [r1, r5]
 800b554:	b941      	cbnz	r1, 800b568 <_reclaim_reent+0x94>
 800b556:	3504      	adds	r5, #4
 800b558:	69e3      	ldr	r3, [r4, #28]
 800b55a:	2d80      	cmp	r5, #128	; 0x80
 800b55c:	68d9      	ldr	r1, [r3, #12]
 800b55e:	d1f8      	bne.n	800b552 <_reclaim_reent+0x7e>
 800b560:	4620      	mov	r0, r4
 800b562:	f000 fefb 	bl	800c35c <_free_r>
 800b566:	e7c0      	b.n	800b4ea <_reclaim_reent+0x16>
 800b568:	680e      	ldr	r6, [r1, #0]
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 fef6 	bl	800c35c <_free_r>
 800b570:	4631      	mov	r1, r6
 800b572:	e7ef      	b.n	800b554 <_reclaim_reent+0x80>
 800b574:	2500      	movs	r5, #0
 800b576:	e7ef      	b.n	800b558 <_reclaim_reent+0x84>
 800b578:	bd70      	pop	{r4, r5, r6, pc}
 800b57a:	bf00      	nop
 800b57c:	200001dc 	.word	0x200001dc

0800b580 <_lseek_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d07      	ldr	r5, [pc, #28]	; (800b5a0 <_lseek_r+0x20>)
 800b584:	4604      	mov	r4, r0
 800b586:	4608      	mov	r0, r1
 800b588:	4611      	mov	r1, r2
 800b58a:	2200      	movs	r2, #0
 800b58c:	602a      	str	r2, [r5, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	f7f8 f9f8 	bl	8003984 <_lseek>
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	d102      	bne.n	800b59e <_lseek_r+0x1e>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b103      	cbz	r3, 800b59e <_lseek_r+0x1e>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	2000532c 	.word	0x2000532c

0800b5a4 <_read_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4d07      	ldr	r5, [pc, #28]	; (800b5c4 <_read_r+0x20>)
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	4608      	mov	r0, r1
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	602a      	str	r2, [r5, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f7f8 f986 	bl	80038c4 <_read>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_read_r+0x1e>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_read_r+0x1e>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	2000532c 	.word	0x2000532c

0800b5c8 <_write_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d07      	ldr	r5, [pc, #28]	; (800b5e8 <_write_r+0x20>)
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	4608      	mov	r0, r1
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	602a      	str	r2, [r5, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f7f8 f991 	bl	80038fe <_write>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_write_r+0x1e>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_write_r+0x1e>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	2000532c 	.word	0x2000532c

0800b5ec <__errno>:
 800b5ec:	4b01      	ldr	r3, [pc, #4]	; (800b5f4 <__errno+0x8>)
 800b5ee:	6818      	ldr	r0, [r3, #0]
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	200001dc 	.word	0x200001dc

0800b5f8 <__libc_init_array>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	4d0d      	ldr	r5, [pc, #52]	; (800b630 <__libc_init_array+0x38>)
 800b5fc:	4c0d      	ldr	r4, [pc, #52]	; (800b634 <__libc_init_array+0x3c>)
 800b5fe:	1b64      	subs	r4, r4, r5
 800b600:	10a4      	asrs	r4, r4, #2
 800b602:	2600      	movs	r6, #0
 800b604:	42a6      	cmp	r6, r4
 800b606:	d109      	bne.n	800b61c <__libc_init_array+0x24>
 800b608:	4d0b      	ldr	r5, [pc, #44]	; (800b638 <__libc_init_array+0x40>)
 800b60a:	4c0c      	ldr	r4, [pc, #48]	; (800b63c <__libc_init_array+0x44>)
 800b60c:	f003 f81a 	bl	800e644 <_init>
 800b610:	1b64      	subs	r4, r4, r5
 800b612:	10a4      	asrs	r4, r4, #2
 800b614:	2600      	movs	r6, #0
 800b616:	42a6      	cmp	r6, r4
 800b618:	d105      	bne.n	800b626 <__libc_init_array+0x2e>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b620:	4798      	blx	r3
 800b622:	3601      	adds	r6, #1
 800b624:	e7ee      	b.n	800b604 <__libc_init_array+0xc>
 800b626:	f855 3b04 	ldr.w	r3, [r5], #4
 800b62a:	4798      	blx	r3
 800b62c:	3601      	adds	r6, #1
 800b62e:	e7f2      	b.n	800b616 <__libc_init_array+0x1e>
 800b630:	0800eb20 	.word	0x0800eb20
 800b634:	0800eb20 	.word	0x0800eb20
 800b638:	0800eb20 	.word	0x0800eb20
 800b63c:	0800eb24 	.word	0x0800eb24

0800b640 <__retarget_lock_init_recursive>:
 800b640:	4770      	bx	lr

0800b642 <__retarget_lock_acquire_recursive>:
 800b642:	4770      	bx	lr

0800b644 <__retarget_lock_release_recursive>:
 800b644:	4770      	bx	lr

0800b646 <memcpy>:
 800b646:	440a      	add	r2, r1
 800b648:	4291      	cmp	r1, r2
 800b64a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b64e:	d100      	bne.n	800b652 <memcpy+0xc>
 800b650:	4770      	bx	lr
 800b652:	b510      	push	{r4, lr}
 800b654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b65c:	4291      	cmp	r1, r2
 800b65e:	d1f9      	bne.n	800b654 <memcpy+0xe>
 800b660:	bd10      	pop	{r4, pc}

0800b662 <quorem>:
 800b662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b666:	6903      	ldr	r3, [r0, #16]
 800b668:	690c      	ldr	r4, [r1, #16]
 800b66a:	42a3      	cmp	r3, r4
 800b66c:	4607      	mov	r7, r0
 800b66e:	db7e      	blt.n	800b76e <quorem+0x10c>
 800b670:	3c01      	subs	r4, #1
 800b672:	f101 0814 	add.w	r8, r1, #20
 800b676:	f100 0514 	add.w	r5, r0, #20
 800b67a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b688:	3301      	adds	r3, #1
 800b68a:	429a      	cmp	r2, r3
 800b68c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b690:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b694:	fbb2 f6f3 	udiv	r6, r2, r3
 800b698:	d331      	bcc.n	800b6fe <quorem+0x9c>
 800b69a:	f04f 0e00 	mov.w	lr, #0
 800b69e:	4640      	mov	r0, r8
 800b6a0:	46ac      	mov	ip, r5
 800b6a2:	46f2      	mov	sl, lr
 800b6a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6a8:	b293      	uxth	r3, r2
 800b6aa:	fb06 e303 	mla	r3, r6, r3, lr
 800b6ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6b2:	0c1a      	lsrs	r2, r3, #16
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	ebaa 0303 	sub.w	r3, sl, r3
 800b6ba:	f8dc a000 	ldr.w	sl, [ip]
 800b6be:	fa13 f38a 	uxtah	r3, r3, sl
 800b6c2:	fb06 220e 	mla	r2, r6, lr, r2
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	9b00      	ldr	r3, [sp, #0]
 800b6ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6ce:	b292      	uxth	r2, r2
 800b6d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6dc:	4581      	cmp	r9, r0
 800b6de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6e2:	f84c 3b04 	str.w	r3, [ip], #4
 800b6e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6ea:	d2db      	bcs.n	800b6a4 <quorem+0x42>
 800b6ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6f0:	b92b      	cbnz	r3, 800b6fe <quorem+0x9c>
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	3b04      	subs	r3, #4
 800b6f6:	429d      	cmp	r5, r3
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	d32c      	bcc.n	800b756 <quorem+0xf4>
 800b6fc:	613c      	str	r4, [r7, #16]
 800b6fe:	4638      	mov	r0, r7
 800b700:	f001 f9ba 	bl	800ca78 <__mcmp>
 800b704:	2800      	cmp	r0, #0
 800b706:	db22      	blt.n	800b74e <quorem+0xec>
 800b708:	3601      	adds	r6, #1
 800b70a:	4629      	mov	r1, r5
 800b70c:	2000      	movs	r0, #0
 800b70e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b712:	f8d1 c000 	ldr.w	ip, [r1]
 800b716:	b293      	uxth	r3, r2
 800b718:	1ac3      	subs	r3, r0, r3
 800b71a:	0c12      	lsrs	r2, r2, #16
 800b71c:	fa13 f38c 	uxtah	r3, r3, ip
 800b720:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b728:	b29b      	uxth	r3, r3
 800b72a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b72e:	45c1      	cmp	r9, r8
 800b730:	f841 3b04 	str.w	r3, [r1], #4
 800b734:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b738:	d2e9      	bcs.n	800b70e <quorem+0xac>
 800b73a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b742:	b922      	cbnz	r2, 800b74e <quorem+0xec>
 800b744:	3b04      	subs	r3, #4
 800b746:	429d      	cmp	r5, r3
 800b748:	461a      	mov	r2, r3
 800b74a:	d30a      	bcc.n	800b762 <quorem+0x100>
 800b74c:	613c      	str	r4, [r7, #16]
 800b74e:	4630      	mov	r0, r6
 800b750:	b003      	add	sp, #12
 800b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b756:	6812      	ldr	r2, [r2, #0]
 800b758:	3b04      	subs	r3, #4
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	d1ce      	bne.n	800b6fc <quorem+0x9a>
 800b75e:	3c01      	subs	r4, #1
 800b760:	e7c9      	b.n	800b6f6 <quorem+0x94>
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	3b04      	subs	r3, #4
 800b766:	2a00      	cmp	r2, #0
 800b768:	d1f0      	bne.n	800b74c <quorem+0xea>
 800b76a:	3c01      	subs	r4, #1
 800b76c:	e7eb      	b.n	800b746 <quorem+0xe4>
 800b76e:	2000      	movs	r0, #0
 800b770:	e7ee      	b.n	800b750 <quorem+0xee>
 800b772:	0000      	movs	r0, r0
 800b774:	0000      	movs	r0, r0
	...

0800b778 <_dtoa_r>:
 800b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	ed2d 8b04 	vpush	{d8-d9}
 800b780:	69c5      	ldr	r5, [r0, #28]
 800b782:	b093      	sub	sp, #76	; 0x4c
 800b784:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b788:	ec57 6b10 	vmov	r6, r7, d0
 800b78c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b790:	9107      	str	r1, [sp, #28]
 800b792:	4604      	mov	r4, r0
 800b794:	920a      	str	r2, [sp, #40]	; 0x28
 800b796:	930d      	str	r3, [sp, #52]	; 0x34
 800b798:	b975      	cbnz	r5, 800b7b8 <_dtoa_r+0x40>
 800b79a:	2010      	movs	r0, #16
 800b79c:	f000 fe2a 	bl	800c3f4 <malloc>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	61e0      	str	r0, [r4, #28]
 800b7a4:	b920      	cbnz	r0, 800b7b0 <_dtoa_r+0x38>
 800b7a6:	4bae      	ldr	r3, [pc, #696]	; (800ba60 <_dtoa_r+0x2e8>)
 800b7a8:	21ef      	movs	r1, #239	; 0xef
 800b7aa:	48ae      	ldr	r0, [pc, #696]	; (800ba64 <_dtoa_r+0x2ec>)
 800b7ac:	f001 fca2 	bl	800d0f4 <__assert_func>
 800b7b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7b4:	6005      	str	r5, [r0, #0]
 800b7b6:	60c5      	str	r5, [r0, #12]
 800b7b8:	69e3      	ldr	r3, [r4, #28]
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	b151      	cbz	r1, 800b7d4 <_dtoa_r+0x5c>
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	604a      	str	r2, [r1, #4]
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4093      	lsls	r3, r2
 800b7c6:	608b      	str	r3, [r1, #8]
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 ff19 	bl	800c600 <_Bfree>
 800b7ce:	69e3      	ldr	r3, [r4, #28]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	1e3b      	subs	r3, r7, #0
 800b7d6:	bfbb      	ittet	lt
 800b7d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b7dc:	9303      	strlt	r3, [sp, #12]
 800b7de:	2300      	movge	r3, #0
 800b7e0:	2201      	movlt	r2, #1
 800b7e2:	bfac      	ite	ge
 800b7e4:	f8c8 3000 	strge.w	r3, [r8]
 800b7e8:	f8c8 2000 	strlt.w	r2, [r8]
 800b7ec:	4b9e      	ldr	r3, [pc, #632]	; (800ba68 <_dtoa_r+0x2f0>)
 800b7ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b7f2:	ea33 0308 	bics.w	r3, r3, r8
 800b7f6:	d11b      	bne.n	800b830 <_dtoa_r+0xb8>
 800b7f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b804:	4333      	orrs	r3, r6
 800b806:	f000 8593 	beq.w	800c330 <_dtoa_r+0xbb8>
 800b80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b80c:	b963      	cbnz	r3, 800b828 <_dtoa_r+0xb0>
 800b80e:	4b97      	ldr	r3, [pc, #604]	; (800ba6c <_dtoa_r+0x2f4>)
 800b810:	e027      	b.n	800b862 <_dtoa_r+0xea>
 800b812:	4b97      	ldr	r3, [pc, #604]	; (800ba70 <_dtoa_r+0x2f8>)
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	3308      	adds	r3, #8
 800b818:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	9800      	ldr	r0, [sp, #0]
 800b81e:	b013      	add	sp, #76	; 0x4c
 800b820:	ecbd 8b04 	vpop	{d8-d9}
 800b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b828:	4b90      	ldr	r3, [pc, #576]	; (800ba6c <_dtoa_r+0x2f4>)
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	3303      	adds	r3, #3
 800b82e:	e7f3      	b.n	800b818 <_dtoa_r+0xa0>
 800b830:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b834:	2200      	movs	r2, #0
 800b836:	ec51 0b17 	vmov	r0, r1, d7
 800b83a:	eeb0 8a47 	vmov.f32	s16, s14
 800b83e:	eef0 8a67 	vmov.f32	s17, s15
 800b842:	2300      	movs	r3, #0
 800b844:	f7f5 f960 	bl	8000b08 <__aeabi_dcmpeq>
 800b848:	4681      	mov	r9, r0
 800b84a:	b160      	cbz	r0, 800b866 <_dtoa_r+0xee>
 800b84c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b84e:	2301      	movs	r3, #1
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 8568 	beq.w	800c32a <_dtoa_r+0xbb2>
 800b85a:	4b86      	ldr	r3, [pc, #536]	; (800ba74 <_dtoa_r+0x2fc>)
 800b85c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	3b01      	subs	r3, #1
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	e7da      	b.n	800b81c <_dtoa_r+0xa4>
 800b866:	aa10      	add	r2, sp, #64	; 0x40
 800b868:	a911      	add	r1, sp, #68	; 0x44
 800b86a:	4620      	mov	r0, r4
 800b86c:	eeb0 0a48 	vmov.f32	s0, s16
 800b870:	eef0 0a68 	vmov.f32	s1, s17
 800b874:	f001 f9a6 	bl	800cbc4 <__d2b>
 800b878:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b87c:	4682      	mov	sl, r0
 800b87e:	2d00      	cmp	r5, #0
 800b880:	d07f      	beq.n	800b982 <_dtoa_r+0x20a>
 800b882:	ee18 3a90 	vmov	r3, s17
 800b886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b88a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b88e:	ec51 0b18 	vmov	r0, r1, d8
 800b892:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b89a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b89e:	4619      	mov	r1, r3
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4b75      	ldr	r3, [pc, #468]	; (800ba78 <_dtoa_r+0x300>)
 800b8a4:	f7f4 fd10 	bl	80002c8 <__aeabi_dsub>
 800b8a8:	a367      	add	r3, pc, #412	; (adr r3, 800ba48 <_dtoa_r+0x2d0>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fec3 	bl	8000638 <__aeabi_dmul>
 800b8b2:	a367      	add	r3, pc, #412	; (adr r3, 800ba50 <_dtoa_r+0x2d8>)
 800b8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b8:	f7f4 fd08 	bl	80002cc <__adddf3>
 800b8bc:	4606      	mov	r6, r0
 800b8be:	4628      	mov	r0, r5
 800b8c0:	460f      	mov	r7, r1
 800b8c2:	f7f4 fe4f 	bl	8000564 <__aeabi_i2d>
 800b8c6:	a364      	add	r3, pc, #400	; (adr r3, 800ba58 <_dtoa_r+0x2e0>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f7f4 feb4 	bl	8000638 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f7f4 fcf8 	bl	80002cc <__adddf3>
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	f7f5 f95a 	bl	8000b98 <__aeabi_d2iz>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4683      	mov	fp, r0
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f5 f915 	bl	8000b1c <__aeabi_dcmplt>
 800b8f2:	b148      	cbz	r0, 800b908 <_dtoa_r+0x190>
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	f7f4 fe35 	bl	8000564 <__aeabi_i2d>
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	463b      	mov	r3, r7
 800b8fe:	f7f5 f903 	bl	8000b08 <__aeabi_dcmpeq>
 800b902:	b908      	cbnz	r0, 800b908 <_dtoa_r+0x190>
 800b904:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b908:	f1bb 0f16 	cmp.w	fp, #22
 800b90c:	d857      	bhi.n	800b9be <_dtoa_r+0x246>
 800b90e:	4b5b      	ldr	r3, [pc, #364]	; (800ba7c <_dtoa_r+0x304>)
 800b910:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	ec51 0b18 	vmov	r0, r1, d8
 800b91c:	f7f5 f8fe 	bl	8000b1c <__aeabi_dcmplt>
 800b920:	2800      	cmp	r0, #0
 800b922:	d04e      	beq.n	800b9c2 <_dtoa_r+0x24a>
 800b924:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b928:	2300      	movs	r3, #0
 800b92a:	930c      	str	r3, [sp, #48]	; 0x30
 800b92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b92e:	1b5b      	subs	r3, r3, r5
 800b930:	1e5a      	subs	r2, r3, #1
 800b932:	bf45      	ittet	mi
 800b934:	f1c3 0301 	rsbmi	r3, r3, #1
 800b938:	9305      	strmi	r3, [sp, #20]
 800b93a:	2300      	movpl	r3, #0
 800b93c:	2300      	movmi	r3, #0
 800b93e:	9206      	str	r2, [sp, #24]
 800b940:	bf54      	ite	pl
 800b942:	9305      	strpl	r3, [sp, #20]
 800b944:	9306      	strmi	r3, [sp, #24]
 800b946:	f1bb 0f00 	cmp.w	fp, #0
 800b94a:	db3c      	blt.n	800b9c6 <_dtoa_r+0x24e>
 800b94c:	9b06      	ldr	r3, [sp, #24]
 800b94e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b952:	445b      	add	r3, fp
 800b954:	9306      	str	r3, [sp, #24]
 800b956:	2300      	movs	r3, #0
 800b958:	9308      	str	r3, [sp, #32]
 800b95a:	9b07      	ldr	r3, [sp, #28]
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	d868      	bhi.n	800ba32 <_dtoa_r+0x2ba>
 800b960:	2b05      	cmp	r3, #5
 800b962:	bfc4      	itt	gt
 800b964:	3b04      	subgt	r3, #4
 800b966:	9307      	strgt	r3, [sp, #28]
 800b968:	9b07      	ldr	r3, [sp, #28]
 800b96a:	f1a3 0302 	sub.w	r3, r3, #2
 800b96e:	bfcc      	ite	gt
 800b970:	2500      	movgt	r5, #0
 800b972:	2501      	movle	r5, #1
 800b974:	2b03      	cmp	r3, #3
 800b976:	f200 8085 	bhi.w	800ba84 <_dtoa_r+0x30c>
 800b97a:	e8df f003 	tbb	[pc, r3]
 800b97e:	3b2e      	.short	0x3b2e
 800b980:	5839      	.short	0x5839
 800b982:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b986:	441d      	add	r5, r3
 800b988:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b98c:	2b20      	cmp	r3, #32
 800b98e:	bfc1      	itttt	gt
 800b990:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b994:	fa08 f803 	lslgt.w	r8, r8, r3
 800b998:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b99c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b9a0:	bfd6      	itet	le
 800b9a2:	f1c3 0320 	rsble	r3, r3, #32
 800b9a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b9aa:	fa06 f003 	lslle.w	r0, r6, r3
 800b9ae:	f7f4 fdc9 	bl	8000544 <__aeabi_ui2d>
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b9b8:	3d01      	subs	r5, #1
 800b9ba:	920e      	str	r2, [sp, #56]	; 0x38
 800b9bc:	e76f      	b.n	800b89e <_dtoa_r+0x126>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e7b3      	b.n	800b92a <_dtoa_r+0x1b2>
 800b9c2:	900c      	str	r0, [sp, #48]	; 0x30
 800b9c4:	e7b2      	b.n	800b92c <_dtoa_r+0x1b4>
 800b9c6:	9b05      	ldr	r3, [sp, #20]
 800b9c8:	eba3 030b 	sub.w	r3, r3, fp
 800b9cc:	9305      	str	r3, [sp, #20]
 800b9ce:	f1cb 0300 	rsb	r3, fp, #0
 800b9d2:	9308      	str	r3, [sp, #32]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9d8:	e7bf      	b.n	800b95a <_dtoa_r+0x1e2>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc52      	bgt.n	800ba8a <_dtoa_r+0x312>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b9ee:	e00b      	b.n	800ba08 <_dtoa_r+0x290>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e7f3      	b.n	800b9dc <_dtoa_r+0x264>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9fa:	445b      	add	r3, fp
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	bfb8      	it	lt
 800ba06:	2301      	movlt	r3, #1
 800ba08:	69e0      	ldr	r0, [r4, #28]
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	2204      	movs	r2, #4
 800ba0e:	f102 0614 	add.w	r6, r2, #20
 800ba12:	429e      	cmp	r6, r3
 800ba14:	d93d      	bls.n	800ba92 <_dtoa_r+0x31a>
 800ba16:	6041      	str	r1, [r0, #4]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 fdb1 	bl	800c580 <_Balloc>
 800ba1e:	9000      	str	r0, [sp, #0]
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d139      	bne.n	800ba98 <_dtoa_r+0x320>
 800ba24:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <_dtoa_r+0x308>)
 800ba26:	4602      	mov	r2, r0
 800ba28:	f240 11af 	movw	r1, #431	; 0x1af
 800ba2c:	e6bd      	b.n	800b7aa <_dtoa_r+0x32>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e7e1      	b.n	800b9f6 <_dtoa_r+0x27e>
 800ba32:	2501      	movs	r5, #1
 800ba34:	2300      	movs	r3, #0
 800ba36:	9307      	str	r3, [sp, #28]
 800ba38:	9509      	str	r5, [sp, #36]	; 0x24
 800ba3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	9304      	str	r3, [sp, #16]
 800ba42:	2200      	movs	r2, #0
 800ba44:	2312      	movs	r3, #18
 800ba46:	e7d1      	b.n	800b9ec <_dtoa_r+0x274>
 800ba48:	636f4361 	.word	0x636f4361
 800ba4c:	3fd287a7 	.word	0x3fd287a7
 800ba50:	8b60c8b3 	.word	0x8b60c8b3
 800ba54:	3fc68a28 	.word	0x3fc68a28
 800ba58:	509f79fb 	.word	0x509f79fb
 800ba5c:	3fd34413 	.word	0x3fd34413
 800ba60:	0800e8b8 	.word	0x0800e8b8
 800ba64:	0800e8cf 	.word	0x0800e8cf
 800ba68:	7ff00000 	.word	0x7ff00000
 800ba6c:	0800e8b4 	.word	0x0800e8b4
 800ba70:	0800e8ab 	.word	0x0800e8ab
 800ba74:	0800e87e 	.word	0x0800e87e
 800ba78:	3ff80000 	.word	0x3ff80000
 800ba7c:	0800e9c0 	.word	0x0800e9c0
 800ba80:	0800e927 	.word	0x0800e927
 800ba84:	2301      	movs	r3, #1
 800ba86:	9309      	str	r3, [sp, #36]	; 0x24
 800ba88:	e7d7      	b.n	800ba3a <_dtoa_r+0x2c2>
 800ba8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	e7ba      	b.n	800ba08 <_dtoa_r+0x290>
 800ba92:	3101      	adds	r1, #1
 800ba94:	0052      	lsls	r2, r2, #1
 800ba96:	e7ba      	b.n	800ba0e <_dtoa_r+0x296>
 800ba98:	69e3      	ldr	r3, [r4, #28]
 800ba9a:	9a00      	ldr	r2, [sp, #0]
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	9b04      	ldr	r3, [sp, #16]
 800baa0:	2b0e      	cmp	r3, #14
 800baa2:	f200 80a8 	bhi.w	800bbf6 <_dtoa_r+0x47e>
 800baa6:	2d00      	cmp	r5, #0
 800baa8:	f000 80a5 	beq.w	800bbf6 <_dtoa_r+0x47e>
 800baac:	f1bb 0f00 	cmp.w	fp, #0
 800bab0:	dd38      	ble.n	800bb24 <_dtoa_r+0x3ac>
 800bab2:	4bc0      	ldr	r3, [pc, #768]	; (800bdb4 <_dtoa_r+0x63c>)
 800bab4:	f00b 020f 	and.w	r2, fp, #15
 800bab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800babc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bac0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bac4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bac8:	d019      	beq.n	800bafe <_dtoa_r+0x386>
 800baca:	4bbb      	ldr	r3, [pc, #748]	; (800bdb8 <_dtoa_r+0x640>)
 800bacc:	ec51 0b18 	vmov	r0, r1, d8
 800bad0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bad4:	f7f4 feda 	bl	800088c <__aeabi_ddiv>
 800bad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800badc:	f008 080f 	and.w	r8, r8, #15
 800bae0:	2503      	movs	r5, #3
 800bae2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bdb8 <_dtoa_r+0x640>
 800bae6:	f1b8 0f00 	cmp.w	r8, #0
 800baea:	d10a      	bne.n	800bb02 <_dtoa_r+0x38a>
 800baec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf0:	4632      	mov	r2, r6
 800baf2:	463b      	mov	r3, r7
 800baf4:	f7f4 feca 	bl	800088c <__aeabi_ddiv>
 800baf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafc:	e02b      	b.n	800bb56 <_dtoa_r+0x3de>
 800bafe:	2502      	movs	r5, #2
 800bb00:	e7ef      	b.n	800bae2 <_dtoa_r+0x36a>
 800bb02:	f018 0f01 	tst.w	r8, #1
 800bb06:	d008      	beq.n	800bb1a <_dtoa_r+0x3a2>
 800bb08:	4630      	mov	r0, r6
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb10:	f7f4 fd92 	bl	8000638 <__aeabi_dmul>
 800bb14:	3501      	adds	r5, #1
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb1e:	f109 0908 	add.w	r9, r9, #8
 800bb22:	e7e0      	b.n	800bae6 <_dtoa_r+0x36e>
 800bb24:	f000 809f 	beq.w	800bc66 <_dtoa_r+0x4ee>
 800bb28:	f1cb 0600 	rsb	r6, fp, #0
 800bb2c:	4ba1      	ldr	r3, [pc, #644]	; (800bdb4 <_dtoa_r+0x63c>)
 800bb2e:	4fa2      	ldr	r7, [pc, #648]	; (800bdb8 <_dtoa_r+0x640>)
 800bb30:	f006 020f 	and.w	r2, r6, #15
 800bb34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	ec51 0b18 	vmov	r0, r1, d8
 800bb40:	f7f4 fd7a 	bl	8000638 <__aeabi_dmul>
 800bb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb48:	1136      	asrs	r6, r6, #4
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	2502      	movs	r5, #2
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	d17e      	bne.n	800bc50 <_dtoa_r+0x4d8>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1d0      	bne.n	800baf8 <_dtoa_r+0x380>
 800bb56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 8084 	beq.w	800bc6a <_dtoa_r+0x4f2>
 800bb62:	4b96      	ldr	r3, [pc, #600]	; (800bdbc <_dtoa_r+0x644>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 ffd7 	bl	8000b1c <__aeabi_dcmplt>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d07b      	beq.n	800bc6a <_dtoa_r+0x4f2>
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d078      	beq.n	800bc6a <_dtoa_r+0x4f2>
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	dd39      	ble.n	800bbf2 <_dtoa_r+0x47a>
 800bb7e:	4b90      	ldr	r3, [pc, #576]	; (800bdc0 <_dtoa_r+0x648>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f7f4 fd57 	bl	8000638 <__aeabi_dmul>
 800bb8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb8e:	9e01      	ldr	r6, [sp, #4]
 800bb90:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bb94:	3501      	adds	r5, #1
 800bb96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f7f4 fce2 	bl	8000564 <__aeabi_i2d>
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	f7f4 fd48 	bl	8000638 <__aeabi_dmul>
 800bba8:	4b86      	ldr	r3, [pc, #536]	; (800bdc4 <_dtoa_r+0x64c>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f7f4 fb8e 	bl	80002cc <__adddf3>
 800bbb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb8:	9303      	str	r3, [sp, #12]
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d158      	bne.n	800bc70 <_dtoa_r+0x4f8>
 800bbbe:	4b82      	ldr	r3, [pc, #520]	; (800bdc8 <_dtoa_r+0x650>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	f7f4 fb7f 	bl	80002c8 <__aeabi_dsub>
 800bbca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbce:	4680      	mov	r8, r0
 800bbd0:	4689      	mov	r9, r1
 800bbd2:	f7f4 ffc1 	bl	8000b58 <__aeabi_dcmpgt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f040 8296 	bne.w	800c108 <_dtoa_r+0x990>
 800bbdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f7f4 ff98 	bl	8000b1c <__aeabi_dcmplt>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	f040 8289 	bne.w	800c104 <_dtoa_r+0x98c>
 800bbf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bbf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f2c0 814e 	blt.w	800be9a <_dtoa_r+0x722>
 800bbfe:	f1bb 0f0e 	cmp.w	fp, #14
 800bc02:	f300 814a 	bgt.w	800be9a <_dtoa_r+0x722>
 800bc06:	4b6b      	ldr	r3, [pc, #428]	; (800bdb4 <_dtoa_r+0x63c>)
 800bc08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f280 80dc 	bge.w	800bdd0 <_dtoa_r+0x658>
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f300 80d8 	bgt.w	800bdd0 <_dtoa_r+0x658>
 800bc20:	f040 826f 	bne.w	800c102 <_dtoa_r+0x98a>
 800bc24:	4b68      	ldr	r3, [pc, #416]	; (800bdc8 <_dtoa_r+0x650>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	4640      	mov	r0, r8
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	f7f4 fd04 	bl	8000638 <__aeabi_dmul>
 800bc30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc34:	f7f4 ff86 	bl	8000b44 <__aeabi_dcmpge>
 800bc38:	9e04      	ldr	r6, [sp, #16]
 800bc3a:	4637      	mov	r7, r6
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f040 8245 	bne.w	800c0cc <_dtoa_r+0x954>
 800bc42:	9d00      	ldr	r5, [sp, #0]
 800bc44:	2331      	movs	r3, #49	; 0x31
 800bc46:	f805 3b01 	strb.w	r3, [r5], #1
 800bc4a:	f10b 0b01 	add.w	fp, fp, #1
 800bc4e:	e241      	b.n	800c0d4 <_dtoa_r+0x95c>
 800bc50:	07f2      	lsls	r2, r6, #31
 800bc52:	d505      	bpl.n	800bc60 <_dtoa_r+0x4e8>
 800bc54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	3501      	adds	r5, #1
 800bc5e:	2301      	movs	r3, #1
 800bc60:	1076      	asrs	r6, r6, #1
 800bc62:	3708      	adds	r7, #8
 800bc64:	e773      	b.n	800bb4e <_dtoa_r+0x3d6>
 800bc66:	2502      	movs	r5, #2
 800bc68:	e775      	b.n	800bb56 <_dtoa_r+0x3de>
 800bc6a:	9e04      	ldr	r6, [sp, #16]
 800bc6c:	465f      	mov	r7, fp
 800bc6e:	e792      	b.n	800bb96 <_dtoa_r+0x41e>
 800bc70:	9900      	ldr	r1, [sp, #0]
 800bc72:	4b50      	ldr	r3, [pc, #320]	; (800bdb4 <_dtoa_r+0x63c>)
 800bc74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc78:	4431      	add	r1, r6
 800bc7a:	9102      	str	r1, [sp, #8]
 800bc7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc7e:	eeb0 9a47 	vmov.f32	s18, s14
 800bc82:	eef0 9a67 	vmov.f32	s19, s15
 800bc86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc8e:	2900      	cmp	r1, #0
 800bc90:	d044      	beq.n	800bd1c <_dtoa_r+0x5a4>
 800bc92:	494e      	ldr	r1, [pc, #312]	; (800bdcc <_dtoa_r+0x654>)
 800bc94:	2000      	movs	r0, #0
 800bc96:	f7f4 fdf9 	bl	800088c <__aeabi_ddiv>
 800bc9a:	ec53 2b19 	vmov	r2, r3, d9
 800bc9e:	f7f4 fb13 	bl	80002c8 <__aeabi_dsub>
 800bca2:	9d00      	ldr	r5, [sp, #0]
 800bca4:	ec41 0b19 	vmov	d9, r0, r1
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4640      	mov	r0, r8
 800bcac:	f7f4 ff74 	bl	8000b98 <__aeabi_d2iz>
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	f7f4 fc57 	bl	8000564 <__aeabi_i2d>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4640      	mov	r0, r8
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	f7f4 fb03 	bl	80002c8 <__aeabi_dsub>
 800bcc2:	3630      	adds	r6, #48	; 0x30
 800bcc4:	f805 6b01 	strb.w	r6, [r5], #1
 800bcc8:	ec53 2b19 	vmov	r2, r3, d9
 800bccc:	4680      	mov	r8, r0
 800bcce:	4689      	mov	r9, r1
 800bcd0:	f7f4 ff24 	bl	8000b1c <__aeabi_dcmplt>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d164      	bne.n	800bda2 <_dtoa_r+0x62a>
 800bcd8:	4642      	mov	r2, r8
 800bcda:	464b      	mov	r3, r9
 800bcdc:	4937      	ldr	r1, [pc, #220]	; (800bdbc <_dtoa_r+0x644>)
 800bcde:	2000      	movs	r0, #0
 800bce0:	f7f4 faf2 	bl	80002c8 <__aeabi_dsub>
 800bce4:	ec53 2b19 	vmov	r2, r3, d9
 800bce8:	f7f4 ff18 	bl	8000b1c <__aeabi_dcmplt>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	f040 80b6 	bne.w	800be5e <_dtoa_r+0x6e6>
 800bcf2:	9b02      	ldr	r3, [sp, #8]
 800bcf4:	429d      	cmp	r5, r3
 800bcf6:	f43f af7c 	beq.w	800bbf2 <_dtoa_r+0x47a>
 800bcfa:	4b31      	ldr	r3, [pc, #196]	; (800bdc0 <_dtoa_r+0x648>)
 800bcfc:	ec51 0b19 	vmov	r0, r1, d9
 800bd00:	2200      	movs	r2, #0
 800bd02:	f7f4 fc99 	bl	8000638 <__aeabi_dmul>
 800bd06:	4b2e      	ldr	r3, [pc, #184]	; (800bdc0 <_dtoa_r+0x648>)
 800bd08:	ec41 0b19 	vmov	d9, r0, r1
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	f7f4 fc91 	bl	8000638 <__aeabi_dmul>
 800bd16:	4680      	mov	r8, r0
 800bd18:	4689      	mov	r9, r1
 800bd1a:	e7c5      	b.n	800bca8 <_dtoa_r+0x530>
 800bd1c:	ec51 0b17 	vmov	r0, r1, d7
 800bd20:	f7f4 fc8a 	bl	8000638 <__aeabi_dmul>
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	9d00      	ldr	r5, [sp, #0]
 800bd28:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd2a:	ec41 0b19 	vmov	d9, r0, r1
 800bd2e:	4649      	mov	r1, r9
 800bd30:	4640      	mov	r0, r8
 800bd32:	f7f4 ff31 	bl	8000b98 <__aeabi_d2iz>
 800bd36:	4606      	mov	r6, r0
 800bd38:	f7f4 fc14 	bl	8000564 <__aeabi_i2d>
 800bd3c:	3630      	adds	r6, #48	; 0x30
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4640      	mov	r0, r8
 800bd44:	4649      	mov	r1, r9
 800bd46:	f7f4 fabf 	bl	80002c8 <__aeabi_dsub>
 800bd4a:	f805 6b01 	strb.w	r6, [r5], #1
 800bd4e:	9b02      	ldr	r3, [sp, #8]
 800bd50:	429d      	cmp	r5, r3
 800bd52:	4680      	mov	r8, r0
 800bd54:	4689      	mov	r9, r1
 800bd56:	f04f 0200 	mov.w	r2, #0
 800bd5a:	d124      	bne.n	800bda6 <_dtoa_r+0x62e>
 800bd5c:	4b1b      	ldr	r3, [pc, #108]	; (800bdcc <_dtoa_r+0x654>)
 800bd5e:	ec51 0b19 	vmov	r0, r1, d9
 800bd62:	f7f4 fab3 	bl	80002cc <__adddf3>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	f7f4 fef3 	bl	8000b58 <__aeabi_dcmpgt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d173      	bne.n	800be5e <_dtoa_r+0x6e6>
 800bd76:	ec53 2b19 	vmov	r2, r3, d9
 800bd7a:	4914      	ldr	r1, [pc, #80]	; (800bdcc <_dtoa_r+0x654>)
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	f7f4 faa3 	bl	80002c8 <__aeabi_dsub>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4640      	mov	r0, r8
 800bd88:	4649      	mov	r1, r9
 800bd8a:	f7f4 fec7 	bl	8000b1c <__aeabi_dcmplt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f43f af2f 	beq.w	800bbf2 <_dtoa_r+0x47a>
 800bd94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd96:	1e6b      	subs	r3, r5, #1
 800bd98:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd9e:	2b30      	cmp	r3, #48	; 0x30
 800bda0:	d0f8      	beq.n	800bd94 <_dtoa_r+0x61c>
 800bda2:	46bb      	mov	fp, r7
 800bda4:	e04a      	b.n	800be3c <_dtoa_r+0x6c4>
 800bda6:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <_dtoa_r+0x648>)
 800bda8:	f7f4 fc46 	bl	8000638 <__aeabi_dmul>
 800bdac:	4680      	mov	r8, r0
 800bdae:	4689      	mov	r9, r1
 800bdb0:	e7bd      	b.n	800bd2e <_dtoa_r+0x5b6>
 800bdb2:	bf00      	nop
 800bdb4:	0800e9c0 	.word	0x0800e9c0
 800bdb8:	0800e998 	.word	0x0800e998
 800bdbc:	3ff00000 	.word	0x3ff00000
 800bdc0:	40240000 	.word	0x40240000
 800bdc4:	401c0000 	.word	0x401c0000
 800bdc8:	40140000 	.word	0x40140000
 800bdcc:	3fe00000 	.word	0x3fe00000
 800bdd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bdd4:	9d00      	ldr	r5, [sp, #0]
 800bdd6:	4642      	mov	r2, r8
 800bdd8:	464b      	mov	r3, r9
 800bdda:	4630      	mov	r0, r6
 800bddc:	4639      	mov	r1, r7
 800bdde:	f7f4 fd55 	bl	800088c <__aeabi_ddiv>
 800bde2:	f7f4 fed9 	bl	8000b98 <__aeabi_d2iz>
 800bde6:	9001      	str	r0, [sp, #4]
 800bde8:	f7f4 fbbc 	bl	8000564 <__aeabi_i2d>
 800bdec:	4642      	mov	r2, r8
 800bdee:	464b      	mov	r3, r9
 800bdf0:	f7f4 fc22 	bl	8000638 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fa64 	bl	80002c8 <__aeabi_dsub>
 800be00:	9e01      	ldr	r6, [sp, #4]
 800be02:	9f04      	ldr	r7, [sp, #16]
 800be04:	3630      	adds	r6, #48	; 0x30
 800be06:	f805 6b01 	strb.w	r6, [r5], #1
 800be0a:	9e00      	ldr	r6, [sp, #0]
 800be0c:	1bae      	subs	r6, r5, r6
 800be0e:	42b7      	cmp	r7, r6
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	d134      	bne.n	800be80 <_dtoa_r+0x708>
 800be16:	f7f4 fa59 	bl	80002cc <__adddf3>
 800be1a:	4642      	mov	r2, r8
 800be1c:	464b      	mov	r3, r9
 800be1e:	4606      	mov	r6, r0
 800be20:	460f      	mov	r7, r1
 800be22:	f7f4 fe99 	bl	8000b58 <__aeabi_dcmpgt>
 800be26:	b9c8      	cbnz	r0, 800be5c <_dtoa_r+0x6e4>
 800be28:	4642      	mov	r2, r8
 800be2a:	464b      	mov	r3, r9
 800be2c:	4630      	mov	r0, r6
 800be2e:	4639      	mov	r1, r7
 800be30:	f7f4 fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 800be34:	b110      	cbz	r0, 800be3c <_dtoa_r+0x6c4>
 800be36:	9b01      	ldr	r3, [sp, #4]
 800be38:	07db      	lsls	r3, r3, #31
 800be3a:	d40f      	bmi.n	800be5c <_dtoa_r+0x6e4>
 800be3c:	4651      	mov	r1, sl
 800be3e:	4620      	mov	r0, r4
 800be40:	f000 fbde 	bl	800c600 <_Bfree>
 800be44:	2300      	movs	r3, #0
 800be46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be48:	702b      	strb	r3, [r5, #0]
 800be4a:	f10b 0301 	add.w	r3, fp, #1
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be52:	2b00      	cmp	r3, #0
 800be54:	f43f ace2 	beq.w	800b81c <_dtoa_r+0xa4>
 800be58:	601d      	str	r5, [r3, #0]
 800be5a:	e4df      	b.n	800b81c <_dtoa_r+0xa4>
 800be5c:	465f      	mov	r7, fp
 800be5e:	462b      	mov	r3, r5
 800be60:	461d      	mov	r5, r3
 800be62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be66:	2a39      	cmp	r2, #57	; 0x39
 800be68:	d106      	bne.n	800be78 <_dtoa_r+0x700>
 800be6a:	9a00      	ldr	r2, [sp, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d1f7      	bne.n	800be60 <_dtoa_r+0x6e8>
 800be70:	9900      	ldr	r1, [sp, #0]
 800be72:	2230      	movs	r2, #48	; 0x30
 800be74:	3701      	adds	r7, #1
 800be76:	700a      	strb	r2, [r1, #0]
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	3201      	adds	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	e790      	b.n	800bda2 <_dtoa_r+0x62a>
 800be80:	4ba3      	ldr	r3, [pc, #652]	; (800c110 <_dtoa_r+0x998>)
 800be82:	2200      	movs	r2, #0
 800be84:	f7f4 fbd8 	bl	8000638 <__aeabi_dmul>
 800be88:	2200      	movs	r2, #0
 800be8a:	2300      	movs	r3, #0
 800be8c:	4606      	mov	r6, r0
 800be8e:	460f      	mov	r7, r1
 800be90:	f7f4 fe3a 	bl	8000b08 <__aeabi_dcmpeq>
 800be94:	2800      	cmp	r0, #0
 800be96:	d09e      	beq.n	800bdd6 <_dtoa_r+0x65e>
 800be98:	e7d0      	b.n	800be3c <_dtoa_r+0x6c4>
 800be9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be9c:	2a00      	cmp	r2, #0
 800be9e:	f000 80ca 	beq.w	800c036 <_dtoa_r+0x8be>
 800bea2:	9a07      	ldr	r2, [sp, #28]
 800bea4:	2a01      	cmp	r2, #1
 800bea6:	f300 80ad 	bgt.w	800c004 <_dtoa_r+0x88c>
 800beaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beac:	2a00      	cmp	r2, #0
 800beae:	f000 80a5 	beq.w	800bffc <_dtoa_r+0x884>
 800beb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800beb6:	9e08      	ldr	r6, [sp, #32]
 800beb8:	9d05      	ldr	r5, [sp, #20]
 800beba:	9a05      	ldr	r2, [sp, #20]
 800bebc:	441a      	add	r2, r3
 800bebe:	9205      	str	r2, [sp, #20]
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	2101      	movs	r1, #1
 800bec4:	441a      	add	r2, r3
 800bec6:	4620      	mov	r0, r4
 800bec8:	9206      	str	r2, [sp, #24]
 800beca:	f000 fc4f 	bl	800c76c <__i2b>
 800bece:	4607      	mov	r7, r0
 800bed0:	b165      	cbz	r5, 800beec <_dtoa_r+0x774>
 800bed2:	9b06      	ldr	r3, [sp, #24]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dd09      	ble.n	800beec <_dtoa_r+0x774>
 800bed8:	42ab      	cmp	r3, r5
 800beda:	9a05      	ldr	r2, [sp, #20]
 800bedc:	bfa8      	it	ge
 800bede:	462b      	movge	r3, r5
 800bee0:	1ad2      	subs	r2, r2, r3
 800bee2:	9205      	str	r2, [sp, #20]
 800bee4:	9a06      	ldr	r2, [sp, #24]
 800bee6:	1aed      	subs	r5, r5, r3
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	9306      	str	r3, [sp, #24]
 800beec:	9b08      	ldr	r3, [sp, #32]
 800beee:	b1f3      	cbz	r3, 800bf2e <_dtoa_r+0x7b6>
 800bef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 80a3 	beq.w	800c03e <_dtoa_r+0x8c6>
 800bef8:	2e00      	cmp	r6, #0
 800befa:	dd10      	ble.n	800bf1e <_dtoa_r+0x7a6>
 800befc:	4639      	mov	r1, r7
 800befe:	4632      	mov	r2, r6
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fcf3 	bl	800c8ec <__pow5mult>
 800bf06:	4652      	mov	r2, sl
 800bf08:	4601      	mov	r1, r0
 800bf0a:	4607      	mov	r7, r0
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fc43 	bl	800c798 <__multiply>
 800bf12:	4651      	mov	r1, sl
 800bf14:	4680      	mov	r8, r0
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 fb72 	bl	800c600 <_Bfree>
 800bf1c:	46c2      	mov	sl, r8
 800bf1e:	9b08      	ldr	r3, [sp, #32]
 800bf20:	1b9a      	subs	r2, r3, r6
 800bf22:	d004      	beq.n	800bf2e <_dtoa_r+0x7b6>
 800bf24:	4651      	mov	r1, sl
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 fce0 	bl	800c8ec <__pow5mult>
 800bf2c:	4682      	mov	sl, r0
 800bf2e:	2101      	movs	r1, #1
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 fc1b 	bl	800c76c <__i2b>
 800bf36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	f340 8081 	ble.w	800c042 <_dtoa_r+0x8ca>
 800bf40:	461a      	mov	r2, r3
 800bf42:	4601      	mov	r1, r0
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fcd1 	bl	800c8ec <__pow5mult>
 800bf4a:	9b07      	ldr	r3, [sp, #28]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	4606      	mov	r6, r0
 800bf50:	dd7a      	ble.n	800c048 <_dtoa_r+0x8d0>
 800bf52:	f04f 0800 	mov.w	r8, #0
 800bf56:	6933      	ldr	r3, [r6, #16]
 800bf58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf5c:	6918      	ldr	r0, [r3, #16]
 800bf5e:	f000 fbb7 	bl	800c6d0 <__hi0bits>
 800bf62:	f1c0 0020 	rsb	r0, r0, #32
 800bf66:	9b06      	ldr	r3, [sp, #24]
 800bf68:	4418      	add	r0, r3
 800bf6a:	f010 001f 	ands.w	r0, r0, #31
 800bf6e:	f000 8094 	beq.w	800c09a <_dtoa_r+0x922>
 800bf72:	f1c0 0320 	rsb	r3, r0, #32
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	f340 8085 	ble.w	800c086 <_dtoa_r+0x90e>
 800bf7c:	9b05      	ldr	r3, [sp, #20]
 800bf7e:	f1c0 001c 	rsb	r0, r0, #28
 800bf82:	4403      	add	r3, r0
 800bf84:	9305      	str	r3, [sp, #20]
 800bf86:	9b06      	ldr	r3, [sp, #24]
 800bf88:	4403      	add	r3, r0
 800bf8a:	4405      	add	r5, r0
 800bf8c:	9306      	str	r3, [sp, #24]
 800bf8e:	9b05      	ldr	r3, [sp, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd05      	ble.n	800bfa0 <_dtoa_r+0x828>
 800bf94:	4651      	mov	r1, sl
 800bf96:	461a      	mov	r2, r3
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fd01 	bl	800c9a0 <__lshift>
 800bf9e:	4682      	mov	sl, r0
 800bfa0:	9b06      	ldr	r3, [sp, #24]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dd05      	ble.n	800bfb2 <_dtoa_r+0x83a>
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 fcf8 	bl	800c9a0 <__lshift>
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d072      	beq.n	800c09e <_dtoa_r+0x926>
 800bfb8:	4631      	mov	r1, r6
 800bfba:	4650      	mov	r0, sl
 800bfbc:	f000 fd5c 	bl	800ca78 <__mcmp>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	da6c      	bge.n	800c09e <_dtoa_r+0x926>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4651      	mov	r1, sl
 800bfc8:	220a      	movs	r2, #10
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fb3a 	bl	800c644 <__multadd>
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfd6:	4682      	mov	sl, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 81b0 	beq.w	800c33e <_dtoa_r+0xbc6>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	220a      	movs	r2, #10
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 fb2d 	bl	800c644 <__multadd>
 800bfea:	9b01      	ldr	r3, [sp, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	4607      	mov	r7, r0
 800bff0:	f300 8096 	bgt.w	800c120 <_dtoa_r+0x9a8>
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	dc59      	bgt.n	800c0ae <_dtoa_r+0x936>
 800bffa:	e091      	b.n	800c120 <_dtoa_r+0x9a8>
 800bffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c002:	e758      	b.n	800beb6 <_dtoa_r+0x73e>
 800c004:	9b04      	ldr	r3, [sp, #16]
 800c006:	1e5e      	subs	r6, r3, #1
 800c008:	9b08      	ldr	r3, [sp, #32]
 800c00a:	42b3      	cmp	r3, r6
 800c00c:	bfbf      	itttt	lt
 800c00e:	9b08      	ldrlt	r3, [sp, #32]
 800c010:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c012:	9608      	strlt	r6, [sp, #32]
 800c014:	1af3      	sublt	r3, r6, r3
 800c016:	bfb4      	ite	lt
 800c018:	18d2      	addlt	r2, r2, r3
 800c01a:	1b9e      	subge	r6, r3, r6
 800c01c:	9b04      	ldr	r3, [sp, #16]
 800c01e:	bfbc      	itt	lt
 800c020:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c022:	2600      	movlt	r6, #0
 800c024:	2b00      	cmp	r3, #0
 800c026:	bfb7      	itett	lt
 800c028:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c02c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c030:	1a9d      	sublt	r5, r3, r2
 800c032:	2300      	movlt	r3, #0
 800c034:	e741      	b.n	800beba <_dtoa_r+0x742>
 800c036:	9e08      	ldr	r6, [sp, #32]
 800c038:	9d05      	ldr	r5, [sp, #20]
 800c03a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c03c:	e748      	b.n	800bed0 <_dtoa_r+0x758>
 800c03e:	9a08      	ldr	r2, [sp, #32]
 800c040:	e770      	b.n	800bf24 <_dtoa_r+0x7ac>
 800c042:	9b07      	ldr	r3, [sp, #28]
 800c044:	2b01      	cmp	r3, #1
 800c046:	dc19      	bgt.n	800c07c <_dtoa_r+0x904>
 800c048:	9b02      	ldr	r3, [sp, #8]
 800c04a:	b9bb      	cbnz	r3, 800c07c <_dtoa_r+0x904>
 800c04c:	9b03      	ldr	r3, [sp, #12]
 800c04e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c052:	b99b      	cbnz	r3, 800c07c <_dtoa_r+0x904>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c05a:	0d1b      	lsrs	r3, r3, #20
 800c05c:	051b      	lsls	r3, r3, #20
 800c05e:	b183      	cbz	r3, 800c082 <_dtoa_r+0x90a>
 800c060:	9b05      	ldr	r3, [sp, #20]
 800c062:	3301      	adds	r3, #1
 800c064:	9305      	str	r3, [sp, #20]
 800c066:	9b06      	ldr	r3, [sp, #24]
 800c068:	3301      	adds	r3, #1
 800c06a:	9306      	str	r3, [sp, #24]
 800c06c:	f04f 0801 	mov.w	r8, #1
 800c070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c072:	2b00      	cmp	r3, #0
 800c074:	f47f af6f 	bne.w	800bf56 <_dtoa_r+0x7de>
 800c078:	2001      	movs	r0, #1
 800c07a:	e774      	b.n	800bf66 <_dtoa_r+0x7ee>
 800c07c:	f04f 0800 	mov.w	r8, #0
 800c080:	e7f6      	b.n	800c070 <_dtoa_r+0x8f8>
 800c082:	4698      	mov	r8, r3
 800c084:	e7f4      	b.n	800c070 <_dtoa_r+0x8f8>
 800c086:	d082      	beq.n	800bf8e <_dtoa_r+0x816>
 800c088:	9a05      	ldr	r2, [sp, #20]
 800c08a:	331c      	adds	r3, #28
 800c08c:	441a      	add	r2, r3
 800c08e:	9205      	str	r2, [sp, #20]
 800c090:	9a06      	ldr	r2, [sp, #24]
 800c092:	441a      	add	r2, r3
 800c094:	441d      	add	r5, r3
 800c096:	9206      	str	r2, [sp, #24]
 800c098:	e779      	b.n	800bf8e <_dtoa_r+0x816>
 800c09a:	4603      	mov	r3, r0
 800c09c:	e7f4      	b.n	800c088 <_dtoa_r+0x910>
 800c09e:	9b04      	ldr	r3, [sp, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dc37      	bgt.n	800c114 <_dtoa_r+0x99c>
 800c0a4:	9b07      	ldr	r3, [sp, #28]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	dd34      	ble.n	800c114 <_dtoa_r+0x99c>
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	b963      	cbnz	r3, 800c0cc <_dtoa_r+0x954>
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	2205      	movs	r2, #5
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fac4 	bl	800c644 <__multadd>
 800c0bc:	4601      	mov	r1, r0
 800c0be:	4606      	mov	r6, r0
 800c0c0:	4650      	mov	r0, sl
 800c0c2:	f000 fcd9 	bl	800ca78 <__mcmp>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f73f adbb 	bgt.w	800bc42 <_dtoa_r+0x4ca>
 800c0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ce:	9d00      	ldr	r5, [sp, #0]
 800c0d0:	ea6f 0b03 	mvn.w	fp, r3
 800c0d4:	f04f 0800 	mov.w	r8, #0
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 fa90 	bl	800c600 <_Bfree>
 800c0e0:	2f00      	cmp	r7, #0
 800c0e2:	f43f aeab 	beq.w	800be3c <_dtoa_r+0x6c4>
 800c0e6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ea:	d005      	beq.n	800c0f8 <_dtoa_r+0x980>
 800c0ec:	45b8      	cmp	r8, r7
 800c0ee:	d003      	beq.n	800c0f8 <_dtoa_r+0x980>
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fa84 	bl	800c600 <_Bfree>
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 fa80 	bl	800c600 <_Bfree>
 800c100:	e69c      	b.n	800be3c <_dtoa_r+0x6c4>
 800c102:	2600      	movs	r6, #0
 800c104:	4637      	mov	r7, r6
 800c106:	e7e1      	b.n	800c0cc <_dtoa_r+0x954>
 800c108:	46bb      	mov	fp, r7
 800c10a:	4637      	mov	r7, r6
 800c10c:	e599      	b.n	800bc42 <_dtoa_r+0x4ca>
 800c10e:	bf00      	nop
 800c110:	40240000 	.word	0x40240000
 800c114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c116:	2b00      	cmp	r3, #0
 800c118:	f000 80c8 	beq.w	800c2ac <_dtoa_r+0xb34>
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	2d00      	cmp	r5, #0
 800c122:	dd05      	ble.n	800c130 <_dtoa_r+0x9b8>
 800c124:	4639      	mov	r1, r7
 800c126:	462a      	mov	r2, r5
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 fc39 	bl	800c9a0 <__lshift>
 800c12e:	4607      	mov	r7, r0
 800c130:	f1b8 0f00 	cmp.w	r8, #0
 800c134:	d05b      	beq.n	800c1ee <_dtoa_r+0xa76>
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fa21 	bl	800c580 <_Balloc>
 800c13e:	4605      	mov	r5, r0
 800c140:	b928      	cbnz	r0, 800c14e <_dtoa_r+0x9d6>
 800c142:	4b83      	ldr	r3, [pc, #524]	; (800c350 <_dtoa_r+0xbd8>)
 800c144:	4602      	mov	r2, r0
 800c146:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c14a:	f7ff bb2e 	b.w	800b7aa <_dtoa_r+0x32>
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	3202      	adds	r2, #2
 800c152:	0092      	lsls	r2, r2, #2
 800c154:	f107 010c 	add.w	r1, r7, #12
 800c158:	300c      	adds	r0, #12
 800c15a:	f7ff fa74 	bl	800b646 <memcpy>
 800c15e:	2201      	movs	r2, #1
 800c160:	4629      	mov	r1, r5
 800c162:	4620      	mov	r0, r4
 800c164:	f000 fc1c 	bl	800c9a0 <__lshift>
 800c168:	9b00      	ldr	r3, [sp, #0]
 800c16a:	3301      	adds	r3, #1
 800c16c:	9304      	str	r3, [sp, #16]
 800c16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c172:	4413      	add	r3, r2
 800c174:	9308      	str	r3, [sp, #32]
 800c176:	9b02      	ldr	r3, [sp, #8]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	46b8      	mov	r8, r7
 800c17e:	9306      	str	r3, [sp, #24]
 800c180:	4607      	mov	r7, r0
 800c182:	9b04      	ldr	r3, [sp, #16]
 800c184:	4631      	mov	r1, r6
 800c186:	3b01      	subs	r3, #1
 800c188:	4650      	mov	r0, sl
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	f7ff fa69 	bl	800b662 <quorem>
 800c190:	4641      	mov	r1, r8
 800c192:	9002      	str	r0, [sp, #8]
 800c194:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c198:	4650      	mov	r0, sl
 800c19a:	f000 fc6d 	bl	800ca78 <__mcmp>
 800c19e:	463a      	mov	r2, r7
 800c1a0:	9005      	str	r0, [sp, #20]
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 fc83 	bl	800cab0 <__mdiff>
 800c1aa:	68c2      	ldr	r2, [r0, #12]
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	bb02      	cbnz	r2, 800c1f2 <_dtoa_r+0xa7a>
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	f000 fc60 	bl	800ca78 <__mcmp>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	4620      	mov	r0, r4
 800c1be:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c0:	f000 fa1e 	bl	800c600 <_Bfree>
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1c8:	9d04      	ldr	r5, [sp, #16]
 800c1ca:	ea43 0102 	orr.w	r1, r3, r2
 800c1ce:	9b06      	ldr	r3, [sp, #24]
 800c1d0:	4319      	orrs	r1, r3
 800c1d2:	d110      	bne.n	800c1f6 <_dtoa_r+0xa7e>
 800c1d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1d8:	d029      	beq.n	800c22e <_dtoa_r+0xab6>
 800c1da:	9b05      	ldr	r3, [sp, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	dd02      	ble.n	800c1e6 <_dtoa_r+0xa6e>
 800c1e0:	9b02      	ldr	r3, [sp, #8]
 800c1e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	f883 9000 	strb.w	r9, [r3]
 800c1ec:	e774      	b.n	800c0d8 <_dtoa_r+0x960>
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	e7ba      	b.n	800c168 <_dtoa_r+0x9f0>
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	e7e1      	b.n	800c1ba <_dtoa_r+0xa42>
 800c1f6:	9b05      	ldr	r3, [sp, #20]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	db04      	blt.n	800c206 <_dtoa_r+0xa8e>
 800c1fc:	9907      	ldr	r1, [sp, #28]
 800c1fe:	430b      	orrs	r3, r1
 800c200:	9906      	ldr	r1, [sp, #24]
 800c202:	430b      	orrs	r3, r1
 800c204:	d120      	bne.n	800c248 <_dtoa_r+0xad0>
 800c206:	2a00      	cmp	r2, #0
 800c208:	dded      	ble.n	800c1e6 <_dtoa_r+0xa6e>
 800c20a:	4651      	mov	r1, sl
 800c20c:	2201      	movs	r2, #1
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 fbc6 	bl	800c9a0 <__lshift>
 800c214:	4631      	mov	r1, r6
 800c216:	4682      	mov	sl, r0
 800c218:	f000 fc2e 	bl	800ca78 <__mcmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	dc03      	bgt.n	800c228 <_dtoa_r+0xab0>
 800c220:	d1e1      	bne.n	800c1e6 <_dtoa_r+0xa6e>
 800c222:	f019 0f01 	tst.w	r9, #1
 800c226:	d0de      	beq.n	800c1e6 <_dtoa_r+0xa6e>
 800c228:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c22c:	d1d8      	bne.n	800c1e0 <_dtoa_r+0xa68>
 800c22e:	9a01      	ldr	r2, [sp, #4]
 800c230:	2339      	movs	r3, #57	; 0x39
 800c232:	7013      	strb	r3, [r2, #0]
 800c234:	462b      	mov	r3, r5
 800c236:	461d      	mov	r5, r3
 800c238:	3b01      	subs	r3, #1
 800c23a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c23e:	2a39      	cmp	r2, #57	; 0x39
 800c240:	d06c      	beq.n	800c31c <_dtoa_r+0xba4>
 800c242:	3201      	adds	r2, #1
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	e747      	b.n	800c0d8 <_dtoa_r+0x960>
 800c248:	2a00      	cmp	r2, #0
 800c24a:	dd07      	ble.n	800c25c <_dtoa_r+0xae4>
 800c24c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c250:	d0ed      	beq.n	800c22e <_dtoa_r+0xab6>
 800c252:	9a01      	ldr	r2, [sp, #4]
 800c254:	f109 0301 	add.w	r3, r9, #1
 800c258:	7013      	strb	r3, [r2, #0]
 800c25a:	e73d      	b.n	800c0d8 <_dtoa_r+0x960>
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	9a08      	ldr	r2, [sp, #32]
 800c260:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c264:	4293      	cmp	r3, r2
 800c266:	d043      	beq.n	800c2f0 <_dtoa_r+0xb78>
 800c268:	4651      	mov	r1, sl
 800c26a:	2300      	movs	r3, #0
 800c26c:	220a      	movs	r2, #10
 800c26e:	4620      	mov	r0, r4
 800c270:	f000 f9e8 	bl	800c644 <__multadd>
 800c274:	45b8      	cmp	r8, r7
 800c276:	4682      	mov	sl, r0
 800c278:	f04f 0300 	mov.w	r3, #0
 800c27c:	f04f 020a 	mov.w	r2, #10
 800c280:	4641      	mov	r1, r8
 800c282:	4620      	mov	r0, r4
 800c284:	d107      	bne.n	800c296 <_dtoa_r+0xb1e>
 800c286:	f000 f9dd 	bl	800c644 <__multadd>
 800c28a:	4680      	mov	r8, r0
 800c28c:	4607      	mov	r7, r0
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	3301      	adds	r3, #1
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	e775      	b.n	800c182 <_dtoa_r+0xa0a>
 800c296:	f000 f9d5 	bl	800c644 <__multadd>
 800c29a:	4639      	mov	r1, r7
 800c29c:	4680      	mov	r8, r0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	220a      	movs	r2, #10
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 f9ce 	bl	800c644 <__multadd>
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	e7f0      	b.n	800c28e <_dtoa_r+0xb16>
 800c2ac:	9b04      	ldr	r3, [sp, #16]
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	9d00      	ldr	r5, [sp, #0]
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4650      	mov	r0, sl
 800c2b6:	f7ff f9d4 	bl	800b662 <quorem>
 800c2ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c2be:	9b00      	ldr	r3, [sp, #0]
 800c2c0:	f805 9b01 	strb.w	r9, [r5], #1
 800c2c4:	1aea      	subs	r2, r5, r3
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	dd07      	ble.n	800c2dc <_dtoa_r+0xb64>
 800c2cc:	4651      	mov	r1, sl
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 f9b6 	bl	800c644 <__multadd>
 800c2d8:	4682      	mov	sl, r0
 800c2da:	e7ea      	b.n	800c2b2 <_dtoa_r+0xb3a>
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bfc8      	it	gt
 800c2e2:	461d      	movgt	r5, r3
 800c2e4:	9b00      	ldr	r3, [sp, #0]
 800c2e6:	bfd8      	it	le
 800c2e8:	2501      	movle	r5, #1
 800c2ea:	441d      	add	r5, r3
 800c2ec:	f04f 0800 	mov.w	r8, #0
 800c2f0:	4651      	mov	r1, sl
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f000 fb53 	bl	800c9a0 <__lshift>
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4682      	mov	sl, r0
 800c2fe:	f000 fbbb 	bl	800ca78 <__mcmp>
 800c302:	2800      	cmp	r0, #0
 800c304:	dc96      	bgt.n	800c234 <_dtoa_r+0xabc>
 800c306:	d102      	bne.n	800c30e <_dtoa_r+0xb96>
 800c308:	f019 0f01 	tst.w	r9, #1
 800c30c:	d192      	bne.n	800c234 <_dtoa_r+0xabc>
 800c30e:	462b      	mov	r3, r5
 800c310:	461d      	mov	r5, r3
 800c312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c316:	2a30      	cmp	r2, #48	; 0x30
 800c318:	d0fa      	beq.n	800c310 <_dtoa_r+0xb98>
 800c31a:	e6dd      	b.n	800c0d8 <_dtoa_r+0x960>
 800c31c:	9a00      	ldr	r2, [sp, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d189      	bne.n	800c236 <_dtoa_r+0xabe>
 800c322:	f10b 0b01 	add.w	fp, fp, #1
 800c326:	2331      	movs	r3, #49	; 0x31
 800c328:	e796      	b.n	800c258 <_dtoa_r+0xae0>
 800c32a:	4b0a      	ldr	r3, [pc, #40]	; (800c354 <_dtoa_r+0xbdc>)
 800c32c:	f7ff ba99 	b.w	800b862 <_dtoa_r+0xea>
 800c330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c332:	2b00      	cmp	r3, #0
 800c334:	f47f aa6d 	bne.w	800b812 <_dtoa_r+0x9a>
 800c338:	4b07      	ldr	r3, [pc, #28]	; (800c358 <_dtoa_r+0xbe0>)
 800c33a:	f7ff ba92 	b.w	800b862 <_dtoa_r+0xea>
 800c33e:	9b01      	ldr	r3, [sp, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	dcb5      	bgt.n	800c2b0 <_dtoa_r+0xb38>
 800c344:	9b07      	ldr	r3, [sp, #28]
 800c346:	2b02      	cmp	r3, #2
 800c348:	f73f aeb1 	bgt.w	800c0ae <_dtoa_r+0x936>
 800c34c:	e7b0      	b.n	800c2b0 <_dtoa_r+0xb38>
 800c34e:	bf00      	nop
 800c350:	0800e927 	.word	0x0800e927
 800c354:	0800e87d 	.word	0x0800e87d
 800c358:	0800e8ab 	.word	0x0800e8ab

0800c35c <_free_r>:
 800c35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c35e:	2900      	cmp	r1, #0
 800c360:	d044      	beq.n	800c3ec <_free_r+0x90>
 800c362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c366:	9001      	str	r0, [sp, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f1a1 0404 	sub.w	r4, r1, #4
 800c36e:	bfb8      	it	lt
 800c370:	18e4      	addlt	r4, r4, r3
 800c372:	f000 f8f9 	bl	800c568 <__malloc_lock>
 800c376:	4a1e      	ldr	r2, [pc, #120]	; (800c3f0 <_free_r+0x94>)
 800c378:	9801      	ldr	r0, [sp, #4]
 800c37a:	6813      	ldr	r3, [r2, #0]
 800c37c:	b933      	cbnz	r3, 800c38c <_free_r+0x30>
 800c37e:	6063      	str	r3, [r4, #4]
 800c380:	6014      	str	r4, [r2, #0]
 800c382:	b003      	add	sp, #12
 800c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c388:	f000 b8f4 	b.w	800c574 <__malloc_unlock>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d908      	bls.n	800c3a2 <_free_r+0x46>
 800c390:	6825      	ldr	r5, [r4, #0]
 800c392:	1961      	adds	r1, r4, r5
 800c394:	428b      	cmp	r3, r1
 800c396:	bf01      	itttt	eq
 800c398:	6819      	ldreq	r1, [r3, #0]
 800c39a:	685b      	ldreq	r3, [r3, #4]
 800c39c:	1949      	addeq	r1, r1, r5
 800c39e:	6021      	streq	r1, [r4, #0]
 800c3a0:	e7ed      	b.n	800c37e <_free_r+0x22>
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	b10b      	cbz	r3, 800c3ac <_free_r+0x50>
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	d9fa      	bls.n	800c3a2 <_free_r+0x46>
 800c3ac:	6811      	ldr	r1, [r2, #0]
 800c3ae:	1855      	adds	r5, r2, r1
 800c3b0:	42a5      	cmp	r5, r4
 800c3b2:	d10b      	bne.n	800c3cc <_free_r+0x70>
 800c3b4:	6824      	ldr	r4, [r4, #0]
 800c3b6:	4421      	add	r1, r4
 800c3b8:	1854      	adds	r4, r2, r1
 800c3ba:	42a3      	cmp	r3, r4
 800c3bc:	6011      	str	r1, [r2, #0]
 800c3be:	d1e0      	bne.n	800c382 <_free_r+0x26>
 800c3c0:	681c      	ldr	r4, [r3, #0]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	6053      	str	r3, [r2, #4]
 800c3c6:	440c      	add	r4, r1
 800c3c8:	6014      	str	r4, [r2, #0]
 800c3ca:	e7da      	b.n	800c382 <_free_r+0x26>
 800c3cc:	d902      	bls.n	800c3d4 <_free_r+0x78>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	6003      	str	r3, [r0, #0]
 800c3d2:	e7d6      	b.n	800c382 <_free_r+0x26>
 800c3d4:	6825      	ldr	r5, [r4, #0]
 800c3d6:	1961      	adds	r1, r4, r5
 800c3d8:	428b      	cmp	r3, r1
 800c3da:	bf04      	itt	eq
 800c3dc:	6819      	ldreq	r1, [r3, #0]
 800c3de:	685b      	ldreq	r3, [r3, #4]
 800c3e0:	6063      	str	r3, [r4, #4]
 800c3e2:	bf04      	itt	eq
 800c3e4:	1949      	addeq	r1, r1, r5
 800c3e6:	6021      	streq	r1, [r4, #0]
 800c3e8:	6054      	str	r4, [r2, #4]
 800c3ea:	e7ca      	b.n	800c382 <_free_r+0x26>
 800c3ec:	b003      	add	sp, #12
 800c3ee:	bd30      	pop	{r4, r5, pc}
 800c3f0:	20005334 	.word	0x20005334

0800c3f4 <malloc>:
 800c3f4:	4b02      	ldr	r3, [pc, #8]	; (800c400 <malloc+0xc>)
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	6818      	ldr	r0, [r3, #0]
 800c3fa:	f000 b823 	b.w	800c444 <_malloc_r>
 800c3fe:	bf00      	nop
 800c400:	200001dc 	.word	0x200001dc

0800c404 <sbrk_aligned>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4e0e      	ldr	r6, [pc, #56]	; (800c440 <sbrk_aligned+0x3c>)
 800c408:	460c      	mov	r4, r1
 800c40a:	6831      	ldr	r1, [r6, #0]
 800c40c:	4605      	mov	r5, r0
 800c40e:	b911      	cbnz	r1, 800c416 <sbrk_aligned+0x12>
 800c410:	f000 fe60 	bl	800d0d4 <_sbrk_r>
 800c414:	6030      	str	r0, [r6, #0]
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f000 fe5b 	bl	800d0d4 <_sbrk_r>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d00a      	beq.n	800c438 <sbrk_aligned+0x34>
 800c422:	1cc4      	adds	r4, r0, #3
 800c424:	f024 0403 	bic.w	r4, r4, #3
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d007      	beq.n	800c43c <sbrk_aligned+0x38>
 800c42c:	1a21      	subs	r1, r4, r0
 800c42e:	4628      	mov	r0, r5
 800c430:	f000 fe50 	bl	800d0d4 <_sbrk_r>
 800c434:	3001      	adds	r0, #1
 800c436:	d101      	bne.n	800c43c <sbrk_aligned+0x38>
 800c438:	f04f 34ff 	mov.w	r4, #4294967295
 800c43c:	4620      	mov	r0, r4
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	20005338 	.word	0x20005338

0800c444 <_malloc_r>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	1ccd      	adds	r5, r1, #3
 800c44a:	f025 0503 	bic.w	r5, r5, #3
 800c44e:	3508      	adds	r5, #8
 800c450:	2d0c      	cmp	r5, #12
 800c452:	bf38      	it	cc
 800c454:	250c      	movcc	r5, #12
 800c456:	2d00      	cmp	r5, #0
 800c458:	4607      	mov	r7, r0
 800c45a:	db01      	blt.n	800c460 <_malloc_r+0x1c>
 800c45c:	42a9      	cmp	r1, r5
 800c45e:	d905      	bls.n	800c46c <_malloc_r+0x28>
 800c460:	230c      	movs	r3, #12
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	2600      	movs	r6, #0
 800c466:	4630      	mov	r0, r6
 800c468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c540 <_malloc_r+0xfc>
 800c470:	f000 f87a 	bl	800c568 <__malloc_lock>
 800c474:	f8d8 3000 	ldr.w	r3, [r8]
 800c478:	461c      	mov	r4, r3
 800c47a:	bb5c      	cbnz	r4, 800c4d4 <_malloc_r+0x90>
 800c47c:	4629      	mov	r1, r5
 800c47e:	4638      	mov	r0, r7
 800c480:	f7ff ffc0 	bl	800c404 <sbrk_aligned>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	4604      	mov	r4, r0
 800c488:	d155      	bne.n	800c536 <_malloc_r+0xf2>
 800c48a:	f8d8 4000 	ldr.w	r4, [r8]
 800c48e:	4626      	mov	r6, r4
 800c490:	2e00      	cmp	r6, #0
 800c492:	d145      	bne.n	800c520 <_malloc_r+0xdc>
 800c494:	2c00      	cmp	r4, #0
 800c496:	d048      	beq.n	800c52a <_malloc_r+0xe6>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	4631      	mov	r1, r6
 800c49c:	4638      	mov	r0, r7
 800c49e:	eb04 0903 	add.w	r9, r4, r3
 800c4a2:	f000 fe17 	bl	800d0d4 <_sbrk_r>
 800c4a6:	4581      	cmp	r9, r0
 800c4a8:	d13f      	bne.n	800c52a <_malloc_r+0xe6>
 800c4aa:	6821      	ldr	r1, [r4, #0]
 800c4ac:	1a6d      	subs	r5, r5, r1
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ffa7 	bl	800c404 <sbrk_aligned>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	d037      	beq.n	800c52a <_malloc_r+0xe6>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	442b      	add	r3, r5
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d038      	beq.n	800c53a <_malloc_r+0xf6>
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	42a2      	cmp	r2, r4
 800c4cc:	d12b      	bne.n	800c526 <_malloc_r+0xe2>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	e00f      	b.n	800c4f4 <_malloc_r+0xb0>
 800c4d4:	6822      	ldr	r2, [r4, #0]
 800c4d6:	1b52      	subs	r2, r2, r5
 800c4d8:	d41f      	bmi.n	800c51a <_malloc_r+0xd6>
 800c4da:	2a0b      	cmp	r2, #11
 800c4dc:	d917      	bls.n	800c50e <_malloc_r+0xca>
 800c4de:	1961      	adds	r1, r4, r5
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	6025      	str	r5, [r4, #0]
 800c4e4:	bf18      	it	ne
 800c4e6:	6059      	strne	r1, [r3, #4]
 800c4e8:	6863      	ldr	r3, [r4, #4]
 800c4ea:	bf08      	it	eq
 800c4ec:	f8c8 1000 	streq.w	r1, [r8]
 800c4f0:	5162      	str	r2, [r4, r5]
 800c4f2:	604b      	str	r3, [r1, #4]
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f104 060b 	add.w	r6, r4, #11
 800c4fa:	f000 f83b 	bl	800c574 <__malloc_unlock>
 800c4fe:	f026 0607 	bic.w	r6, r6, #7
 800c502:	1d23      	adds	r3, r4, #4
 800c504:	1af2      	subs	r2, r6, r3
 800c506:	d0ae      	beq.n	800c466 <_malloc_r+0x22>
 800c508:	1b9b      	subs	r3, r3, r6
 800c50a:	50a3      	str	r3, [r4, r2]
 800c50c:	e7ab      	b.n	800c466 <_malloc_r+0x22>
 800c50e:	42a3      	cmp	r3, r4
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	d1dd      	bne.n	800c4d0 <_malloc_r+0x8c>
 800c514:	f8c8 2000 	str.w	r2, [r8]
 800c518:	e7ec      	b.n	800c4f4 <_malloc_r+0xb0>
 800c51a:	4623      	mov	r3, r4
 800c51c:	6864      	ldr	r4, [r4, #4]
 800c51e:	e7ac      	b.n	800c47a <_malloc_r+0x36>
 800c520:	4634      	mov	r4, r6
 800c522:	6876      	ldr	r6, [r6, #4]
 800c524:	e7b4      	b.n	800c490 <_malloc_r+0x4c>
 800c526:	4613      	mov	r3, r2
 800c528:	e7cc      	b.n	800c4c4 <_malloc_r+0x80>
 800c52a:	230c      	movs	r3, #12
 800c52c:	603b      	str	r3, [r7, #0]
 800c52e:	4638      	mov	r0, r7
 800c530:	f000 f820 	bl	800c574 <__malloc_unlock>
 800c534:	e797      	b.n	800c466 <_malloc_r+0x22>
 800c536:	6025      	str	r5, [r4, #0]
 800c538:	e7dc      	b.n	800c4f4 <_malloc_r+0xb0>
 800c53a:	605b      	str	r3, [r3, #4]
 800c53c:	deff      	udf	#255	; 0xff
 800c53e:	bf00      	nop
 800c540:	20005334 	.word	0x20005334

0800c544 <__ascii_mbtowc>:
 800c544:	b082      	sub	sp, #8
 800c546:	b901      	cbnz	r1, 800c54a <__ascii_mbtowc+0x6>
 800c548:	a901      	add	r1, sp, #4
 800c54a:	b142      	cbz	r2, 800c55e <__ascii_mbtowc+0x1a>
 800c54c:	b14b      	cbz	r3, 800c562 <__ascii_mbtowc+0x1e>
 800c54e:	7813      	ldrb	r3, [r2, #0]
 800c550:	600b      	str	r3, [r1, #0]
 800c552:	7812      	ldrb	r2, [r2, #0]
 800c554:	1e10      	subs	r0, r2, #0
 800c556:	bf18      	it	ne
 800c558:	2001      	movne	r0, #1
 800c55a:	b002      	add	sp, #8
 800c55c:	4770      	bx	lr
 800c55e:	4610      	mov	r0, r2
 800c560:	e7fb      	b.n	800c55a <__ascii_mbtowc+0x16>
 800c562:	f06f 0001 	mvn.w	r0, #1
 800c566:	e7f8      	b.n	800c55a <__ascii_mbtowc+0x16>

0800c568 <__malloc_lock>:
 800c568:	4801      	ldr	r0, [pc, #4]	; (800c570 <__malloc_lock+0x8>)
 800c56a:	f7ff b86a 	b.w	800b642 <__retarget_lock_acquire_recursive>
 800c56e:	bf00      	nop
 800c570:	20005330 	.word	0x20005330

0800c574 <__malloc_unlock>:
 800c574:	4801      	ldr	r0, [pc, #4]	; (800c57c <__malloc_unlock+0x8>)
 800c576:	f7ff b865 	b.w	800b644 <__retarget_lock_release_recursive>
 800c57a:	bf00      	nop
 800c57c:	20005330 	.word	0x20005330

0800c580 <_Balloc>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	69c6      	ldr	r6, [r0, #28]
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	b976      	cbnz	r6, 800c5a8 <_Balloc+0x28>
 800c58a:	2010      	movs	r0, #16
 800c58c:	f7ff ff32 	bl	800c3f4 <malloc>
 800c590:	4602      	mov	r2, r0
 800c592:	61e0      	str	r0, [r4, #28]
 800c594:	b920      	cbnz	r0, 800c5a0 <_Balloc+0x20>
 800c596:	4b18      	ldr	r3, [pc, #96]	; (800c5f8 <_Balloc+0x78>)
 800c598:	4818      	ldr	r0, [pc, #96]	; (800c5fc <_Balloc+0x7c>)
 800c59a:	216b      	movs	r1, #107	; 0x6b
 800c59c:	f000 fdaa 	bl	800d0f4 <__assert_func>
 800c5a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5a4:	6006      	str	r6, [r0, #0]
 800c5a6:	60c6      	str	r6, [r0, #12]
 800c5a8:	69e6      	ldr	r6, [r4, #28]
 800c5aa:	68f3      	ldr	r3, [r6, #12]
 800c5ac:	b183      	cbz	r3, 800c5d0 <_Balloc+0x50>
 800c5ae:	69e3      	ldr	r3, [r4, #28]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5b6:	b9b8      	cbnz	r0, 800c5e8 <_Balloc+0x68>
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c5be:	1d72      	adds	r2, r6, #5
 800c5c0:	0092      	lsls	r2, r2, #2
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 fdb4 	bl	800d130 <_calloc_r>
 800c5c8:	b160      	cbz	r0, 800c5e4 <_Balloc+0x64>
 800c5ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5ce:	e00e      	b.n	800c5ee <_Balloc+0x6e>
 800c5d0:	2221      	movs	r2, #33	; 0x21
 800c5d2:	2104      	movs	r1, #4
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 fdab 	bl	800d130 <_calloc_r>
 800c5da:	69e3      	ldr	r3, [r4, #28]
 800c5dc:	60f0      	str	r0, [r6, #12]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1e4      	bne.n	800c5ae <_Balloc+0x2e>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	6802      	ldr	r2, [r0, #0]
 800c5ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5f4:	e7f7      	b.n	800c5e6 <_Balloc+0x66>
 800c5f6:	bf00      	nop
 800c5f8:	0800e8b8 	.word	0x0800e8b8
 800c5fc:	0800e938 	.word	0x0800e938

0800c600 <_Bfree>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	69c6      	ldr	r6, [r0, #28]
 800c604:	4605      	mov	r5, r0
 800c606:	460c      	mov	r4, r1
 800c608:	b976      	cbnz	r6, 800c628 <_Bfree+0x28>
 800c60a:	2010      	movs	r0, #16
 800c60c:	f7ff fef2 	bl	800c3f4 <malloc>
 800c610:	4602      	mov	r2, r0
 800c612:	61e8      	str	r0, [r5, #28]
 800c614:	b920      	cbnz	r0, 800c620 <_Bfree+0x20>
 800c616:	4b09      	ldr	r3, [pc, #36]	; (800c63c <_Bfree+0x3c>)
 800c618:	4809      	ldr	r0, [pc, #36]	; (800c640 <_Bfree+0x40>)
 800c61a:	218f      	movs	r1, #143	; 0x8f
 800c61c:	f000 fd6a 	bl	800d0f4 <__assert_func>
 800c620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c624:	6006      	str	r6, [r0, #0]
 800c626:	60c6      	str	r6, [r0, #12]
 800c628:	b13c      	cbz	r4, 800c63a <_Bfree+0x3a>
 800c62a:	69eb      	ldr	r3, [r5, #28]
 800c62c:	6862      	ldr	r2, [r4, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c634:	6021      	str	r1, [r4, #0]
 800c636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	0800e8b8 	.word	0x0800e8b8
 800c640:	0800e938 	.word	0x0800e938

0800c644 <__multadd>:
 800c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c648:	690d      	ldr	r5, [r1, #16]
 800c64a:	4607      	mov	r7, r0
 800c64c:	460c      	mov	r4, r1
 800c64e:	461e      	mov	r6, r3
 800c650:	f101 0c14 	add.w	ip, r1, #20
 800c654:	2000      	movs	r0, #0
 800c656:	f8dc 3000 	ldr.w	r3, [ip]
 800c65a:	b299      	uxth	r1, r3
 800c65c:	fb02 6101 	mla	r1, r2, r1, r6
 800c660:	0c1e      	lsrs	r6, r3, #16
 800c662:	0c0b      	lsrs	r3, r1, #16
 800c664:	fb02 3306 	mla	r3, r2, r6, r3
 800c668:	b289      	uxth	r1, r1
 800c66a:	3001      	adds	r0, #1
 800c66c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c670:	4285      	cmp	r5, r0
 800c672:	f84c 1b04 	str.w	r1, [ip], #4
 800c676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c67a:	dcec      	bgt.n	800c656 <__multadd+0x12>
 800c67c:	b30e      	cbz	r6, 800c6c2 <__multadd+0x7e>
 800c67e:	68a3      	ldr	r3, [r4, #8]
 800c680:	42ab      	cmp	r3, r5
 800c682:	dc19      	bgt.n	800c6b8 <__multadd+0x74>
 800c684:	6861      	ldr	r1, [r4, #4]
 800c686:	4638      	mov	r0, r7
 800c688:	3101      	adds	r1, #1
 800c68a:	f7ff ff79 	bl	800c580 <_Balloc>
 800c68e:	4680      	mov	r8, r0
 800c690:	b928      	cbnz	r0, 800c69e <__multadd+0x5a>
 800c692:	4602      	mov	r2, r0
 800c694:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <__multadd+0x84>)
 800c696:	480d      	ldr	r0, [pc, #52]	; (800c6cc <__multadd+0x88>)
 800c698:	21ba      	movs	r1, #186	; 0xba
 800c69a:	f000 fd2b 	bl	800d0f4 <__assert_func>
 800c69e:	6922      	ldr	r2, [r4, #16]
 800c6a0:	3202      	adds	r2, #2
 800c6a2:	f104 010c 	add.w	r1, r4, #12
 800c6a6:	0092      	lsls	r2, r2, #2
 800c6a8:	300c      	adds	r0, #12
 800c6aa:	f7fe ffcc 	bl	800b646 <memcpy>
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff ffa5 	bl	800c600 <_Bfree>
 800c6b6:	4644      	mov	r4, r8
 800c6b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6bc:	3501      	adds	r5, #1
 800c6be:	615e      	str	r6, [r3, #20]
 800c6c0:	6125      	str	r5, [r4, #16]
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c8:	0800e927 	.word	0x0800e927
 800c6cc:	0800e938 	.word	0x0800e938

0800c6d0 <__hi0bits>:
 800c6d0:	0c03      	lsrs	r3, r0, #16
 800c6d2:	041b      	lsls	r3, r3, #16
 800c6d4:	b9d3      	cbnz	r3, 800c70c <__hi0bits+0x3c>
 800c6d6:	0400      	lsls	r0, r0, #16
 800c6d8:	2310      	movs	r3, #16
 800c6da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c6de:	bf04      	itt	eq
 800c6e0:	0200      	lsleq	r0, r0, #8
 800c6e2:	3308      	addeq	r3, #8
 800c6e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6e8:	bf04      	itt	eq
 800c6ea:	0100      	lsleq	r0, r0, #4
 800c6ec:	3304      	addeq	r3, #4
 800c6ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6f2:	bf04      	itt	eq
 800c6f4:	0080      	lsleq	r0, r0, #2
 800c6f6:	3302      	addeq	r3, #2
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	db05      	blt.n	800c708 <__hi0bits+0x38>
 800c6fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c700:	f103 0301 	add.w	r3, r3, #1
 800c704:	bf08      	it	eq
 800c706:	2320      	moveq	r3, #32
 800c708:	4618      	mov	r0, r3
 800c70a:	4770      	bx	lr
 800c70c:	2300      	movs	r3, #0
 800c70e:	e7e4      	b.n	800c6da <__hi0bits+0xa>

0800c710 <__lo0bits>:
 800c710:	6803      	ldr	r3, [r0, #0]
 800c712:	f013 0207 	ands.w	r2, r3, #7
 800c716:	d00c      	beq.n	800c732 <__lo0bits+0x22>
 800c718:	07d9      	lsls	r1, r3, #31
 800c71a:	d422      	bmi.n	800c762 <__lo0bits+0x52>
 800c71c:	079a      	lsls	r2, r3, #30
 800c71e:	bf49      	itett	mi
 800c720:	085b      	lsrmi	r3, r3, #1
 800c722:	089b      	lsrpl	r3, r3, #2
 800c724:	6003      	strmi	r3, [r0, #0]
 800c726:	2201      	movmi	r2, #1
 800c728:	bf5c      	itt	pl
 800c72a:	6003      	strpl	r3, [r0, #0]
 800c72c:	2202      	movpl	r2, #2
 800c72e:	4610      	mov	r0, r2
 800c730:	4770      	bx	lr
 800c732:	b299      	uxth	r1, r3
 800c734:	b909      	cbnz	r1, 800c73a <__lo0bits+0x2a>
 800c736:	0c1b      	lsrs	r3, r3, #16
 800c738:	2210      	movs	r2, #16
 800c73a:	b2d9      	uxtb	r1, r3
 800c73c:	b909      	cbnz	r1, 800c742 <__lo0bits+0x32>
 800c73e:	3208      	adds	r2, #8
 800c740:	0a1b      	lsrs	r3, r3, #8
 800c742:	0719      	lsls	r1, r3, #28
 800c744:	bf04      	itt	eq
 800c746:	091b      	lsreq	r3, r3, #4
 800c748:	3204      	addeq	r2, #4
 800c74a:	0799      	lsls	r1, r3, #30
 800c74c:	bf04      	itt	eq
 800c74e:	089b      	lsreq	r3, r3, #2
 800c750:	3202      	addeq	r2, #2
 800c752:	07d9      	lsls	r1, r3, #31
 800c754:	d403      	bmi.n	800c75e <__lo0bits+0x4e>
 800c756:	085b      	lsrs	r3, r3, #1
 800c758:	f102 0201 	add.w	r2, r2, #1
 800c75c:	d003      	beq.n	800c766 <__lo0bits+0x56>
 800c75e:	6003      	str	r3, [r0, #0]
 800c760:	e7e5      	b.n	800c72e <__lo0bits+0x1e>
 800c762:	2200      	movs	r2, #0
 800c764:	e7e3      	b.n	800c72e <__lo0bits+0x1e>
 800c766:	2220      	movs	r2, #32
 800c768:	e7e1      	b.n	800c72e <__lo0bits+0x1e>
	...

0800c76c <__i2b>:
 800c76c:	b510      	push	{r4, lr}
 800c76e:	460c      	mov	r4, r1
 800c770:	2101      	movs	r1, #1
 800c772:	f7ff ff05 	bl	800c580 <_Balloc>
 800c776:	4602      	mov	r2, r0
 800c778:	b928      	cbnz	r0, 800c786 <__i2b+0x1a>
 800c77a:	4b05      	ldr	r3, [pc, #20]	; (800c790 <__i2b+0x24>)
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <__i2b+0x28>)
 800c77e:	f240 1145 	movw	r1, #325	; 0x145
 800c782:	f000 fcb7 	bl	800d0f4 <__assert_func>
 800c786:	2301      	movs	r3, #1
 800c788:	6144      	str	r4, [r0, #20]
 800c78a:	6103      	str	r3, [r0, #16]
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	bf00      	nop
 800c790:	0800e927 	.word	0x0800e927
 800c794:	0800e938 	.word	0x0800e938

0800c798 <__multiply>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	4691      	mov	r9, r2
 800c79e:	690a      	ldr	r2, [r1, #16]
 800c7a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	bfb8      	it	lt
 800c7a8:	460b      	movlt	r3, r1
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	bfbc      	itt	lt
 800c7ae:	464c      	movlt	r4, r9
 800c7b0:	4699      	movlt	r9, r3
 800c7b2:	6927      	ldr	r7, [r4, #16]
 800c7b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c7b8:	68a3      	ldr	r3, [r4, #8]
 800c7ba:	6861      	ldr	r1, [r4, #4]
 800c7bc:	eb07 060a 	add.w	r6, r7, sl
 800c7c0:	42b3      	cmp	r3, r6
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	bfb8      	it	lt
 800c7c6:	3101      	addlt	r1, #1
 800c7c8:	f7ff feda 	bl	800c580 <_Balloc>
 800c7cc:	b930      	cbnz	r0, 800c7dc <__multiply+0x44>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	4b44      	ldr	r3, [pc, #272]	; (800c8e4 <__multiply+0x14c>)
 800c7d2:	4845      	ldr	r0, [pc, #276]	; (800c8e8 <__multiply+0x150>)
 800c7d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c7d8:	f000 fc8c 	bl	800d0f4 <__assert_func>
 800c7dc:	f100 0514 	add.w	r5, r0, #20
 800c7e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7e4:	462b      	mov	r3, r5
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4543      	cmp	r3, r8
 800c7ea:	d321      	bcc.n	800c830 <__multiply+0x98>
 800c7ec:	f104 0314 	add.w	r3, r4, #20
 800c7f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7f4:	f109 0314 	add.w	r3, r9, #20
 800c7f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7fc:	9202      	str	r2, [sp, #8]
 800c7fe:	1b3a      	subs	r2, r7, r4
 800c800:	3a15      	subs	r2, #21
 800c802:	f022 0203 	bic.w	r2, r2, #3
 800c806:	3204      	adds	r2, #4
 800c808:	f104 0115 	add.w	r1, r4, #21
 800c80c:	428f      	cmp	r7, r1
 800c80e:	bf38      	it	cc
 800c810:	2204      	movcc	r2, #4
 800c812:	9201      	str	r2, [sp, #4]
 800c814:	9a02      	ldr	r2, [sp, #8]
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d80c      	bhi.n	800c836 <__multiply+0x9e>
 800c81c:	2e00      	cmp	r6, #0
 800c81e:	dd03      	ble.n	800c828 <__multiply+0x90>
 800c820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c824:	2b00      	cmp	r3, #0
 800c826:	d05b      	beq.n	800c8e0 <__multiply+0x148>
 800c828:	6106      	str	r6, [r0, #16]
 800c82a:	b005      	add	sp, #20
 800c82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c830:	f843 2b04 	str.w	r2, [r3], #4
 800c834:	e7d8      	b.n	800c7e8 <__multiply+0x50>
 800c836:	f8b3 a000 	ldrh.w	sl, [r3]
 800c83a:	f1ba 0f00 	cmp.w	sl, #0
 800c83e:	d024      	beq.n	800c88a <__multiply+0xf2>
 800c840:	f104 0e14 	add.w	lr, r4, #20
 800c844:	46a9      	mov	r9, r5
 800c846:	f04f 0c00 	mov.w	ip, #0
 800c84a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c84e:	f8d9 1000 	ldr.w	r1, [r9]
 800c852:	fa1f fb82 	uxth.w	fp, r2
 800c856:	b289      	uxth	r1, r1
 800c858:	fb0a 110b 	mla	r1, sl, fp, r1
 800c85c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c860:	f8d9 2000 	ldr.w	r2, [r9]
 800c864:	4461      	add	r1, ip
 800c866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c86a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c86e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c872:	b289      	uxth	r1, r1
 800c874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c878:	4577      	cmp	r7, lr
 800c87a:	f849 1b04 	str.w	r1, [r9], #4
 800c87e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c882:	d8e2      	bhi.n	800c84a <__multiply+0xb2>
 800c884:	9a01      	ldr	r2, [sp, #4]
 800c886:	f845 c002 	str.w	ip, [r5, r2]
 800c88a:	9a03      	ldr	r2, [sp, #12]
 800c88c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c890:	3304      	adds	r3, #4
 800c892:	f1b9 0f00 	cmp.w	r9, #0
 800c896:	d021      	beq.n	800c8dc <__multiply+0x144>
 800c898:	6829      	ldr	r1, [r5, #0]
 800c89a:	f104 0c14 	add.w	ip, r4, #20
 800c89e:	46ae      	mov	lr, r5
 800c8a0:	f04f 0a00 	mov.w	sl, #0
 800c8a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c8a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c8ac:	fb09 220b 	mla	r2, r9, fp, r2
 800c8b0:	4452      	add	r2, sl
 800c8b2:	b289      	uxth	r1, r1
 800c8b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8b8:	f84e 1b04 	str.w	r1, [lr], #4
 800c8bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c8c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c8c4:	f8be 1000 	ldrh.w	r1, [lr]
 800c8c8:	fb09 110a 	mla	r1, r9, sl, r1
 800c8cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c8d0:	4567      	cmp	r7, ip
 800c8d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c8d6:	d8e5      	bhi.n	800c8a4 <__multiply+0x10c>
 800c8d8:	9a01      	ldr	r2, [sp, #4]
 800c8da:	50a9      	str	r1, [r5, r2]
 800c8dc:	3504      	adds	r5, #4
 800c8de:	e799      	b.n	800c814 <__multiply+0x7c>
 800c8e0:	3e01      	subs	r6, #1
 800c8e2:	e79b      	b.n	800c81c <__multiply+0x84>
 800c8e4:	0800e927 	.word	0x0800e927
 800c8e8:	0800e938 	.word	0x0800e938

0800c8ec <__pow5mult>:
 800c8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f0:	4615      	mov	r5, r2
 800c8f2:	f012 0203 	ands.w	r2, r2, #3
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	460f      	mov	r7, r1
 800c8fa:	d007      	beq.n	800c90c <__pow5mult+0x20>
 800c8fc:	4c25      	ldr	r4, [pc, #148]	; (800c994 <__pow5mult+0xa8>)
 800c8fe:	3a01      	subs	r2, #1
 800c900:	2300      	movs	r3, #0
 800c902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c906:	f7ff fe9d 	bl	800c644 <__multadd>
 800c90a:	4607      	mov	r7, r0
 800c90c:	10ad      	asrs	r5, r5, #2
 800c90e:	d03d      	beq.n	800c98c <__pow5mult+0xa0>
 800c910:	69f4      	ldr	r4, [r6, #28]
 800c912:	b97c      	cbnz	r4, 800c934 <__pow5mult+0x48>
 800c914:	2010      	movs	r0, #16
 800c916:	f7ff fd6d 	bl	800c3f4 <malloc>
 800c91a:	4602      	mov	r2, r0
 800c91c:	61f0      	str	r0, [r6, #28]
 800c91e:	b928      	cbnz	r0, 800c92c <__pow5mult+0x40>
 800c920:	4b1d      	ldr	r3, [pc, #116]	; (800c998 <__pow5mult+0xac>)
 800c922:	481e      	ldr	r0, [pc, #120]	; (800c99c <__pow5mult+0xb0>)
 800c924:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c928:	f000 fbe4 	bl	800d0f4 <__assert_func>
 800c92c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c930:	6004      	str	r4, [r0, #0]
 800c932:	60c4      	str	r4, [r0, #12]
 800c934:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c93c:	b94c      	cbnz	r4, 800c952 <__pow5mult+0x66>
 800c93e:	f240 2171 	movw	r1, #625	; 0x271
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff ff12 	bl	800c76c <__i2b>
 800c948:	2300      	movs	r3, #0
 800c94a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c94e:	4604      	mov	r4, r0
 800c950:	6003      	str	r3, [r0, #0]
 800c952:	f04f 0900 	mov.w	r9, #0
 800c956:	07eb      	lsls	r3, r5, #31
 800c958:	d50a      	bpl.n	800c970 <__pow5mult+0x84>
 800c95a:	4639      	mov	r1, r7
 800c95c:	4622      	mov	r2, r4
 800c95e:	4630      	mov	r0, r6
 800c960:	f7ff ff1a 	bl	800c798 <__multiply>
 800c964:	4639      	mov	r1, r7
 800c966:	4680      	mov	r8, r0
 800c968:	4630      	mov	r0, r6
 800c96a:	f7ff fe49 	bl	800c600 <_Bfree>
 800c96e:	4647      	mov	r7, r8
 800c970:	106d      	asrs	r5, r5, #1
 800c972:	d00b      	beq.n	800c98c <__pow5mult+0xa0>
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	b938      	cbnz	r0, 800c988 <__pow5mult+0x9c>
 800c978:	4622      	mov	r2, r4
 800c97a:	4621      	mov	r1, r4
 800c97c:	4630      	mov	r0, r6
 800c97e:	f7ff ff0b 	bl	800c798 <__multiply>
 800c982:	6020      	str	r0, [r4, #0]
 800c984:	f8c0 9000 	str.w	r9, [r0]
 800c988:	4604      	mov	r4, r0
 800c98a:	e7e4      	b.n	800c956 <__pow5mult+0x6a>
 800c98c:	4638      	mov	r0, r7
 800c98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c992:	bf00      	nop
 800c994:	0800ea88 	.word	0x0800ea88
 800c998:	0800e8b8 	.word	0x0800e8b8
 800c99c:	0800e938 	.word	0x0800e938

0800c9a0 <__lshift>:
 800c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	6849      	ldr	r1, [r1, #4]
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9ae:	68a3      	ldr	r3, [r4, #8]
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	4691      	mov	r9, r2
 800c9b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9b8:	f108 0601 	add.w	r6, r8, #1
 800c9bc:	42b3      	cmp	r3, r6
 800c9be:	db0b      	blt.n	800c9d8 <__lshift+0x38>
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7ff fddd 	bl	800c580 <_Balloc>
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	b948      	cbnz	r0, 800c9de <__lshift+0x3e>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	4b28      	ldr	r3, [pc, #160]	; (800ca70 <__lshift+0xd0>)
 800c9ce:	4829      	ldr	r0, [pc, #164]	; (800ca74 <__lshift+0xd4>)
 800c9d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c9d4:	f000 fb8e 	bl	800d0f4 <__assert_func>
 800c9d8:	3101      	adds	r1, #1
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	e7ee      	b.n	800c9bc <__lshift+0x1c>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f100 0114 	add.w	r1, r0, #20
 800c9e4:	f100 0210 	add.w	r2, r0, #16
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	4553      	cmp	r3, sl
 800c9ec:	db33      	blt.n	800ca56 <__lshift+0xb6>
 800c9ee:	6920      	ldr	r0, [r4, #16]
 800c9f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9f4:	f104 0314 	add.w	r3, r4, #20
 800c9f8:	f019 091f 	ands.w	r9, r9, #31
 800c9fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca04:	d02b      	beq.n	800ca5e <__lshift+0xbe>
 800ca06:	f1c9 0e20 	rsb	lr, r9, #32
 800ca0a:	468a      	mov	sl, r1
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	fa00 f009 	lsl.w	r0, r0, r9
 800ca14:	4310      	orrs	r0, r2
 800ca16:	f84a 0b04 	str.w	r0, [sl], #4
 800ca1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca1e:	459c      	cmp	ip, r3
 800ca20:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca24:	d8f3      	bhi.n	800ca0e <__lshift+0x6e>
 800ca26:	ebac 0304 	sub.w	r3, ip, r4
 800ca2a:	3b15      	subs	r3, #21
 800ca2c:	f023 0303 	bic.w	r3, r3, #3
 800ca30:	3304      	adds	r3, #4
 800ca32:	f104 0015 	add.w	r0, r4, #21
 800ca36:	4584      	cmp	ip, r0
 800ca38:	bf38      	it	cc
 800ca3a:	2304      	movcc	r3, #4
 800ca3c:	50ca      	str	r2, [r1, r3]
 800ca3e:	b10a      	cbz	r2, 800ca44 <__lshift+0xa4>
 800ca40:	f108 0602 	add.w	r6, r8, #2
 800ca44:	3e01      	subs	r6, #1
 800ca46:	4638      	mov	r0, r7
 800ca48:	612e      	str	r6, [r5, #16]
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	f7ff fdd8 	bl	800c600 <_Bfree>
 800ca50:	4628      	mov	r0, r5
 800ca52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca56:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	e7c5      	b.n	800c9ea <__lshift+0x4a>
 800ca5e:	3904      	subs	r1, #4
 800ca60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca64:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca68:	459c      	cmp	ip, r3
 800ca6a:	d8f9      	bhi.n	800ca60 <__lshift+0xc0>
 800ca6c:	e7ea      	b.n	800ca44 <__lshift+0xa4>
 800ca6e:	bf00      	nop
 800ca70:	0800e927 	.word	0x0800e927
 800ca74:	0800e938 	.word	0x0800e938

0800ca78 <__mcmp>:
 800ca78:	b530      	push	{r4, r5, lr}
 800ca7a:	6902      	ldr	r2, [r0, #16]
 800ca7c:	690c      	ldr	r4, [r1, #16]
 800ca7e:	1b12      	subs	r2, r2, r4
 800ca80:	d10e      	bne.n	800caa0 <__mcmp+0x28>
 800ca82:	f100 0314 	add.w	r3, r0, #20
 800ca86:	3114      	adds	r1, #20
 800ca88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca98:	42a5      	cmp	r5, r4
 800ca9a:	d003      	beq.n	800caa4 <__mcmp+0x2c>
 800ca9c:	d305      	bcc.n	800caaa <__mcmp+0x32>
 800ca9e:	2201      	movs	r2, #1
 800caa0:	4610      	mov	r0, r2
 800caa2:	bd30      	pop	{r4, r5, pc}
 800caa4:	4283      	cmp	r3, r0
 800caa6:	d3f3      	bcc.n	800ca90 <__mcmp+0x18>
 800caa8:	e7fa      	b.n	800caa0 <__mcmp+0x28>
 800caaa:	f04f 32ff 	mov.w	r2, #4294967295
 800caae:	e7f7      	b.n	800caa0 <__mcmp+0x28>

0800cab0 <__mdiff>:
 800cab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	460c      	mov	r4, r1
 800cab6:	4606      	mov	r6, r0
 800cab8:	4611      	mov	r1, r2
 800caba:	4620      	mov	r0, r4
 800cabc:	4690      	mov	r8, r2
 800cabe:	f7ff ffdb 	bl	800ca78 <__mcmp>
 800cac2:	1e05      	subs	r5, r0, #0
 800cac4:	d110      	bne.n	800cae8 <__mdiff+0x38>
 800cac6:	4629      	mov	r1, r5
 800cac8:	4630      	mov	r0, r6
 800caca:	f7ff fd59 	bl	800c580 <_Balloc>
 800cace:	b930      	cbnz	r0, 800cade <__mdiff+0x2e>
 800cad0:	4b3a      	ldr	r3, [pc, #232]	; (800cbbc <__mdiff+0x10c>)
 800cad2:	4602      	mov	r2, r0
 800cad4:	f240 2137 	movw	r1, #567	; 0x237
 800cad8:	4839      	ldr	r0, [pc, #228]	; (800cbc0 <__mdiff+0x110>)
 800cada:	f000 fb0b 	bl	800d0f4 <__assert_func>
 800cade:	2301      	movs	r3, #1
 800cae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae8:	bfa4      	itt	ge
 800caea:	4643      	movge	r3, r8
 800caec:	46a0      	movge	r8, r4
 800caee:	4630      	mov	r0, r6
 800caf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800caf4:	bfa6      	itte	ge
 800caf6:	461c      	movge	r4, r3
 800caf8:	2500      	movge	r5, #0
 800cafa:	2501      	movlt	r5, #1
 800cafc:	f7ff fd40 	bl	800c580 <_Balloc>
 800cb00:	b920      	cbnz	r0, 800cb0c <__mdiff+0x5c>
 800cb02:	4b2e      	ldr	r3, [pc, #184]	; (800cbbc <__mdiff+0x10c>)
 800cb04:	4602      	mov	r2, r0
 800cb06:	f240 2145 	movw	r1, #581	; 0x245
 800cb0a:	e7e5      	b.n	800cad8 <__mdiff+0x28>
 800cb0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb10:	6926      	ldr	r6, [r4, #16]
 800cb12:	60c5      	str	r5, [r0, #12]
 800cb14:	f104 0914 	add.w	r9, r4, #20
 800cb18:	f108 0514 	add.w	r5, r8, #20
 800cb1c:	f100 0e14 	add.w	lr, r0, #20
 800cb20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cb28:	f108 0210 	add.w	r2, r8, #16
 800cb2c:	46f2      	mov	sl, lr
 800cb2e:	2100      	movs	r1, #0
 800cb30:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb38:	fa11 f88b 	uxtah	r8, r1, fp
 800cb3c:	b299      	uxth	r1, r3
 800cb3e:	0c1b      	lsrs	r3, r3, #16
 800cb40:	eba8 0801 	sub.w	r8, r8, r1
 800cb44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb4c:	fa1f f888 	uxth.w	r8, r8
 800cb50:	1419      	asrs	r1, r3, #16
 800cb52:	454e      	cmp	r6, r9
 800cb54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb58:	f84a 3b04 	str.w	r3, [sl], #4
 800cb5c:	d8e8      	bhi.n	800cb30 <__mdiff+0x80>
 800cb5e:	1b33      	subs	r3, r6, r4
 800cb60:	3b15      	subs	r3, #21
 800cb62:	f023 0303 	bic.w	r3, r3, #3
 800cb66:	3304      	adds	r3, #4
 800cb68:	3415      	adds	r4, #21
 800cb6a:	42a6      	cmp	r6, r4
 800cb6c:	bf38      	it	cc
 800cb6e:	2304      	movcc	r3, #4
 800cb70:	441d      	add	r5, r3
 800cb72:	4473      	add	r3, lr
 800cb74:	469e      	mov	lr, r3
 800cb76:	462e      	mov	r6, r5
 800cb78:	4566      	cmp	r6, ip
 800cb7a:	d30e      	bcc.n	800cb9a <__mdiff+0xea>
 800cb7c:	f10c 0203 	add.w	r2, ip, #3
 800cb80:	1b52      	subs	r2, r2, r5
 800cb82:	f022 0203 	bic.w	r2, r2, #3
 800cb86:	3d03      	subs	r5, #3
 800cb88:	45ac      	cmp	ip, r5
 800cb8a:	bf38      	it	cc
 800cb8c:	2200      	movcc	r2, #0
 800cb8e:	4413      	add	r3, r2
 800cb90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb94:	b17a      	cbz	r2, 800cbb6 <__mdiff+0x106>
 800cb96:	6107      	str	r7, [r0, #16]
 800cb98:	e7a4      	b.n	800cae4 <__mdiff+0x34>
 800cb9a:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb9e:	fa11 f288 	uxtah	r2, r1, r8
 800cba2:	1414      	asrs	r4, r2, #16
 800cba4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cba8:	b292      	uxth	r2, r2
 800cbaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cbae:	f84e 2b04 	str.w	r2, [lr], #4
 800cbb2:	1421      	asrs	r1, r4, #16
 800cbb4:	e7e0      	b.n	800cb78 <__mdiff+0xc8>
 800cbb6:	3f01      	subs	r7, #1
 800cbb8:	e7ea      	b.n	800cb90 <__mdiff+0xe0>
 800cbba:	bf00      	nop
 800cbbc:	0800e927 	.word	0x0800e927
 800cbc0:	0800e938 	.word	0x0800e938

0800cbc4 <__d2b>:
 800cbc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbc8:	460f      	mov	r7, r1
 800cbca:	2101      	movs	r1, #1
 800cbcc:	ec59 8b10 	vmov	r8, r9, d0
 800cbd0:	4616      	mov	r6, r2
 800cbd2:	f7ff fcd5 	bl	800c580 <_Balloc>
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	b930      	cbnz	r0, 800cbe8 <__d2b+0x24>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <__d2b+0xac>)
 800cbde:	4825      	ldr	r0, [pc, #148]	; (800cc74 <__d2b+0xb0>)
 800cbe0:	f240 310f 	movw	r1, #783	; 0x30f
 800cbe4:	f000 fa86 	bl	800d0f4 <__assert_func>
 800cbe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbf0:	bb2d      	cbnz	r5, 800cc3e <__d2b+0x7a>
 800cbf2:	9301      	str	r3, [sp, #4]
 800cbf4:	f1b8 0300 	subs.w	r3, r8, #0
 800cbf8:	d026      	beq.n	800cc48 <__d2b+0x84>
 800cbfa:	4668      	mov	r0, sp
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	f7ff fd87 	bl	800c710 <__lo0bits>
 800cc02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc06:	b1e8      	cbz	r0, 800cc44 <__d2b+0x80>
 800cc08:	f1c0 0320 	rsb	r3, r0, #32
 800cc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc10:	430b      	orrs	r3, r1
 800cc12:	40c2      	lsrs	r2, r0
 800cc14:	6163      	str	r3, [r4, #20]
 800cc16:	9201      	str	r2, [sp, #4]
 800cc18:	9b01      	ldr	r3, [sp, #4]
 800cc1a:	61a3      	str	r3, [r4, #24]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	bf14      	ite	ne
 800cc20:	2202      	movne	r2, #2
 800cc22:	2201      	moveq	r2, #1
 800cc24:	6122      	str	r2, [r4, #16]
 800cc26:	b1bd      	cbz	r5, 800cc58 <__d2b+0x94>
 800cc28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc2c:	4405      	add	r5, r0
 800cc2e:	603d      	str	r5, [r7, #0]
 800cc30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc34:	6030      	str	r0, [r6, #0]
 800cc36:	4620      	mov	r0, r4
 800cc38:	b003      	add	sp, #12
 800cc3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc42:	e7d6      	b.n	800cbf2 <__d2b+0x2e>
 800cc44:	6161      	str	r1, [r4, #20]
 800cc46:	e7e7      	b.n	800cc18 <__d2b+0x54>
 800cc48:	a801      	add	r0, sp, #4
 800cc4a:	f7ff fd61 	bl	800c710 <__lo0bits>
 800cc4e:	9b01      	ldr	r3, [sp, #4]
 800cc50:	6163      	str	r3, [r4, #20]
 800cc52:	3020      	adds	r0, #32
 800cc54:	2201      	movs	r2, #1
 800cc56:	e7e5      	b.n	800cc24 <__d2b+0x60>
 800cc58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc60:	6038      	str	r0, [r7, #0]
 800cc62:	6918      	ldr	r0, [r3, #16]
 800cc64:	f7ff fd34 	bl	800c6d0 <__hi0bits>
 800cc68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc6c:	e7e2      	b.n	800cc34 <__d2b+0x70>
 800cc6e:	bf00      	nop
 800cc70:	0800e927 	.word	0x0800e927
 800cc74:	0800e938 	.word	0x0800e938

0800cc78 <__ascii_wctomb>:
 800cc78:	b149      	cbz	r1, 800cc8e <__ascii_wctomb+0x16>
 800cc7a:	2aff      	cmp	r2, #255	; 0xff
 800cc7c:	bf85      	ittet	hi
 800cc7e:	238a      	movhi	r3, #138	; 0x8a
 800cc80:	6003      	strhi	r3, [r0, #0]
 800cc82:	700a      	strbls	r2, [r1, #0]
 800cc84:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc88:	bf98      	it	ls
 800cc8a:	2001      	movls	r0, #1
 800cc8c:	4770      	bx	lr
 800cc8e:	4608      	mov	r0, r1
 800cc90:	4770      	bx	lr

0800cc92 <__ssputs_r>:
 800cc92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc96:	688e      	ldr	r6, [r1, #8]
 800cc98:	461f      	mov	r7, r3
 800cc9a:	42be      	cmp	r6, r7
 800cc9c:	680b      	ldr	r3, [r1, #0]
 800cc9e:	4682      	mov	sl, r0
 800cca0:	460c      	mov	r4, r1
 800cca2:	4690      	mov	r8, r2
 800cca4:	d82c      	bhi.n	800cd00 <__ssputs_r+0x6e>
 800cca6:	898a      	ldrh	r2, [r1, #12]
 800cca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccac:	d026      	beq.n	800ccfc <__ssputs_r+0x6a>
 800ccae:	6965      	ldr	r5, [r4, #20]
 800ccb0:	6909      	ldr	r1, [r1, #16]
 800ccb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccb6:	eba3 0901 	sub.w	r9, r3, r1
 800ccba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccbe:	1c7b      	adds	r3, r7, #1
 800ccc0:	444b      	add	r3, r9
 800ccc2:	106d      	asrs	r5, r5, #1
 800ccc4:	429d      	cmp	r5, r3
 800ccc6:	bf38      	it	cc
 800ccc8:	461d      	movcc	r5, r3
 800ccca:	0553      	lsls	r3, r2, #21
 800cccc:	d527      	bpl.n	800cd1e <__ssputs_r+0x8c>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f7ff fbb8 	bl	800c444 <_malloc_r>
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	b360      	cbz	r0, 800cd32 <__ssputs_r+0xa0>
 800ccd8:	6921      	ldr	r1, [r4, #16]
 800ccda:	464a      	mov	r2, r9
 800ccdc:	f7fe fcb3 	bl	800b646 <memcpy>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	6126      	str	r6, [r4, #16]
 800ccee:	6165      	str	r5, [r4, #20]
 800ccf0:	444e      	add	r6, r9
 800ccf2:	eba5 0509 	sub.w	r5, r5, r9
 800ccf6:	6026      	str	r6, [r4, #0]
 800ccf8:	60a5      	str	r5, [r4, #8]
 800ccfa:	463e      	mov	r6, r7
 800ccfc:	42be      	cmp	r6, r7
 800ccfe:	d900      	bls.n	800cd02 <__ssputs_r+0x70>
 800cd00:	463e      	mov	r6, r7
 800cd02:	6820      	ldr	r0, [r4, #0]
 800cd04:	4632      	mov	r2, r6
 800cd06:	4641      	mov	r1, r8
 800cd08:	f000 f9ca 	bl	800d0a0 <memmove>
 800cd0c:	68a3      	ldr	r3, [r4, #8]
 800cd0e:	1b9b      	subs	r3, r3, r6
 800cd10:	60a3      	str	r3, [r4, #8]
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	4433      	add	r3, r6
 800cd16:	6023      	str	r3, [r4, #0]
 800cd18:	2000      	movs	r0, #0
 800cd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1e:	462a      	mov	r2, r5
 800cd20:	f000 fa1c 	bl	800d15c <_realloc_r>
 800cd24:	4606      	mov	r6, r0
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d1e0      	bne.n	800ccec <__ssputs_r+0x5a>
 800cd2a:	6921      	ldr	r1, [r4, #16]
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	f7ff fb15 	bl	800c35c <_free_r>
 800cd32:	230c      	movs	r3, #12
 800cd34:	f8ca 3000 	str.w	r3, [sl]
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	e7e9      	b.n	800cd1a <__ssputs_r+0x88>
	...

0800cd48 <_svfiprintf_r>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	4698      	mov	r8, r3
 800cd4e:	898b      	ldrh	r3, [r1, #12]
 800cd50:	061b      	lsls	r3, r3, #24
 800cd52:	b09d      	sub	sp, #116	; 0x74
 800cd54:	4607      	mov	r7, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	4614      	mov	r4, r2
 800cd5a:	d50e      	bpl.n	800cd7a <_svfiprintf_r+0x32>
 800cd5c:	690b      	ldr	r3, [r1, #16]
 800cd5e:	b963      	cbnz	r3, 800cd7a <_svfiprintf_r+0x32>
 800cd60:	2140      	movs	r1, #64	; 0x40
 800cd62:	f7ff fb6f 	bl	800c444 <_malloc_r>
 800cd66:	6028      	str	r0, [r5, #0]
 800cd68:	6128      	str	r0, [r5, #16]
 800cd6a:	b920      	cbnz	r0, 800cd76 <_svfiprintf_r+0x2e>
 800cd6c:	230c      	movs	r3, #12
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	e0d0      	b.n	800cf18 <_svfiprintf_r+0x1d0>
 800cd76:	2340      	movs	r3, #64	; 0x40
 800cd78:	616b      	str	r3, [r5, #20]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd7e:	2320      	movs	r3, #32
 800cd80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd84:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd88:	2330      	movs	r3, #48	; 0x30
 800cd8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf30 <_svfiprintf_r+0x1e8>
 800cd8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd92:	f04f 0901 	mov.w	r9, #1
 800cd96:	4623      	mov	r3, r4
 800cd98:	469a      	mov	sl, r3
 800cd9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd9e:	b10a      	cbz	r2, 800cda4 <_svfiprintf_r+0x5c>
 800cda0:	2a25      	cmp	r2, #37	; 0x25
 800cda2:	d1f9      	bne.n	800cd98 <_svfiprintf_r+0x50>
 800cda4:	ebba 0b04 	subs.w	fp, sl, r4
 800cda8:	d00b      	beq.n	800cdc2 <_svfiprintf_r+0x7a>
 800cdaa:	465b      	mov	r3, fp
 800cdac:	4622      	mov	r2, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	f7ff ff6e 	bl	800cc92 <__ssputs_r>
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	f000 80a9 	beq.w	800cf0e <_svfiprintf_r+0x1c6>
 800cdbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdbe:	445a      	add	r2, fp
 800cdc0:	9209      	str	r2, [sp, #36]	; 0x24
 800cdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 80a1 	beq.w	800cf0e <_svfiprintf_r+0x1c6>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdd6:	f10a 0a01 	add.w	sl, sl, #1
 800cdda:	9304      	str	r3, [sp, #16]
 800cddc:	9307      	str	r3, [sp, #28]
 800cdde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cde2:	931a      	str	r3, [sp, #104]	; 0x68
 800cde4:	4654      	mov	r4, sl
 800cde6:	2205      	movs	r2, #5
 800cde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdec:	4850      	ldr	r0, [pc, #320]	; (800cf30 <_svfiprintf_r+0x1e8>)
 800cdee:	f7f3 fa0f 	bl	8000210 <memchr>
 800cdf2:	9a04      	ldr	r2, [sp, #16]
 800cdf4:	b9d8      	cbnz	r0, 800ce2e <_svfiprintf_r+0xe6>
 800cdf6:	06d0      	lsls	r0, r2, #27
 800cdf8:	bf44      	itt	mi
 800cdfa:	2320      	movmi	r3, #32
 800cdfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce00:	0711      	lsls	r1, r2, #28
 800ce02:	bf44      	itt	mi
 800ce04:	232b      	movmi	r3, #43	; 0x2b
 800ce06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce10:	d015      	beq.n	800ce3e <_svfiprintf_r+0xf6>
 800ce12:	9a07      	ldr	r2, [sp, #28]
 800ce14:	4654      	mov	r4, sl
 800ce16:	2000      	movs	r0, #0
 800ce18:	f04f 0c0a 	mov.w	ip, #10
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce22:	3b30      	subs	r3, #48	; 0x30
 800ce24:	2b09      	cmp	r3, #9
 800ce26:	d94d      	bls.n	800cec4 <_svfiprintf_r+0x17c>
 800ce28:	b1b0      	cbz	r0, 800ce58 <_svfiprintf_r+0x110>
 800ce2a:	9207      	str	r2, [sp, #28]
 800ce2c:	e014      	b.n	800ce58 <_svfiprintf_r+0x110>
 800ce2e:	eba0 0308 	sub.w	r3, r0, r8
 800ce32:	fa09 f303 	lsl.w	r3, r9, r3
 800ce36:	4313      	orrs	r3, r2
 800ce38:	9304      	str	r3, [sp, #16]
 800ce3a:	46a2      	mov	sl, r4
 800ce3c:	e7d2      	b.n	800cde4 <_svfiprintf_r+0x9c>
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	1d19      	adds	r1, r3, #4
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	9103      	str	r1, [sp, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfbb      	ittet	lt
 800ce4a:	425b      	neglt	r3, r3
 800ce4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ce50:	9307      	strge	r3, [sp, #28]
 800ce52:	9307      	strlt	r3, [sp, #28]
 800ce54:	bfb8      	it	lt
 800ce56:	9204      	strlt	r2, [sp, #16]
 800ce58:	7823      	ldrb	r3, [r4, #0]
 800ce5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce5c:	d10c      	bne.n	800ce78 <_svfiprintf_r+0x130>
 800ce5e:	7863      	ldrb	r3, [r4, #1]
 800ce60:	2b2a      	cmp	r3, #42	; 0x2a
 800ce62:	d134      	bne.n	800cece <_svfiprintf_r+0x186>
 800ce64:	9b03      	ldr	r3, [sp, #12]
 800ce66:	1d1a      	adds	r2, r3, #4
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	9203      	str	r2, [sp, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	bfb8      	it	lt
 800ce70:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce74:	3402      	adds	r4, #2
 800ce76:	9305      	str	r3, [sp, #20]
 800ce78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cf40 <_svfiprintf_r+0x1f8>
 800ce7c:	7821      	ldrb	r1, [r4, #0]
 800ce7e:	2203      	movs	r2, #3
 800ce80:	4650      	mov	r0, sl
 800ce82:	f7f3 f9c5 	bl	8000210 <memchr>
 800ce86:	b138      	cbz	r0, 800ce98 <_svfiprintf_r+0x150>
 800ce88:	9b04      	ldr	r3, [sp, #16]
 800ce8a:	eba0 000a 	sub.w	r0, r0, sl
 800ce8e:	2240      	movs	r2, #64	; 0x40
 800ce90:	4082      	lsls	r2, r0
 800ce92:	4313      	orrs	r3, r2
 800ce94:	3401      	adds	r4, #1
 800ce96:	9304      	str	r3, [sp, #16]
 800ce98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9c:	4825      	ldr	r0, [pc, #148]	; (800cf34 <_svfiprintf_r+0x1ec>)
 800ce9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cea2:	2206      	movs	r2, #6
 800cea4:	f7f3 f9b4 	bl	8000210 <memchr>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d038      	beq.n	800cf1e <_svfiprintf_r+0x1d6>
 800ceac:	4b22      	ldr	r3, [pc, #136]	; (800cf38 <_svfiprintf_r+0x1f0>)
 800ceae:	bb1b      	cbnz	r3, 800cef8 <_svfiprintf_r+0x1b0>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	3307      	adds	r3, #7
 800ceb4:	f023 0307 	bic.w	r3, r3, #7
 800ceb8:	3308      	adds	r3, #8
 800ceba:	9303      	str	r3, [sp, #12]
 800cebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cebe:	4433      	add	r3, r6
 800cec0:	9309      	str	r3, [sp, #36]	; 0x24
 800cec2:	e768      	b.n	800cd96 <_svfiprintf_r+0x4e>
 800cec4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cec8:	460c      	mov	r4, r1
 800ceca:	2001      	movs	r0, #1
 800cecc:	e7a6      	b.n	800ce1c <_svfiprintf_r+0xd4>
 800cece:	2300      	movs	r3, #0
 800ced0:	3401      	adds	r4, #1
 800ced2:	9305      	str	r3, [sp, #20]
 800ced4:	4619      	mov	r1, r3
 800ced6:	f04f 0c0a 	mov.w	ip, #10
 800ceda:	4620      	mov	r0, r4
 800cedc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cee0:	3a30      	subs	r2, #48	; 0x30
 800cee2:	2a09      	cmp	r2, #9
 800cee4:	d903      	bls.n	800ceee <_svfiprintf_r+0x1a6>
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0c6      	beq.n	800ce78 <_svfiprintf_r+0x130>
 800ceea:	9105      	str	r1, [sp, #20]
 800ceec:	e7c4      	b.n	800ce78 <_svfiprintf_r+0x130>
 800ceee:	fb0c 2101 	mla	r1, ip, r1, r2
 800cef2:	4604      	mov	r4, r0
 800cef4:	2301      	movs	r3, #1
 800cef6:	e7f0      	b.n	800ceda <_svfiprintf_r+0x192>
 800cef8:	ab03      	add	r3, sp, #12
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	462a      	mov	r2, r5
 800cefe:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <_svfiprintf_r+0x1f4>)
 800cf00:	a904      	add	r1, sp, #16
 800cf02:	4638      	mov	r0, r7
 800cf04:	f7fd fdca 	bl	800aa9c <_printf_float>
 800cf08:	1c42      	adds	r2, r0, #1
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	d1d6      	bne.n	800cebc <_svfiprintf_r+0x174>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	065b      	lsls	r3, r3, #25
 800cf12:	f53f af2d 	bmi.w	800cd70 <_svfiprintf_r+0x28>
 800cf16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf18:	b01d      	add	sp, #116	; 0x74
 800cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1e:	ab03      	add	r3, sp, #12
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	462a      	mov	r2, r5
 800cf24:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <_svfiprintf_r+0x1f4>)
 800cf26:	a904      	add	r1, sp, #16
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7fe f85b 	bl	800afe4 <_printf_i>
 800cf2e:	e7eb      	b.n	800cf08 <_svfiprintf_r+0x1c0>
 800cf30:	0800ea94 	.word	0x0800ea94
 800cf34:	0800ea9e 	.word	0x0800ea9e
 800cf38:	0800aa9d 	.word	0x0800aa9d
 800cf3c:	0800cc93 	.word	0x0800cc93
 800cf40:	0800ea9a 	.word	0x0800ea9a

0800cf44 <__sflush_r>:
 800cf44:	898a      	ldrh	r2, [r1, #12]
 800cf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	0710      	lsls	r0, r2, #28
 800cf4e:	460c      	mov	r4, r1
 800cf50:	d458      	bmi.n	800d004 <__sflush_r+0xc0>
 800cf52:	684b      	ldr	r3, [r1, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	dc05      	bgt.n	800cf64 <__sflush_r+0x20>
 800cf58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	dc02      	bgt.n	800cf64 <__sflush_r+0x20>
 800cf5e:	2000      	movs	r0, #0
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	d0f9      	beq.n	800cf5e <__sflush_r+0x1a>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf70:	682f      	ldr	r7, [r5, #0]
 800cf72:	6a21      	ldr	r1, [r4, #32]
 800cf74:	602b      	str	r3, [r5, #0]
 800cf76:	d032      	beq.n	800cfde <__sflush_r+0x9a>
 800cf78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	075a      	lsls	r2, r3, #29
 800cf7e:	d505      	bpl.n	800cf8c <__sflush_r+0x48>
 800cf80:	6863      	ldr	r3, [r4, #4]
 800cf82:	1ac0      	subs	r0, r0, r3
 800cf84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf86:	b10b      	cbz	r3, 800cf8c <__sflush_r+0x48>
 800cf88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf8a:	1ac0      	subs	r0, r0, r3
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4602      	mov	r2, r0
 800cf90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf92:	6a21      	ldr	r1, [r4, #32]
 800cf94:	4628      	mov	r0, r5
 800cf96:	47b0      	blx	r6
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	d106      	bne.n	800cfac <__sflush_r+0x68>
 800cf9e:	6829      	ldr	r1, [r5, #0]
 800cfa0:	291d      	cmp	r1, #29
 800cfa2:	d82b      	bhi.n	800cffc <__sflush_r+0xb8>
 800cfa4:	4a29      	ldr	r2, [pc, #164]	; (800d04c <__sflush_r+0x108>)
 800cfa6:	410a      	asrs	r2, r1
 800cfa8:	07d6      	lsls	r6, r2, #31
 800cfaa:	d427      	bmi.n	800cffc <__sflush_r+0xb8>
 800cfac:	2200      	movs	r2, #0
 800cfae:	6062      	str	r2, [r4, #4]
 800cfb0:	04d9      	lsls	r1, r3, #19
 800cfb2:	6922      	ldr	r2, [r4, #16]
 800cfb4:	6022      	str	r2, [r4, #0]
 800cfb6:	d504      	bpl.n	800cfc2 <__sflush_r+0x7e>
 800cfb8:	1c42      	adds	r2, r0, #1
 800cfba:	d101      	bne.n	800cfc0 <__sflush_r+0x7c>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b903      	cbnz	r3, 800cfc2 <__sflush_r+0x7e>
 800cfc0:	6560      	str	r0, [r4, #84]	; 0x54
 800cfc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfc4:	602f      	str	r7, [r5, #0]
 800cfc6:	2900      	cmp	r1, #0
 800cfc8:	d0c9      	beq.n	800cf5e <__sflush_r+0x1a>
 800cfca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfce:	4299      	cmp	r1, r3
 800cfd0:	d002      	beq.n	800cfd8 <__sflush_r+0x94>
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f7ff f9c2 	bl	800c35c <_free_r>
 800cfd8:	2000      	movs	r0, #0
 800cfda:	6360      	str	r0, [r4, #52]	; 0x34
 800cfdc:	e7c0      	b.n	800cf60 <__sflush_r+0x1c>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	47b0      	blx	r6
 800cfe4:	1c41      	adds	r1, r0, #1
 800cfe6:	d1c8      	bne.n	800cf7a <__sflush_r+0x36>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0c5      	beq.n	800cf7a <__sflush_r+0x36>
 800cfee:	2b1d      	cmp	r3, #29
 800cff0:	d001      	beq.n	800cff6 <__sflush_r+0xb2>
 800cff2:	2b16      	cmp	r3, #22
 800cff4:	d101      	bne.n	800cffa <__sflush_r+0xb6>
 800cff6:	602f      	str	r7, [r5, #0]
 800cff8:	e7b1      	b.n	800cf5e <__sflush_r+0x1a>
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d000:	81a3      	strh	r3, [r4, #12]
 800d002:	e7ad      	b.n	800cf60 <__sflush_r+0x1c>
 800d004:	690f      	ldr	r7, [r1, #16]
 800d006:	2f00      	cmp	r7, #0
 800d008:	d0a9      	beq.n	800cf5e <__sflush_r+0x1a>
 800d00a:	0793      	lsls	r3, r2, #30
 800d00c:	680e      	ldr	r6, [r1, #0]
 800d00e:	bf08      	it	eq
 800d010:	694b      	ldreq	r3, [r1, #20]
 800d012:	600f      	str	r7, [r1, #0]
 800d014:	bf18      	it	ne
 800d016:	2300      	movne	r3, #0
 800d018:	eba6 0807 	sub.w	r8, r6, r7
 800d01c:	608b      	str	r3, [r1, #8]
 800d01e:	f1b8 0f00 	cmp.w	r8, #0
 800d022:	dd9c      	ble.n	800cf5e <__sflush_r+0x1a>
 800d024:	6a21      	ldr	r1, [r4, #32]
 800d026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d028:	4643      	mov	r3, r8
 800d02a:	463a      	mov	r2, r7
 800d02c:	4628      	mov	r0, r5
 800d02e:	47b0      	blx	r6
 800d030:	2800      	cmp	r0, #0
 800d032:	dc06      	bgt.n	800d042 <__sflush_r+0xfe>
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d03a:	81a3      	strh	r3, [r4, #12]
 800d03c:	f04f 30ff 	mov.w	r0, #4294967295
 800d040:	e78e      	b.n	800cf60 <__sflush_r+0x1c>
 800d042:	4407      	add	r7, r0
 800d044:	eba8 0800 	sub.w	r8, r8, r0
 800d048:	e7e9      	b.n	800d01e <__sflush_r+0xda>
 800d04a:	bf00      	nop
 800d04c:	dfbffffe 	.word	0xdfbffffe

0800d050 <_fflush_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	690b      	ldr	r3, [r1, #16]
 800d054:	4605      	mov	r5, r0
 800d056:	460c      	mov	r4, r1
 800d058:	b913      	cbnz	r3, 800d060 <_fflush_r+0x10>
 800d05a:	2500      	movs	r5, #0
 800d05c:	4628      	mov	r0, r5
 800d05e:	bd38      	pop	{r3, r4, r5, pc}
 800d060:	b118      	cbz	r0, 800d06a <_fflush_r+0x1a>
 800d062:	6a03      	ldr	r3, [r0, #32]
 800d064:	b90b      	cbnz	r3, 800d06a <_fflush_r+0x1a>
 800d066:	f7fe f96b 	bl	800b340 <__sinit>
 800d06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d0f3      	beq.n	800d05a <_fflush_r+0xa>
 800d072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d074:	07d0      	lsls	r0, r2, #31
 800d076:	d404      	bmi.n	800d082 <_fflush_r+0x32>
 800d078:	0599      	lsls	r1, r3, #22
 800d07a:	d402      	bmi.n	800d082 <_fflush_r+0x32>
 800d07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d07e:	f7fe fae0 	bl	800b642 <__retarget_lock_acquire_recursive>
 800d082:	4628      	mov	r0, r5
 800d084:	4621      	mov	r1, r4
 800d086:	f7ff ff5d 	bl	800cf44 <__sflush_r>
 800d08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d08c:	07da      	lsls	r2, r3, #31
 800d08e:	4605      	mov	r5, r0
 800d090:	d4e4      	bmi.n	800d05c <_fflush_r+0xc>
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	059b      	lsls	r3, r3, #22
 800d096:	d4e1      	bmi.n	800d05c <_fflush_r+0xc>
 800d098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09a:	f7fe fad3 	bl	800b644 <__retarget_lock_release_recursive>
 800d09e:	e7dd      	b.n	800d05c <_fflush_r+0xc>

0800d0a0 <memmove>:
 800d0a0:	4288      	cmp	r0, r1
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	eb01 0402 	add.w	r4, r1, r2
 800d0a8:	d902      	bls.n	800d0b0 <memmove+0x10>
 800d0aa:	4284      	cmp	r4, r0
 800d0ac:	4623      	mov	r3, r4
 800d0ae:	d807      	bhi.n	800d0c0 <memmove+0x20>
 800d0b0:	1e43      	subs	r3, r0, #1
 800d0b2:	42a1      	cmp	r1, r4
 800d0b4:	d008      	beq.n	800d0c8 <memmove+0x28>
 800d0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0be:	e7f8      	b.n	800d0b2 <memmove+0x12>
 800d0c0:	4402      	add	r2, r0
 800d0c2:	4601      	mov	r1, r0
 800d0c4:	428a      	cmp	r2, r1
 800d0c6:	d100      	bne.n	800d0ca <memmove+0x2a>
 800d0c8:	bd10      	pop	{r4, pc}
 800d0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0d2:	e7f7      	b.n	800d0c4 <memmove+0x24>

0800d0d4 <_sbrk_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d06      	ldr	r5, [pc, #24]	; (800d0f0 <_sbrk_r+0x1c>)
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	602b      	str	r3, [r5, #0]
 800d0e0:	f7f6 fc5e 	bl	80039a0 <_sbrk>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d102      	bne.n	800d0ee <_sbrk_r+0x1a>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b103      	cbz	r3, 800d0ee <_sbrk_r+0x1a>
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	2000532c 	.word	0x2000532c

0800d0f4 <__assert_func>:
 800d0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <__assert_func+0x2c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4605      	mov	r5, r0
 800d100:	68d8      	ldr	r0, [r3, #12]
 800d102:	b14c      	cbz	r4, 800d118 <__assert_func+0x24>
 800d104:	4b07      	ldr	r3, [pc, #28]	; (800d124 <__assert_func+0x30>)
 800d106:	9100      	str	r1, [sp, #0]
 800d108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d10c:	4906      	ldr	r1, [pc, #24]	; (800d128 <__assert_func+0x34>)
 800d10e:	462b      	mov	r3, r5
 800d110:	f000 f854 	bl	800d1bc <fiprintf>
 800d114:	f000 f864 	bl	800d1e0 <abort>
 800d118:	4b04      	ldr	r3, [pc, #16]	; (800d12c <__assert_func+0x38>)
 800d11a:	461c      	mov	r4, r3
 800d11c:	e7f3      	b.n	800d106 <__assert_func+0x12>
 800d11e:	bf00      	nop
 800d120:	200001dc 	.word	0x200001dc
 800d124:	0800eaa5 	.word	0x0800eaa5
 800d128:	0800eab2 	.word	0x0800eab2
 800d12c:	0800eae0 	.word	0x0800eae0

0800d130 <_calloc_r>:
 800d130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d132:	fba1 2402 	umull	r2, r4, r1, r2
 800d136:	b94c      	cbnz	r4, 800d14c <_calloc_r+0x1c>
 800d138:	4611      	mov	r1, r2
 800d13a:	9201      	str	r2, [sp, #4]
 800d13c:	f7ff f982 	bl	800c444 <_malloc_r>
 800d140:	9a01      	ldr	r2, [sp, #4]
 800d142:	4605      	mov	r5, r0
 800d144:	b930      	cbnz	r0, 800d154 <_calloc_r+0x24>
 800d146:	4628      	mov	r0, r5
 800d148:	b003      	add	sp, #12
 800d14a:	bd30      	pop	{r4, r5, pc}
 800d14c:	220c      	movs	r2, #12
 800d14e:	6002      	str	r2, [r0, #0]
 800d150:	2500      	movs	r5, #0
 800d152:	e7f8      	b.n	800d146 <_calloc_r+0x16>
 800d154:	4621      	mov	r1, r4
 800d156:	f7fe f9a0 	bl	800b49a <memset>
 800d15a:	e7f4      	b.n	800d146 <_calloc_r+0x16>

0800d15c <_realloc_r>:
 800d15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d160:	4680      	mov	r8, r0
 800d162:	4614      	mov	r4, r2
 800d164:	460e      	mov	r6, r1
 800d166:	b921      	cbnz	r1, 800d172 <_realloc_r+0x16>
 800d168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d16c:	4611      	mov	r1, r2
 800d16e:	f7ff b969 	b.w	800c444 <_malloc_r>
 800d172:	b92a      	cbnz	r2, 800d180 <_realloc_r+0x24>
 800d174:	f7ff f8f2 	bl	800c35c <_free_r>
 800d178:	4625      	mov	r5, r4
 800d17a:	4628      	mov	r0, r5
 800d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d180:	f000 f835 	bl	800d1ee <_malloc_usable_size_r>
 800d184:	4284      	cmp	r4, r0
 800d186:	4607      	mov	r7, r0
 800d188:	d802      	bhi.n	800d190 <_realloc_r+0x34>
 800d18a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d18e:	d812      	bhi.n	800d1b6 <_realloc_r+0x5a>
 800d190:	4621      	mov	r1, r4
 800d192:	4640      	mov	r0, r8
 800d194:	f7ff f956 	bl	800c444 <_malloc_r>
 800d198:	4605      	mov	r5, r0
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d0ed      	beq.n	800d17a <_realloc_r+0x1e>
 800d19e:	42bc      	cmp	r4, r7
 800d1a0:	4622      	mov	r2, r4
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	bf28      	it	cs
 800d1a6:	463a      	movcs	r2, r7
 800d1a8:	f7fe fa4d 	bl	800b646 <memcpy>
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	f7ff f8d4 	bl	800c35c <_free_r>
 800d1b4:	e7e1      	b.n	800d17a <_realloc_r+0x1e>
 800d1b6:	4635      	mov	r5, r6
 800d1b8:	e7df      	b.n	800d17a <_realloc_r+0x1e>
	...

0800d1bc <fiprintf>:
 800d1bc:	b40e      	push	{r1, r2, r3}
 800d1be:	b503      	push	{r0, r1, lr}
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	ab03      	add	r3, sp, #12
 800d1c4:	4805      	ldr	r0, [pc, #20]	; (800d1dc <fiprintf+0x20>)
 800d1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ca:	6800      	ldr	r0, [r0, #0]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	f000 f83f 	bl	800d250 <_vfiprintf_r>
 800d1d2:	b002      	add	sp, #8
 800d1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1d8:	b003      	add	sp, #12
 800d1da:	4770      	bx	lr
 800d1dc:	200001dc 	.word	0x200001dc

0800d1e0 <abort>:
 800d1e0:	b508      	push	{r3, lr}
 800d1e2:	2006      	movs	r0, #6
 800d1e4:	f000 fa0c 	bl	800d600 <raise>
 800d1e8:	2001      	movs	r0, #1
 800d1ea:	f7f6 fb61 	bl	80038b0 <_exit>

0800d1ee <_malloc_usable_size_r>:
 800d1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f2:	1f18      	subs	r0, r3, #4
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	bfbc      	itt	lt
 800d1f8:	580b      	ldrlt	r3, [r1, r0]
 800d1fa:	18c0      	addlt	r0, r0, r3
 800d1fc:	4770      	bx	lr

0800d1fe <__sfputc_r>:
 800d1fe:	6893      	ldr	r3, [r2, #8]
 800d200:	3b01      	subs	r3, #1
 800d202:	2b00      	cmp	r3, #0
 800d204:	b410      	push	{r4}
 800d206:	6093      	str	r3, [r2, #8]
 800d208:	da08      	bge.n	800d21c <__sfputc_r+0x1e>
 800d20a:	6994      	ldr	r4, [r2, #24]
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	db01      	blt.n	800d214 <__sfputc_r+0x16>
 800d210:	290a      	cmp	r1, #10
 800d212:	d103      	bne.n	800d21c <__sfputc_r+0x1e>
 800d214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d218:	f000 b934 	b.w	800d484 <__swbuf_r>
 800d21c:	6813      	ldr	r3, [r2, #0]
 800d21e:	1c58      	adds	r0, r3, #1
 800d220:	6010      	str	r0, [r2, #0]
 800d222:	7019      	strb	r1, [r3, #0]
 800d224:	4608      	mov	r0, r1
 800d226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <__sfputs_r>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	4606      	mov	r6, r0
 800d230:	460f      	mov	r7, r1
 800d232:	4614      	mov	r4, r2
 800d234:	18d5      	adds	r5, r2, r3
 800d236:	42ac      	cmp	r4, r5
 800d238:	d101      	bne.n	800d23e <__sfputs_r+0x12>
 800d23a:	2000      	movs	r0, #0
 800d23c:	e007      	b.n	800d24e <__sfputs_r+0x22>
 800d23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d242:	463a      	mov	r2, r7
 800d244:	4630      	mov	r0, r6
 800d246:	f7ff ffda 	bl	800d1fe <__sfputc_r>
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	d1f3      	bne.n	800d236 <__sfputs_r+0xa>
 800d24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d250 <_vfiprintf_r>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	460d      	mov	r5, r1
 800d256:	b09d      	sub	sp, #116	; 0x74
 800d258:	4614      	mov	r4, r2
 800d25a:	4698      	mov	r8, r3
 800d25c:	4606      	mov	r6, r0
 800d25e:	b118      	cbz	r0, 800d268 <_vfiprintf_r+0x18>
 800d260:	6a03      	ldr	r3, [r0, #32]
 800d262:	b90b      	cbnz	r3, 800d268 <_vfiprintf_r+0x18>
 800d264:	f7fe f86c 	bl	800b340 <__sinit>
 800d268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d26a:	07d9      	lsls	r1, r3, #31
 800d26c:	d405      	bmi.n	800d27a <_vfiprintf_r+0x2a>
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	059a      	lsls	r2, r3, #22
 800d272:	d402      	bmi.n	800d27a <_vfiprintf_r+0x2a>
 800d274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d276:	f7fe f9e4 	bl	800b642 <__retarget_lock_acquire_recursive>
 800d27a:	89ab      	ldrh	r3, [r5, #12]
 800d27c:	071b      	lsls	r3, r3, #28
 800d27e:	d501      	bpl.n	800d284 <_vfiprintf_r+0x34>
 800d280:	692b      	ldr	r3, [r5, #16]
 800d282:	b99b      	cbnz	r3, 800d2ac <_vfiprintf_r+0x5c>
 800d284:	4629      	mov	r1, r5
 800d286:	4630      	mov	r0, r6
 800d288:	f000 f93a 	bl	800d500 <__swsetup_r>
 800d28c:	b170      	cbz	r0, 800d2ac <_vfiprintf_r+0x5c>
 800d28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d290:	07dc      	lsls	r4, r3, #31
 800d292:	d504      	bpl.n	800d29e <_vfiprintf_r+0x4e>
 800d294:	f04f 30ff 	mov.w	r0, #4294967295
 800d298:	b01d      	add	sp, #116	; 0x74
 800d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	0598      	lsls	r0, r3, #22
 800d2a2:	d4f7      	bmi.n	800d294 <_vfiprintf_r+0x44>
 800d2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2a6:	f7fe f9cd 	bl	800b644 <__retarget_lock_release_recursive>
 800d2aa:	e7f3      	b.n	800d294 <_vfiprintf_r+0x44>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b0:	2320      	movs	r3, #32
 800d2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ba:	2330      	movs	r3, #48	; 0x30
 800d2bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d470 <_vfiprintf_r+0x220>
 800d2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2c4:	f04f 0901 	mov.w	r9, #1
 800d2c8:	4623      	mov	r3, r4
 800d2ca:	469a      	mov	sl, r3
 800d2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d0:	b10a      	cbz	r2, 800d2d6 <_vfiprintf_r+0x86>
 800d2d2:	2a25      	cmp	r2, #37	; 0x25
 800d2d4:	d1f9      	bne.n	800d2ca <_vfiprintf_r+0x7a>
 800d2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2da:	d00b      	beq.n	800d2f4 <_vfiprintf_r+0xa4>
 800d2dc:	465b      	mov	r3, fp
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f7ff ffa2 	bl	800d22c <__sfputs_r>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	f000 80a9 	beq.w	800d440 <_vfiprintf_r+0x1f0>
 800d2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f0:	445a      	add	r2, fp
 800d2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 80a1 	beq.w	800d440 <_vfiprintf_r+0x1f0>
 800d2fe:	2300      	movs	r3, #0
 800d300:	f04f 32ff 	mov.w	r2, #4294967295
 800d304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d308:	f10a 0a01 	add.w	sl, sl, #1
 800d30c:	9304      	str	r3, [sp, #16]
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d314:	931a      	str	r3, [sp, #104]	; 0x68
 800d316:	4654      	mov	r4, sl
 800d318:	2205      	movs	r2, #5
 800d31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31e:	4854      	ldr	r0, [pc, #336]	; (800d470 <_vfiprintf_r+0x220>)
 800d320:	f7f2 ff76 	bl	8000210 <memchr>
 800d324:	9a04      	ldr	r2, [sp, #16]
 800d326:	b9d8      	cbnz	r0, 800d360 <_vfiprintf_r+0x110>
 800d328:	06d1      	lsls	r1, r2, #27
 800d32a:	bf44      	itt	mi
 800d32c:	2320      	movmi	r3, #32
 800d32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d332:	0713      	lsls	r3, r2, #28
 800d334:	bf44      	itt	mi
 800d336:	232b      	movmi	r3, #43	; 0x2b
 800d338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d33c:	f89a 3000 	ldrb.w	r3, [sl]
 800d340:	2b2a      	cmp	r3, #42	; 0x2a
 800d342:	d015      	beq.n	800d370 <_vfiprintf_r+0x120>
 800d344:	9a07      	ldr	r2, [sp, #28]
 800d346:	4654      	mov	r4, sl
 800d348:	2000      	movs	r0, #0
 800d34a:	f04f 0c0a 	mov.w	ip, #10
 800d34e:	4621      	mov	r1, r4
 800d350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d354:	3b30      	subs	r3, #48	; 0x30
 800d356:	2b09      	cmp	r3, #9
 800d358:	d94d      	bls.n	800d3f6 <_vfiprintf_r+0x1a6>
 800d35a:	b1b0      	cbz	r0, 800d38a <_vfiprintf_r+0x13a>
 800d35c:	9207      	str	r2, [sp, #28]
 800d35e:	e014      	b.n	800d38a <_vfiprintf_r+0x13a>
 800d360:	eba0 0308 	sub.w	r3, r0, r8
 800d364:	fa09 f303 	lsl.w	r3, r9, r3
 800d368:	4313      	orrs	r3, r2
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	46a2      	mov	sl, r4
 800d36e:	e7d2      	b.n	800d316 <_vfiprintf_r+0xc6>
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	1d19      	adds	r1, r3, #4
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	9103      	str	r1, [sp, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	bfbb      	ittet	lt
 800d37c:	425b      	neglt	r3, r3
 800d37e:	f042 0202 	orrlt.w	r2, r2, #2
 800d382:	9307      	strge	r3, [sp, #28]
 800d384:	9307      	strlt	r3, [sp, #28]
 800d386:	bfb8      	it	lt
 800d388:	9204      	strlt	r2, [sp, #16]
 800d38a:	7823      	ldrb	r3, [r4, #0]
 800d38c:	2b2e      	cmp	r3, #46	; 0x2e
 800d38e:	d10c      	bne.n	800d3aa <_vfiprintf_r+0x15a>
 800d390:	7863      	ldrb	r3, [r4, #1]
 800d392:	2b2a      	cmp	r3, #42	; 0x2a
 800d394:	d134      	bne.n	800d400 <_vfiprintf_r+0x1b0>
 800d396:	9b03      	ldr	r3, [sp, #12]
 800d398:	1d1a      	adds	r2, r3, #4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	9203      	str	r2, [sp, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bfb8      	it	lt
 800d3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3a6:	3402      	adds	r4, #2
 800d3a8:	9305      	str	r3, [sp, #20]
 800d3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d480 <_vfiprintf_r+0x230>
 800d3ae:	7821      	ldrb	r1, [r4, #0]
 800d3b0:	2203      	movs	r2, #3
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	f7f2 ff2c 	bl	8000210 <memchr>
 800d3b8:	b138      	cbz	r0, 800d3ca <_vfiprintf_r+0x17a>
 800d3ba:	9b04      	ldr	r3, [sp, #16]
 800d3bc:	eba0 000a 	sub.w	r0, r0, sl
 800d3c0:	2240      	movs	r2, #64	; 0x40
 800d3c2:	4082      	lsls	r2, r0
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	9304      	str	r3, [sp, #16]
 800d3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ce:	4829      	ldr	r0, [pc, #164]	; (800d474 <_vfiprintf_r+0x224>)
 800d3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3d4:	2206      	movs	r2, #6
 800d3d6:	f7f2 ff1b 	bl	8000210 <memchr>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d03f      	beq.n	800d45e <_vfiprintf_r+0x20e>
 800d3de:	4b26      	ldr	r3, [pc, #152]	; (800d478 <_vfiprintf_r+0x228>)
 800d3e0:	bb1b      	cbnz	r3, 800d42a <_vfiprintf_r+0x1da>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	3307      	adds	r3, #7
 800d3e6:	f023 0307 	bic.w	r3, r3, #7
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	9303      	str	r3, [sp, #12]
 800d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f0:	443b      	add	r3, r7
 800d3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f4:	e768      	b.n	800d2c8 <_vfiprintf_r+0x78>
 800d3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	e7a6      	b.n	800d34e <_vfiprintf_r+0xfe>
 800d400:	2300      	movs	r3, #0
 800d402:	3401      	adds	r4, #1
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	4619      	mov	r1, r3
 800d408:	f04f 0c0a 	mov.w	ip, #10
 800d40c:	4620      	mov	r0, r4
 800d40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d412:	3a30      	subs	r2, #48	; 0x30
 800d414:	2a09      	cmp	r2, #9
 800d416:	d903      	bls.n	800d420 <_vfiprintf_r+0x1d0>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0c6      	beq.n	800d3aa <_vfiprintf_r+0x15a>
 800d41c:	9105      	str	r1, [sp, #20]
 800d41e:	e7c4      	b.n	800d3aa <_vfiprintf_r+0x15a>
 800d420:	fb0c 2101 	mla	r1, ip, r1, r2
 800d424:	4604      	mov	r4, r0
 800d426:	2301      	movs	r3, #1
 800d428:	e7f0      	b.n	800d40c <_vfiprintf_r+0x1bc>
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	462a      	mov	r2, r5
 800d430:	4b12      	ldr	r3, [pc, #72]	; (800d47c <_vfiprintf_r+0x22c>)
 800d432:	a904      	add	r1, sp, #16
 800d434:	4630      	mov	r0, r6
 800d436:	f7fd fb31 	bl	800aa9c <_printf_float>
 800d43a:	4607      	mov	r7, r0
 800d43c:	1c78      	adds	r0, r7, #1
 800d43e:	d1d6      	bne.n	800d3ee <_vfiprintf_r+0x19e>
 800d440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d442:	07d9      	lsls	r1, r3, #31
 800d444:	d405      	bmi.n	800d452 <_vfiprintf_r+0x202>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_vfiprintf_r+0x202>
 800d44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44e:	f7fe f8f9 	bl	800b644 <__retarget_lock_release_recursive>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	065b      	lsls	r3, r3, #25
 800d456:	f53f af1d 	bmi.w	800d294 <_vfiprintf_r+0x44>
 800d45a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d45c:	e71c      	b.n	800d298 <_vfiprintf_r+0x48>
 800d45e:	ab03      	add	r3, sp, #12
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	462a      	mov	r2, r5
 800d464:	4b05      	ldr	r3, [pc, #20]	; (800d47c <_vfiprintf_r+0x22c>)
 800d466:	a904      	add	r1, sp, #16
 800d468:	4630      	mov	r0, r6
 800d46a:	f7fd fdbb 	bl	800afe4 <_printf_i>
 800d46e:	e7e4      	b.n	800d43a <_vfiprintf_r+0x1ea>
 800d470:	0800ea94 	.word	0x0800ea94
 800d474:	0800ea9e 	.word	0x0800ea9e
 800d478:	0800aa9d 	.word	0x0800aa9d
 800d47c:	0800d22d 	.word	0x0800d22d
 800d480:	0800ea9a 	.word	0x0800ea9a

0800d484 <__swbuf_r>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	460e      	mov	r6, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	4605      	mov	r5, r0
 800d48c:	b118      	cbz	r0, 800d496 <__swbuf_r+0x12>
 800d48e:	6a03      	ldr	r3, [r0, #32]
 800d490:	b90b      	cbnz	r3, 800d496 <__swbuf_r+0x12>
 800d492:	f7fd ff55 	bl	800b340 <__sinit>
 800d496:	69a3      	ldr	r3, [r4, #24]
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	071a      	lsls	r2, r3, #28
 800d49e:	d525      	bpl.n	800d4ec <__swbuf_r+0x68>
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b31b      	cbz	r3, 800d4ec <__swbuf_r+0x68>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	6922      	ldr	r2, [r4, #16]
 800d4a8:	1a98      	subs	r0, r3, r2
 800d4aa:	6963      	ldr	r3, [r4, #20]
 800d4ac:	b2f6      	uxtb	r6, r6
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	4637      	mov	r7, r6
 800d4b2:	dc04      	bgt.n	800d4be <__swbuf_r+0x3a>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f7ff fdca 	bl	800d050 <_fflush_r>
 800d4bc:	b9e0      	cbnz	r0, 800d4f8 <__swbuf_r+0x74>
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6022      	str	r2, [r4, #0]
 800d4ca:	701e      	strb	r6, [r3, #0]
 800d4cc:	6962      	ldr	r2, [r4, #20]
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d004      	beq.n	800d4de <__swbuf_r+0x5a>
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	07db      	lsls	r3, r3, #31
 800d4d8:	d506      	bpl.n	800d4e8 <__swbuf_r+0x64>
 800d4da:	2e0a      	cmp	r6, #10
 800d4dc:	d104      	bne.n	800d4e8 <__swbuf_r+0x64>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	f7ff fdb5 	bl	800d050 <_fflush_r>
 800d4e6:	b938      	cbnz	r0, 800d4f8 <__swbuf_r+0x74>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f806 	bl	800d500 <__swsetup_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d0d5      	beq.n	800d4a4 <__swbuf_r+0x20>
 800d4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4fc:	e7f4      	b.n	800d4e8 <__swbuf_r+0x64>
	...

0800d500 <__swsetup_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <__swsetup_r+0xac>)
 800d504:	4605      	mov	r5, r0
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	460c      	mov	r4, r1
 800d50a:	b118      	cbz	r0, 800d514 <__swsetup_r+0x14>
 800d50c:	6a03      	ldr	r3, [r0, #32]
 800d50e:	b90b      	cbnz	r3, 800d514 <__swsetup_r+0x14>
 800d510:	f7fd ff16 	bl	800b340 <__sinit>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d51a:	0718      	lsls	r0, r3, #28
 800d51c:	d422      	bmi.n	800d564 <__swsetup_r+0x64>
 800d51e:	06d9      	lsls	r1, r3, #27
 800d520:	d407      	bmi.n	800d532 <__swsetup_r+0x32>
 800d522:	2309      	movs	r3, #9
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295
 800d530:	e034      	b.n	800d59c <__swsetup_r+0x9c>
 800d532:	0758      	lsls	r0, r3, #29
 800d534:	d512      	bpl.n	800d55c <__swsetup_r+0x5c>
 800d536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d538:	b141      	cbz	r1, 800d54c <__swsetup_r+0x4c>
 800d53a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d53e:	4299      	cmp	r1, r3
 800d540:	d002      	beq.n	800d548 <__swsetup_r+0x48>
 800d542:	4628      	mov	r0, r5
 800d544:	f7fe ff0a 	bl	800c35c <_free_r>
 800d548:	2300      	movs	r3, #0
 800d54a:	6363      	str	r3, [r4, #52]	; 0x34
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	2300      	movs	r3, #0
 800d556:	6063      	str	r3, [r4, #4]
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0308 	orr.w	r3, r3, #8
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	b94b      	cbnz	r3, 800d57c <__swsetup_r+0x7c>
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d572:	d003      	beq.n	800d57c <__swsetup_r+0x7c>
 800d574:	4621      	mov	r1, r4
 800d576:	4628      	mov	r0, r5
 800d578:	f000 f884 	bl	800d684 <__smakebuf_r>
 800d57c:	89a0      	ldrh	r0, [r4, #12]
 800d57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d582:	f010 0301 	ands.w	r3, r0, #1
 800d586:	d00a      	beq.n	800d59e <__swsetup_r+0x9e>
 800d588:	2300      	movs	r3, #0
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	6963      	ldr	r3, [r4, #20]
 800d58e:	425b      	negs	r3, r3
 800d590:	61a3      	str	r3, [r4, #24]
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	b943      	cbnz	r3, 800d5a8 <__swsetup_r+0xa8>
 800d596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d59a:	d1c4      	bne.n	800d526 <__swsetup_r+0x26>
 800d59c:	bd38      	pop	{r3, r4, r5, pc}
 800d59e:	0781      	lsls	r1, r0, #30
 800d5a0:	bf58      	it	pl
 800d5a2:	6963      	ldrpl	r3, [r4, #20]
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	e7f4      	b.n	800d592 <__swsetup_r+0x92>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e7f7      	b.n	800d59c <__swsetup_r+0x9c>
 800d5ac:	200001dc 	.word	0x200001dc

0800d5b0 <_raise_r>:
 800d5b0:	291f      	cmp	r1, #31
 800d5b2:	b538      	push	{r3, r4, r5, lr}
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	d904      	bls.n	800d5c4 <_raise_r+0x14>
 800d5ba:	2316      	movs	r3, #22
 800d5bc:	6003      	str	r3, [r0, #0]
 800d5be:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5c6:	b112      	cbz	r2, 800d5ce <_raise_r+0x1e>
 800d5c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5cc:	b94b      	cbnz	r3, 800d5e2 <_raise_r+0x32>
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 f830 	bl	800d634 <_getpid_r>
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	4620      	mov	r0, r4
 800d5da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5de:	f000 b817 	b.w	800d610 <_kill_r>
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d00a      	beq.n	800d5fc <_raise_r+0x4c>
 800d5e6:	1c59      	adds	r1, r3, #1
 800d5e8:	d103      	bne.n	800d5f2 <_raise_r+0x42>
 800d5ea:	2316      	movs	r3, #22
 800d5ec:	6003      	str	r3, [r0, #0]
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	e7e7      	b.n	800d5c2 <_raise_r+0x12>
 800d5f2:	2400      	movs	r4, #0
 800d5f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	4798      	blx	r3
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e7e0      	b.n	800d5c2 <_raise_r+0x12>

0800d600 <raise>:
 800d600:	4b02      	ldr	r3, [pc, #8]	; (800d60c <raise+0xc>)
 800d602:	4601      	mov	r1, r0
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	f7ff bfd3 	b.w	800d5b0 <_raise_r>
 800d60a:	bf00      	nop
 800d60c:	200001dc 	.word	0x200001dc

0800d610 <_kill_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d07      	ldr	r5, [pc, #28]	; (800d630 <_kill_r+0x20>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	4611      	mov	r1, r2
 800d61c:	602b      	str	r3, [r5, #0]
 800d61e:	f7f6 f937 	bl	8003890 <_kill>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	d102      	bne.n	800d62c <_kill_r+0x1c>
 800d626:	682b      	ldr	r3, [r5, #0]
 800d628:	b103      	cbz	r3, 800d62c <_kill_r+0x1c>
 800d62a:	6023      	str	r3, [r4, #0]
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	bf00      	nop
 800d630:	2000532c 	.word	0x2000532c

0800d634 <_getpid_r>:
 800d634:	f7f6 b924 	b.w	8003880 <_getpid>

0800d638 <__swhatbuf_r>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	460c      	mov	r4, r1
 800d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d640:	2900      	cmp	r1, #0
 800d642:	b096      	sub	sp, #88	; 0x58
 800d644:	4615      	mov	r5, r2
 800d646:	461e      	mov	r6, r3
 800d648:	da0d      	bge.n	800d666 <__swhatbuf_r+0x2e>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d650:	f04f 0100 	mov.w	r1, #0
 800d654:	bf0c      	ite	eq
 800d656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d65a:	2340      	movne	r3, #64	; 0x40
 800d65c:	2000      	movs	r0, #0
 800d65e:	6031      	str	r1, [r6, #0]
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	b016      	add	sp, #88	; 0x58
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	466a      	mov	r2, sp
 800d668:	f000 f848 	bl	800d6fc <_fstat_r>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	dbec      	blt.n	800d64a <__swhatbuf_r+0x12>
 800d670:	9901      	ldr	r1, [sp, #4]
 800d672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d67a:	4259      	negs	r1, r3
 800d67c:	4159      	adcs	r1, r3
 800d67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d682:	e7eb      	b.n	800d65c <__swhatbuf_r+0x24>

0800d684 <__smakebuf_r>:
 800d684:	898b      	ldrh	r3, [r1, #12]
 800d686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d688:	079d      	lsls	r5, r3, #30
 800d68a:	4606      	mov	r6, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	d507      	bpl.n	800d6a0 <__smakebuf_r+0x1c>
 800d690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	2301      	movs	r3, #1
 800d69a:	6163      	str	r3, [r4, #20]
 800d69c:	b002      	add	sp, #8
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	ab01      	add	r3, sp, #4
 800d6a2:	466a      	mov	r2, sp
 800d6a4:	f7ff ffc8 	bl	800d638 <__swhatbuf_r>
 800d6a8:	9900      	ldr	r1, [sp, #0]
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f7fe fec9 	bl	800c444 <_malloc_r>
 800d6b2:	b948      	cbnz	r0, 800d6c8 <__smakebuf_r+0x44>
 800d6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b8:	059a      	lsls	r2, r3, #22
 800d6ba:	d4ef      	bmi.n	800d69c <__smakebuf_r+0x18>
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	f043 0302 	orr.w	r3, r3, #2
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	e7e3      	b.n	800d690 <__smakebuf_r+0xc>
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	6020      	str	r0, [r4, #0]
 800d6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	9b00      	ldr	r3, [sp, #0]
 800d6d4:	6163      	str	r3, [r4, #20]
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	6120      	str	r0, [r4, #16]
 800d6da:	b15b      	cbz	r3, 800d6f4 <__smakebuf_r+0x70>
 800d6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f000 f81d 	bl	800d720 <_isatty_r>
 800d6e6:	b128      	cbz	r0, 800d6f4 <__smakebuf_r+0x70>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	f023 0303 	bic.w	r3, r3, #3
 800d6ee:	f043 0301 	orr.w	r3, r3, #1
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	431d      	orrs	r5, r3
 800d6f8:	81a5      	strh	r5, [r4, #12]
 800d6fa:	e7cf      	b.n	800d69c <__smakebuf_r+0x18>

0800d6fc <_fstat_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_fstat_r+0x20>)
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f7f6 f920 	bl	800394e <_fstat>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d102      	bne.n	800d718 <_fstat_r+0x1c>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	b103      	cbz	r3, 800d718 <_fstat_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd38      	pop	{r3, r4, r5, pc}
 800d71a:	bf00      	nop
 800d71c:	2000532c 	.word	0x2000532c

0800d720 <_isatty_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d06      	ldr	r5, [pc, #24]	; (800d73c <_isatty_r+0x1c>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f6 f91f 	bl	800396e <_isatty>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_isatty_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_isatty_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	2000532c 	.word	0x2000532c

0800d740 <pow>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	ed2d 8b02 	vpush	{d8}
 800d746:	eeb0 8a40 	vmov.f32	s16, s0
 800d74a:	eef0 8a60 	vmov.f32	s17, s1
 800d74e:	ec55 4b11 	vmov	r4, r5, d1
 800d752:	f000 f995 	bl	800da80 <__ieee754_pow>
 800d756:	4622      	mov	r2, r4
 800d758:	462b      	mov	r3, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	ec57 6b10 	vmov	r6, r7, d0
 800d762:	f7f3 fa03 	bl	8000b6c <__aeabi_dcmpun>
 800d766:	2800      	cmp	r0, #0
 800d768:	d13b      	bne.n	800d7e2 <pow+0xa2>
 800d76a:	ec51 0b18 	vmov	r0, r1, d8
 800d76e:	2200      	movs	r2, #0
 800d770:	2300      	movs	r3, #0
 800d772:	f7f3 f9c9 	bl	8000b08 <__aeabi_dcmpeq>
 800d776:	b1b8      	cbz	r0, 800d7a8 <pow+0x68>
 800d778:	2200      	movs	r2, #0
 800d77a:	2300      	movs	r3, #0
 800d77c:	4620      	mov	r0, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	f7f3 f9c2 	bl	8000b08 <__aeabi_dcmpeq>
 800d784:	2800      	cmp	r0, #0
 800d786:	d146      	bne.n	800d816 <pow+0xd6>
 800d788:	ec45 4b10 	vmov	d0, r4, r5
 800d78c:	f000 f848 	bl	800d820 <finite>
 800d790:	b338      	cbz	r0, 800d7e2 <pow+0xa2>
 800d792:	2200      	movs	r2, #0
 800d794:	2300      	movs	r3, #0
 800d796:	4620      	mov	r0, r4
 800d798:	4629      	mov	r1, r5
 800d79a:	f7f3 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800d79e:	b300      	cbz	r0, 800d7e2 <pow+0xa2>
 800d7a0:	f7fd ff24 	bl	800b5ec <__errno>
 800d7a4:	2322      	movs	r3, #34	; 0x22
 800d7a6:	e01b      	b.n	800d7e0 <pow+0xa0>
 800d7a8:	ec47 6b10 	vmov	d0, r6, r7
 800d7ac:	f000 f838 	bl	800d820 <finite>
 800d7b0:	b9e0      	cbnz	r0, 800d7ec <pow+0xac>
 800d7b2:	eeb0 0a48 	vmov.f32	s0, s16
 800d7b6:	eef0 0a68 	vmov.f32	s1, s17
 800d7ba:	f000 f831 	bl	800d820 <finite>
 800d7be:	b1a8      	cbz	r0, 800d7ec <pow+0xac>
 800d7c0:	ec45 4b10 	vmov	d0, r4, r5
 800d7c4:	f000 f82c 	bl	800d820 <finite>
 800d7c8:	b180      	cbz	r0, 800d7ec <pow+0xac>
 800d7ca:	4632      	mov	r2, r6
 800d7cc:	463b      	mov	r3, r7
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	4639      	mov	r1, r7
 800d7d2:	f7f3 f9cb 	bl	8000b6c <__aeabi_dcmpun>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d0e2      	beq.n	800d7a0 <pow+0x60>
 800d7da:	f7fd ff07 	bl	800b5ec <__errno>
 800d7de:	2321      	movs	r3, #33	; 0x21
 800d7e0:	6003      	str	r3, [r0, #0]
 800d7e2:	ecbd 8b02 	vpop	{d8}
 800d7e6:	ec47 6b10 	vmov	d0, r6, r7
 800d7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	f7f3 f988 	bl	8000b08 <__aeabi_dcmpeq>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d0f2      	beq.n	800d7e2 <pow+0xa2>
 800d7fc:	eeb0 0a48 	vmov.f32	s0, s16
 800d800:	eef0 0a68 	vmov.f32	s1, s17
 800d804:	f000 f80c 	bl	800d820 <finite>
 800d808:	2800      	cmp	r0, #0
 800d80a:	d0ea      	beq.n	800d7e2 <pow+0xa2>
 800d80c:	ec45 4b10 	vmov	d0, r4, r5
 800d810:	f000 f806 	bl	800d820 <finite>
 800d814:	e7c3      	b.n	800d79e <pow+0x5e>
 800d816:	4f01      	ldr	r7, [pc, #4]	; (800d81c <pow+0xdc>)
 800d818:	2600      	movs	r6, #0
 800d81a:	e7e2      	b.n	800d7e2 <pow+0xa2>
 800d81c:	3ff00000 	.word	0x3ff00000

0800d820 <finite>:
 800d820:	b082      	sub	sp, #8
 800d822:	ed8d 0b00 	vstr	d0, [sp]
 800d826:	9801      	ldr	r0, [sp, #4]
 800d828:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d82c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d830:	0fc0      	lsrs	r0, r0, #31
 800d832:	b002      	add	sp, #8
 800d834:	4770      	bx	lr
	...

0800d838 <__ieee754_sqrt>:
 800d838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83c:	ec55 4b10 	vmov	r4, r5, d0
 800d840:	4e67      	ldr	r6, [pc, #412]	; (800d9e0 <__ieee754_sqrt+0x1a8>)
 800d842:	43ae      	bics	r6, r5
 800d844:	ee10 0a10 	vmov	r0, s0
 800d848:	ee10 2a10 	vmov	r2, s0
 800d84c:	4629      	mov	r1, r5
 800d84e:	462b      	mov	r3, r5
 800d850:	d10d      	bne.n	800d86e <__ieee754_sqrt+0x36>
 800d852:	f7f2 fef1 	bl	8000638 <__aeabi_dmul>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	4620      	mov	r0, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	f7f2 fd35 	bl	80002cc <__adddf3>
 800d862:	4604      	mov	r4, r0
 800d864:	460d      	mov	r5, r1
 800d866:	ec45 4b10 	vmov	d0, r4, r5
 800d86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86e:	2d00      	cmp	r5, #0
 800d870:	dc0b      	bgt.n	800d88a <__ieee754_sqrt+0x52>
 800d872:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d876:	4326      	orrs	r6, r4
 800d878:	d0f5      	beq.n	800d866 <__ieee754_sqrt+0x2e>
 800d87a:	b135      	cbz	r5, 800d88a <__ieee754_sqrt+0x52>
 800d87c:	f7f2 fd24 	bl	80002c8 <__aeabi_dsub>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	f7f3 f802 	bl	800088c <__aeabi_ddiv>
 800d888:	e7eb      	b.n	800d862 <__ieee754_sqrt+0x2a>
 800d88a:	1509      	asrs	r1, r1, #20
 800d88c:	f000 808d 	beq.w	800d9aa <__ieee754_sqrt+0x172>
 800d890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d894:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d89c:	07c9      	lsls	r1, r1, #31
 800d89e:	bf5c      	itt	pl
 800d8a0:	005b      	lslpl	r3, r3, #1
 800d8a2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d8a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d8aa:	bf58      	it	pl
 800d8ac:	0052      	lslpl	r2, r2, #1
 800d8ae:	2500      	movs	r5, #0
 800d8b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8b4:	1076      	asrs	r6, r6, #1
 800d8b6:	0052      	lsls	r2, r2, #1
 800d8b8:	f04f 0e16 	mov.w	lr, #22
 800d8bc:	46ac      	mov	ip, r5
 800d8be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d8c2:	eb0c 0001 	add.w	r0, ip, r1
 800d8c6:	4298      	cmp	r0, r3
 800d8c8:	bfde      	ittt	le
 800d8ca:	1a1b      	suble	r3, r3, r0
 800d8cc:	eb00 0c01 	addle.w	ip, r0, r1
 800d8d0:	186d      	addle	r5, r5, r1
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	f1be 0e01 	subs.w	lr, lr, #1
 800d8d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d8e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8e4:	d1ed      	bne.n	800d8c2 <__ieee754_sqrt+0x8a>
 800d8e6:	4674      	mov	r4, lr
 800d8e8:	2720      	movs	r7, #32
 800d8ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d8ee:	4563      	cmp	r3, ip
 800d8f0:	eb01 000e 	add.w	r0, r1, lr
 800d8f4:	dc02      	bgt.n	800d8fc <__ieee754_sqrt+0xc4>
 800d8f6:	d113      	bne.n	800d920 <__ieee754_sqrt+0xe8>
 800d8f8:	4290      	cmp	r0, r2
 800d8fa:	d811      	bhi.n	800d920 <__ieee754_sqrt+0xe8>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	eb00 0e01 	add.w	lr, r0, r1
 800d902:	da57      	bge.n	800d9b4 <__ieee754_sqrt+0x17c>
 800d904:	f1be 0f00 	cmp.w	lr, #0
 800d908:	db54      	blt.n	800d9b4 <__ieee754_sqrt+0x17c>
 800d90a:	f10c 0801 	add.w	r8, ip, #1
 800d90e:	eba3 030c 	sub.w	r3, r3, ip
 800d912:	4290      	cmp	r0, r2
 800d914:	bf88      	it	hi
 800d916:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d91a:	1a12      	subs	r2, r2, r0
 800d91c:	440c      	add	r4, r1
 800d91e:	46c4      	mov	ip, r8
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	3f01      	subs	r7, #1
 800d924:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d928:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d92c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d930:	d1dd      	bne.n	800d8ee <__ieee754_sqrt+0xb6>
 800d932:	4313      	orrs	r3, r2
 800d934:	d01b      	beq.n	800d96e <__ieee754_sqrt+0x136>
 800d936:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d9e4 <__ieee754_sqrt+0x1ac>
 800d93a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d9e8 <__ieee754_sqrt+0x1b0>
 800d93e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d942:	e9db 2300 	ldrd	r2, r3, [fp]
 800d946:	f7f2 fcbf 	bl	80002c8 <__aeabi_dsub>
 800d94a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f3 f8eb 	bl	8000b30 <__aeabi_dcmple>
 800d95a:	b140      	cbz	r0, 800d96e <__ieee754_sqrt+0x136>
 800d95c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d960:	e9da 0100 	ldrd	r0, r1, [sl]
 800d964:	e9db 2300 	ldrd	r2, r3, [fp]
 800d968:	d126      	bne.n	800d9b8 <__ieee754_sqrt+0x180>
 800d96a:	3501      	adds	r5, #1
 800d96c:	463c      	mov	r4, r7
 800d96e:	106a      	asrs	r2, r5, #1
 800d970:	0863      	lsrs	r3, r4, #1
 800d972:	07e9      	lsls	r1, r5, #31
 800d974:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d978:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d97c:	bf48      	it	mi
 800d97e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d982:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d986:	461c      	mov	r4, r3
 800d988:	e76d      	b.n	800d866 <__ieee754_sqrt+0x2e>
 800d98a:	0ad3      	lsrs	r3, r2, #11
 800d98c:	3815      	subs	r0, #21
 800d98e:	0552      	lsls	r2, r2, #21
 800d990:	2b00      	cmp	r3, #0
 800d992:	d0fa      	beq.n	800d98a <__ieee754_sqrt+0x152>
 800d994:	02dc      	lsls	r4, r3, #11
 800d996:	d50a      	bpl.n	800d9ae <__ieee754_sqrt+0x176>
 800d998:	f1c1 0420 	rsb	r4, r1, #32
 800d99c:	fa22 f404 	lsr.w	r4, r2, r4
 800d9a0:	1e4d      	subs	r5, r1, #1
 800d9a2:	408a      	lsls	r2, r1
 800d9a4:	4323      	orrs	r3, r4
 800d9a6:	1b41      	subs	r1, r0, r5
 800d9a8:	e772      	b.n	800d890 <__ieee754_sqrt+0x58>
 800d9aa:	4608      	mov	r0, r1
 800d9ac:	e7f0      	b.n	800d990 <__ieee754_sqrt+0x158>
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	e7ef      	b.n	800d994 <__ieee754_sqrt+0x15c>
 800d9b4:	46e0      	mov	r8, ip
 800d9b6:	e7aa      	b.n	800d90e <__ieee754_sqrt+0xd6>
 800d9b8:	f7f2 fc88 	bl	80002cc <__adddf3>
 800d9bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	f7f3 f8a8 	bl	8000b1c <__aeabi_dcmplt>
 800d9cc:	b120      	cbz	r0, 800d9d8 <__ieee754_sqrt+0x1a0>
 800d9ce:	1ca0      	adds	r0, r4, #2
 800d9d0:	bf08      	it	eq
 800d9d2:	3501      	addeq	r5, #1
 800d9d4:	3402      	adds	r4, #2
 800d9d6:	e7ca      	b.n	800d96e <__ieee754_sqrt+0x136>
 800d9d8:	3401      	adds	r4, #1
 800d9da:	f024 0401 	bic.w	r4, r4, #1
 800d9de:	e7c6      	b.n	800d96e <__ieee754_sqrt+0x136>
 800d9e0:	7ff00000 	.word	0x7ff00000
 800d9e4:	200001e0 	.word	0x200001e0
 800d9e8:	200001e8 	.word	0x200001e8

0800d9ec <round>:
 800d9ec:	ec53 2b10 	vmov	r2, r3, d0
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800d9f6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800d9fa:	2813      	cmp	r0, #19
 800d9fc:	ee10 5a10 	vmov	r5, s0
 800da00:	4619      	mov	r1, r3
 800da02:	dc18      	bgt.n	800da36 <round+0x4a>
 800da04:	2800      	cmp	r0, #0
 800da06:	da09      	bge.n	800da1c <round+0x30>
 800da08:	3001      	adds	r0, #1
 800da0a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800da0e:	d103      	bne.n	800da18 <round+0x2c>
 800da10:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800da14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800da18:	2300      	movs	r3, #0
 800da1a:	e02a      	b.n	800da72 <round+0x86>
 800da1c:	4c16      	ldr	r4, [pc, #88]	; (800da78 <round+0x8c>)
 800da1e:	4104      	asrs	r4, r0
 800da20:	ea03 0604 	and.w	r6, r3, r4
 800da24:	4316      	orrs	r6, r2
 800da26:	d011      	beq.n	800da4c <round+0x60>
 800da28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da2c:	4103      	asrs	r3, r0
 800da2e:	440b      	add	r3, r1
 800da30:	ea23 0104 	bic.w	r1, r3, r4
 800da34:	e7f0      	b.n	800da18 <round+0x2c>
 800da36:	2833      	cmp	r0, #51	; 0x33
 800da38:	dd0b      	ble.n	800da52 <round+0x66>
 800da3a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800da3e:	d105      	bne.n	800da4c <round+0x60>
 800da40:	ee10 0a10 	vmov	r0, s0
 800da44:	f7f2 fc42 	bl	80002cc <__adddf3>
 800da48:	4602      	mov	r2, r0
 800da4a:	460b      	mov	r3, r1
 800da4c:	ec43 2b10 	vmov	d0, r2, r3
 800da50:	bd70      	pop	{r4, r5, r6, pc}
 800da52:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800da56:	f04f 34ff 	mov.w	r4, #4294967295
 800da5a:	40f4      	lsrs	r4, r6
 800da5c:	4214      	tst	r4, r2
 800da5e:	d0f5      	beq.n	800da4c <round+0x60>
 800da60:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800da64:	2301      	movs	r3, #1
 800da66:	4083      	lsls	r3, r0
 800da68:	195b      	adds	r3, r3, r5
 800da6a:	bf28      	it	cs
 800da6c:	3101      	addcs	r1, #1
 800da6e:	ea23 0304 	bic.w	r3, r3, r4
 800da72:	461a      	mov	r2, r3
 800da74:	460b      	mov	r3, r1
 800da76:	e7e9      	b.n	800da4c <round+0x60>
 800da78:	000fffff 	.word	0x000fffff
 800da7c:	00000000 	.word	0x00000000

0800da80 <__ieee754_pow>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	ed2d 8b06 	vpush	{d8-d10}
 800da88:	b089      	sub	sp, #36	; 0x24
 800da8a:	ed8d 1b00 	vstr	d1, [sp]
 800da8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800da92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800da96:	ea58 0102 	orrs.w	r1, r8, r2
 800da9a:	ec57 6b10 	vmov	r6, r7, d0
 800da9e:	d115      	bne.n	800dacc <__ieee754_pow+0x4c>
 800daa0:	19b3      	adds	r3, r6, r6
 800daa2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800daa6:	4152      	adcs	r2, r2
 800daa8:	4299      	cmp	r1, r3
 800daaa:	4b89      	ldr	r3, [pc, #548]	; (800dcd0 <__ieee754_pow+0x250>)
 800daac:	4193      	sbcs	r3, r2
 800daae:	f080 84d1 	bcs.w	800e454 <__ieee754_pow+0x9d4>
 800dab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dab6:	4630      	mov	r0, r6
 800dab8:	4639      	mov	r1, r7
 800daba:	f7f2 fc07 	bl	80002cc <__adddf3>
 800dabe:	ec41 0b10 	vmov	d0, r0, r1
 800dac2:	b009      	add	sp, #36	; 0x24
 800dac4:	ecbd 8b06 	vpop	{d8-d10}
 800dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dacc:	4b81      	ldr	r3, [pc, #516]	; (800dcd4 <__ieee754_pow+0x254>)
 800dace:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dad2:	429c      	cmp	r4, r3
 800dad4:	ee10 aa10 	vmov	sl, s0
 800dad8:	463d      	mov	r5, r7
 800dada:	dc06      	bgt.n	800daea <__ieee754_pow+0x6a>
 800dadc:	d101      	bne.n	800dae2 <__ieee754_pow+0x62>
 800dade:	2e00      	cmp	r6, #0
 800dae0:	d1e7      	bne.n	800dab2 <__ieee754_pow+0x32>
 800dae2:	4598      	cmp	r8, r3
 800dae4:	dc01      	bgt.n	800daea <__ieee754_pow+0x6a>
 800dae6:	d10f      	bne.n	800db08 <__ieee754_pow+0x88>
 800dae8:	b172      	cbz	r2, 800db08 <__ieee754_pow+0x88>
 800daea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800daee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800daf2:	ea55 050a 	orrs.w	r5, r5, sl
 800daf6:	d1dc      	bne.n	800dab2 <__ieee754_pow+0x32>
 800daf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dafc:	18db      	adds	r3, r3, r3
 800dafe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800db02:	4152      	adcs	r2, r2
 800db04:	429d      	cmp	r5, r3
 800db06:	e7d0      	b.n	800daaa <__ieee754_pow+0x2a>
 800db08:	2d00      	cmp	r5, #0
 800db0a:	da3b      	bge.n	800db84 <__ieee754_pow+0x104>
 800db0c:	4b72      	ldr	r3, [pc, #456]	; (800dcd8 <__ieee754_pow+0x258>)
 800db0e:	4598      	cmp	r8, r3
 800db10:	dc51      	bgt.n	800dbb6 <__ieee754_pow+0x136>
 800db12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800db16:	4598      	cmp	r8, r3
 800db18:	f340 84ab 	ble.w	800e472 <__ieee754_pow+0x9f2>
 800db1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800db20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db24:	2b14      	cmp	r3, #20
 800db26:	dd0f      	ble.n	800db48 <__ieee754_pow+0xc8>
 800db28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800db2c:	fa22 f103 	lsr.w	r1, r2, r3
 800db30:	fa01 f303 	lsl.w	r3, r1, r3
 800db34:	4293      	cmp	r3, r2
 800db36:	f040 849c 	bne.w	800e472 <__ieee754_pow+0x9f2>
 800db3a:	f001 0101 	and.w	r1, r1, #1
 800db3e:	f1c1 0302 	rsb	r3, r1, #2
 800db42:	9304      	str	r3, [sp, #16]
 800db44:	b182      	cbz	r2, 800db68 <__ieee754_pow+0xe8>
 800db46:	e05f      	b.n	800dc08 <__ieee754_pow+0x188>
 800db48:	2a00      	cmp	r2, #0
 800db4a:	d15b      	bne.n	800dc04 <__ieee754_pow+0x184>
 800db4c:	f1c3 0314 	rsb	r3, r3, #20
 800db50:	fa48 f103 	asr.w	r1, r8, r3
 800db54:	fa01 f303 	lsl.w	r3, r1, r3
 800db58:	4543      	cmp	r3, r8
 800db5a:	f040 8487 	bne.w	800e46c <__ieee754_pow+0x9ec>
 800db5e:	f001 0101 	and.w	r1, r1, #1
 800db62:	f1c1 0302 	rsb	r3, r1, #2
 800db66:	9304      	str	r3, [sp, #16]
 800db68:	4b5c      	ldr	r3, [pc, #368]	; (800dcdc <__ieee754_pow+0x25c>)
 800db6a:	4598      	cmp	r8, r3
 800db6c:	d132      	bne.n	800dbd4 <__ieee754_pow+0x154>
 800db6e:	f1b9 0f00 	cmp.w	r9, #0
 800db72:	f280 8477 	bge.w	800e464 <__ieee754_pow+0x9e4>
 800db76:	4959      	ldr	r1, [pc, #356]	; (800dcdc <__ieee754_pow+0x25c>)
 800db78:	4632      	mov	r2, r6
 800db7a:	463b      	mov	r3, r7
 800db7c:	2000      	movs	r0, #0
 800db7e:	f7f2 fe85 	bl	800088c <__aeabi_ddiv>
 800db82:	e79c      	b.n	800dabe <__ieee754_pow+0x3e>
 800db84:	2300      	movs	r3, #0
 800db86:	9304      	str	r3, [sp, #16]
 800db88:	2a00      	cmp	r2, #0
 800db8a:	d13d      	bne.n	800dc08 <__ieee754_pow+0x188>
 800db8c:	4b51      	ldr	r3, [pc, #324]	; (800dcd4 <__ieee754_pow+0x254>)
 800db8e:	4598      	cmp	r8, r3
 800db90:	d1ea      	bne.n	800db68 <__ieee754_pow+0xe8>
 800db92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800db96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800db9a:	ea53 030a 	orrs.w	r3, r3, sl
 800db9e:	f000 8459 	beq.w	800e454 <__ieee754_pow+0x9d4>
 800dba2:	4b4f      	ldr	r3, [pc, #316]	; (800dce0 <__ieee754_pow+0x260>)
 800dba4:	429c      	cmp	r4, r3
 800dba6:	dd08      	ble.n	800dbba <__ieee754_pow+0x13a>
 800dba8:	f1b9 0f00 	cmp.w	r9, #0
 800dbac:	f2c0 8456 	blt.w	800e45c <__ieee754_pow+0x9dc>
 800dbb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbb4:	e783      	b.n	800dabe <__ieee754_pow+0x3e>
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	e7e5      	b.n	800db86 <__ieee754_pow+0x106>
 800dbba:	f1b9 0f00 	cmp.w	r9, #0
 800dbbe:	f04f 0000 	mov.w	r0, #0
 800dbc2:	f04f 0100 	mov.w	r1, #0
 800dbc6:	f6bf af7a 	bge.w	800dabe <__ieee754_pow+0x3e>
 800dbca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dbce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dbd2:	e774      	b.n	800dabe <__ieee754_pow+0x3e>
 800dbd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dbd8:	d106      	bne.n	800dbe8 <__ieee754_pow+0x168>
 800dbda:	4632      	mov	r2, r6
 800dbdc:	463b      	mov	r3, r7
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	f7f2 fd29 	bl	8000638 <__aeabi_dmul>
 800dbe6:	e76a      	b.n	800dabe <__ieee754_pow+0x3e>
 800dbe8:	4b3e      	ldr	r3, [pc, #248]	; (800dce4 <__ieee754_pow+0x264>)
 800dbea:	4599      	cmp	r9, r3
 800dbec:	d10c      	bne.n	800dc08 <__ieee754_pow+0x188>
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	db0a      	blt.n	800dc08 <__ieee754_pow+0x188>
 800dbf2:	ec47 6b10 	vmov	d0, r6, r7
 800dbf6:	b009      	add	sp, #36	; 0x24
 800dbf8:	ecbd 8b06 	vpop	{d8-d10}
 800dbfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc00:	f7ff be1a 	b.w	800d838 <__ieee754_sqrt>
 800dc04:	2300      	movs	r3, #0
 800dc06:	9304      	str	r3, [sp, #16]
 800dc08:	ec47 6b10 	vmov	d0, r6, r7
 800dc0c:	f000 fc62 	bl	800e4d4 <fabs>
 800dc10:	ec51 0b10 	vmov	r0, r1, d0
 800dc14:	f1ba 0f00 	cmp.w	sl, #0
 800dc18:	d129      	bne.n	800dc6e <__ieee754_pow+0x1ee>
 800dc1a:	b124      	cbz	r4, 800dc26 <__ieee754_pow+0x1a6>
 800dc1c:	4b2f      	ldr	r3, [pc, #188]	; (800dcdc <__ieee754_pow+0x25c>)
 800dc1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d123      	bne.n	800dc6e <__ieee754_pow+0x1ee>
 800dc26:	f1b9 0f00 	cmp.w	r9, #0
 800dc2a:	da05      	bge.n	800dc38 <__ieee754_pow+0x1b8>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	2000      	movs	r0, #0
 800dc32:	492a      	ldr	r1, [pc, #168]	; (800dcdc <__ieee754_pow+0x25c>)
 800dc34:	f7f2 fe2a 	bl	800088c <__aeabi_ddiv>
 800dc38:	2d00      	cmp	r5, #0
 800dc3a:	f6bf af40 	bge.w	800dabe <__ieee754_pow+0x3e>
 800dc3e:	9b04      	ldr	r3, [sp, #16]
 800dc40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dc44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dc48:	431c      	orrs	r4, r3
 800dc4a:	d108      	bne.n	800dc5e <__ieee754_pow+0x1de>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	4610      	mov	r0, r2
 800dc52:	4619      	mov	r1, r3
 800dc54:	f7f2 fb38 	bl	80002c8 <__aeabi_dsub>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	e78f      	b.n	800db7e <__ieee754_pow+0xfe>
 800dc5e:	9b04      	ldr	r3, [sp, #16]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	f47f af2c 	bne.w	800dabe <__ieee754_pow+0x3e>
 800dc66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	e727      	b.n	800dabe <__ieee754_pow+0x3e>
 800dc6e:	0feb      	lsrs	r3, r5, #31
 800dc70:	3b01      	subs	r3, #1
 800dc72:	9306      	str	r3, [sp, #24]
 800dc74:	9a06      	ldr	r2, [sp, #24]
 800dc76:	9b04      	ldr	r3, [sp, #16]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	d102      	bne.n	800dc82 <__ieee754_pow+0x202>
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	463b      	mov	r3, r7
 800dc80:	e7e6      	b.n	800dc50 <__ieee754_pow+0x1d0>
 800dc82:	4b19      	ldr	r3, [pc, #100]	; (800dce8 <__ieee754_pow+0x268>)
 800dc84:	4598      	cmp	r8, r3
 800dc86:	f340 80fb 	ble.w	800de80 <__ieee754_pow+0x400>
 800dc8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dc8e:	4598      	cmp	r8, r3
 800dc90:	4b13      	ldr	r3, [pc, #76]	; (800dce0 <__ieee754_pow+0x260>)
 800dc92:	dd0c      	ble.n	800dcae <__ieee754_pow+0x22e>
 800dc94:	429c      	cmp	r4, r3
 800dc96:	dc0f      	bgt.n	800dcb8 <__ieee754_pow+0x238>
 800dc98:	f1b9 0f00 	cmp.w	r9, #0
 800dc9c:	da0f      	bge.n	800dcbe <__ieee754_pow+0x23e>
 800dc9e:	2000      	movs	r0, #0
 800dca0:	b009      	add	sp, #36	; 0x24
 800dca2:	ecbd 8b06 	vpop	{d8-d10}
 800dca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcaa:	f000 bcc2 	b.w	800e632 <__math_oflow>
 800dcae:	429c      	cmp	r4, r3
 800dcb0:	dbf2      	blt.n	800dc98 <__ieee754_pow+0x218>
 800dcb2:	4b0a      	ldr	r3, [pc, #40]	; (800dcdc <__ieee754_pow+0x25c>)
 800dcb4:	429c      	cmp	r4, r3
 800dcb6:	dd19      	ble.n	800dcec <__ieee754_pow+0x26c>
 800dcb8:	f1b9 0f00 	cmp.w	r9, #0
 800dcbc:	dcef      	bgt.n	800dc9e <__ieee754_pow+0x21e>
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	b009      	add	sp, #36	; 0x24
 800dcc2:	ecbd 8b06 	vpop	{d8-d10}
 800dcc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcca:	f000 bca9 	b.w	800e620 <__math_uflow>
 800dcce:	bf00      	nop
 800dcd0:	fff00000 	.word	0xfff00000
 800dcd4:	7ff00000 	.word	0x7ff00000
 800dcd8:	433fffff 	.word	0x433fffff
 800dcdc:	3ff00000 	.word	0x3ff00000
 800dce0:	3fefffff 	.word	0x3fefffff
 800dce4:	3fe00000 	.word	0x3fe00000
 800dce8:	41e00000 	.word	0x41e00000
 800dcec:	4b60      	ldr	r3, [pc, #384]	; (800de70 <__ieee754_pow+0x3f0>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f7f2 faea 	bl	80002c8 <__aeabi_dsub>
 800dcf4:	a354      	add	r3, pc, #336	; (adr r3, 800de48 <__ieee754_pow+0x3c8>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	460d      	mov	r5, r1
 800dcfe:	f7f2 fc9b 	bl	8000638 <__aeabi_dmul>
 800dd02:	a353      	add	r3, pc, #332	; (adr r3, 800de50 <__ieee754_pow+0x3d0>)
 800dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd08:	4606      	mov	r6, r0
 800dd0a:	460f      	mov	r7, r1
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7f2 fc92 	bl	8000638 <__aeabi_dmul>
 800dd14:	4b57      	ldr	r3, [pc, #348]	; (800de74 <__ieee754_pow+0x3f4>)
 800dd16:	4682      	mov	sl, r0
 800dd18:	468b      	mov	fp, r1
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	f7f2 fc8a 	bl	8000638 <__aeabi_dmul>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	a14b      	add	r1, pc, #300	; (adr r1, 800de58 <__ieee754_pow+0x3d8>)
 800dd2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd2e:	f7f2 facb 	bl	80002c8 <__aeabi_dsub>
 800dd32:	4622      	mov	r2, r4
 800dd34:	462b      	mov	r3, r5
 800dd36:	f7f2 fc7f 	bl	8000638 <__aeabi_dmul>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	2000      	movs	r0, #0
 800dd40:	494d      	ldr	r1, [pc, #308]	; (800de78 <__ieee754_pow+0x3f8>)
 800dd42:	f7f2 fac1 	bl	80002c8 <__aeabi_dsub>
 800dd46:	4622      	mov	r2, r4
 800dd48:	4680      	mov	r8, r0
 800dd4a:	4689      	mov	r9, r1
 800dd4c:	462b      	mov	r3, r5
 800dd4e:	4620      	mov	r0, r4
 800dd50:	4629      	mov	r1, r5
 800dd52:	f7f2 fc71 	bl	8000638 <__aeabi_dmul>
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	f7f2 fc6b 	bl	8000638 <__aeabi_dmul>
 800dd62:	a33f      	add	r3, pc, #252	; (adr r3, 800de60 <__ieee754_pow+0x3e0>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fc66 	bl	8000638 <__aeabi_dmul>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4650      	mov	r0, sl
 800dd72:	4659      	mov	r1, fp
 800dd74:	f7f2 faa8 	bl	80002c8 <__aeabi_dsub>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4680      	mov	r8, r0
 800dd7e:	4689      	mov	r9, r1
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 faa2 	bl	80002cc <__adddf3>
 800dd88:	2000      	movs	r0, #0
 800dd8a:	4632      	mov	r2, r6
 800dd8c:	463b      	mov	r3, r7
 800dd8e:	4604      	mov	r4, r0
 800dd90:	460d      	mov	r5, r1
 800dd92:	f7f2 fa99 	bl	80002c8 <__aeabi_dsub>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4640      	mov	r0, r8
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	f7f2 fa93 	bl	80002c8 <__aeabi_dsub>
 800dda2:	9b04      	ldr	r3, [sp, #16]
 800dda4:	9a06      	ldr	r2, [sp, #24]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	4682      	mov	sl, r0
 800ddac:	468b      	mov	fp, r1
 800ddae:	f040 81e7 	bne.w	800e180 <__ieee754_pow+0x700>
 800ddb2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800de68 <__ieee754_pow+0x3e8>
 800ddb6:	eeb0 8a47 	vmov.f32	s16, s14
 800ddba:	eef0 8a67 	vmov.f32	s17, s15
 800ddbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ddc2:	2600      	movs	r6, #0
 800ddc4:	4632      	mov	r2, r6
 800ddc6:	463b      	mov	r3, r7
 800ddc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddcc:	f7f2 fa7c 	bl	80002c8 <__aeabi_dsub>
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	f7f2 fc30 	bl	8000638 <__aeabi_dmul>
 800ddd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dddc:	4680      	mov	r8, r0
 800ddde:	4689      	mov	r9, r1
 800dde0:	4650      	mov	r0, sl
 800dde2:	4659      	mov	r1, fp
 800dde4:	f7f2 fc28 	bl	8000638 <__aeabi_dmul>
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4640      	mov	r0, r8
 800ddee:	4649      	mov	r1, r9
 800ddf0:	f7f2 fa6c 	bl	80002cc <__adddf3>
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	463b      	mov	r3, r7
 800ddf8:	4680      	mov	r8, r0
 800ddfa:	4689      	mov	r9, r1
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	4629      	mov	r1, r5
 800de00:	f7f2 fc1a 	bl	8000638 <__aeabi_dmul>
 800de04:	460b      	mov	r3, r1
 800de06:	4604      	mov	r4, r0
 800de08:	460d      	mov	r5, r1
 800de0a:	4602      	mov	r2, r0
 800de0c:	4649      	mov	r1, r9
 800de0e:	4640      	mov	r0, r8
 800de10:	f7f2 fa5c 	bl	80002cc <__adddf3>
 800de14:	4b19      	ldr	r3, [pc, #100]	; (800de7c <__ieee754_pow+0x3fc>)
 800de16:	4299      	cmp	r1, r3
 800de18:	ec45 4b19 	vmov	d9, r4, r5
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	468b      	mov	fp, r1
 800de22:	f340 82f0 	ble.w	800e406 <__ieee754_pow+0x986>
 800de26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800de2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800de2e:	4303      	orrs	r3, r0
 800de30:	f000 81e4 	beq.w	800e1fc <__ieee754_pow+0x77c>
 800de34:	ec51 0b18 	vmov	r0, r1, d8
 800de38:	2200      	movs	r2, #0
 800de3a:	2300      	movs	r3, #0
 800de3c:	f7f2 fe6e 	bl	8000b1c <__aeabi_dcmplt>
 800de40:	3800      	subs	r0, #0
 800de42:	bf18      	it	ne
 800de44:	2001      	movne	r0, #1
 800de46:	e72b      	b.n	800dca0 <__ieee754_pow+0x220>
 800de48:	60000000 	.word	0x60000000
 800de4c:	3ff71547 	.word	0x3ff71547
 800de50:	f85ddf44 	.word	0xf85ddf44
 800de54:	3e54ae0b 	.word	0x3e54ae0b
 800de58:	55555555 	.word	0x55555555
 800de5c:	3fd55555 	.word	0x3fd55555
 800de60:	652b82fe 	.word	0x652b82fe
 800de64:	3ff71547 	.word	0x3ff71547
 800de68:	00000000 	.word	0x00000000
 800de6c:	bff00000 	.word	0xbff00000
 800de70:	3ff00000 	.word	0x3ff00000
 800de74:	3fd00000 	.word	0x3fd00000
 800de78:	3fe00000 	.word	0x3fe00000
 800de7c:	408fffff 	.word	0x408fffff
 800de80:	4bd5      	ldr	r3, [pc, #852]	; (800e1d8 <__ieee754_pow+0x758>)
 800de82:	402b      	ands	r3, r5
 800de84:	2200      	movs	r2, #0
 800de86:	b92b      	cbnz	r3, 800de94 <__ieee754_pow+0x414>
 800de88:	4bd4      	ldr	r3, [pc, #848]	; (800e1dc <__ieee754_pow+0x75c>)
 800de8a:	f7f2 fbd5 	bl	8000638 <__aeabi_dmul>
 800de8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800de92:	460c      	mov	r4, r1
 800de94:	1523      	asrs	r3, r4, #20
 800de96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800de9a:	4413      	add	r3, r2
 800de9c:	9305      	str	r3, [sp, #20]
 800de9e:	4bd0      	ldr	r3, [pc, #832]	; (800e1e0 <__ieee754_pow+0x760>)
 800dea0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dea4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dea8:	429c      	cmp	r4, r3
 800deaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800deae:	dd08      	ble.n	800dec2 <__ieee754_pow+0x442>
 800deb0:	4bcc      	ldr	r3, [pc, #816]	; (800e1e4 <__ieee754_pow+0x764>)
 800deb2:	429c      	cmp	r4, r3
 800deb4:	f340 8162 	ble.w	800e17c <__ieee754_pow+0x6fc>
 800deb8:	9b05      	ldr	r3, [sp, #20]
 800deba:	3301      	adds	r3, #1
 800debc:	9305      	str	r3, [sp, #20]
 800debe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dec2:	2400      	movs	r4, #0
 800dec4:	00e3      	lsls	r3, r4, #3
 800dec6:	9307      	str	r3, [sp, #28]
 800dec8:	4bc7      	ldr	r3, [pc, #796]	; (800e1e8 <__ieee754_pow+0x768>)
 800deca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dece:	ed93 7b00 	vldr	d7, [r3]
 800ded2:	4629      	mov	r1, r5
 800ded4:	ec53 2b17 	vmov	r2, r3, d7
 800ded8:	eeb0 9a47 	vmov.f32	s18, s14
 800dedc:	eef0 9a67 	vmov.f32	s19, s15
 800dee0:	4682      	mov	sl, r0
 800dee2:	f7f2 f9f1 	bl	80002c8 <__aeabi_dsub>
 800dee6:	4652      	mov	r2, sl
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	462b      	mov	r3, r5
 800deee:	ec51 0b19 	vmov	r0, r1, d9
 800def2:	f7f2 f9eb 	bl	80002cc <__adddf3>
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	2000      	movs	r0, #0
 800defc:	49bb      	ldr	r1, [pc, #748]	; (800e1ec <__ieee754_pow+0x76c>)
 800defe:	f7f2 fcc5 	bl	800088c <__aeabi_ddiv>
 800df02:	ec41 0b1a 	vmov	d10, r0, r1
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	4630      	mov	r0, r6
 800df0c:	4639      	mov	r1, r7
 800df0e:	f7f2 fb93 	bl	8000638 <__aeabi_dmul>
 800df12:	2300      	movs	r3, #0
 800df14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df18:	9302      	str	r3, [sp, #8]
 800df1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800df1e:	46ab      	mov	fp, r5
 800df20:	106d      	asrs	r5, r5, #1
 800df22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800df26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800df2a:	ec41 0b18 	vmov	d8, r0, r1
 800df2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800df32:	2200      	movs	r2, #0
 800df34:	4640      	mov	r0, r8
 800df36:	4649      	mov	r1, r9
 800df38:	4614      	mov	r4, r2
 800df3a:	461d      	mov	r5, r3
 800df3c:	f7f2 fb7c 	bl	8000638 <__aeabi_dmul>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4630      	mov	r0, r6
 800df46:	4639      	mov	r1, r7
 800df48:	f7f2 f9be 	bl	80002c8 <__aeabi_dsub>
 800df4c:	ec53 2b19 	vmov	r2, r3, d9
 800df50:	4606      	mov	r6, r0
 800df52:	460f      	mov	r7, r1
 800df54:	4620      	mov	r0, r4
 800df56:	4629      	mov	r1, r5
 800df58:	f7f2 f9b6 	bl	80002c8 <__aeabi_dsub>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4650      	mov	r0, sl
 800df62:	4659      	mov	r1, fp
 800df64:	f7f2 f9b0 	bl	80002c8 <__aeabi_dsub>
 800df68:	4642      	mov	r2, r8
 800df6a:	464b      	mov	r3, r9
 800df6c:	f7f2 fb64 	bl	8000638 <__aeabi_dmul>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4630      	mov	r0, r6
 800df76:	4639      	mov	r1, r7
 800df78:	f7f2 f9a6 	bl	80002c8 <__aeabi_dsub>
 800df7c:	ec53 2b1a 	vmov	r2, r3, d10
 800df80:	f7f2 fb5a 	bl	8000638 <__aeabi_dmul>
 800df84:	ec53 2b18 	vmov	r2, r3, d8
 800df88:	ec41 0b19 	vmov	d9, r0, r1
 800df8c:	ec51 0b18 	vmov	r0, r1, d8
 800df90:	f7f2 fb52 	bl	8000638 <__aeabi_dmul>
 800df94:	a37c      	add	r3, pc, #496	; (adr r3, 800e188 <__ieee754_pow+0x708>)
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	4604      	mov	r4, r0
 800df9c:	460d      	mov	r5, r1
 800df9e:	f7f2 fb4b 	bl	8000638 <__aeabi_dmul>
 800dfa2:	a37b      	add	r3, pc, #492	; (adr r3, 800e190 <__ieee754_pow+0x710>)
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	f7f2 f990 	bl	80002cc <__adddf3>
 800dfac:	4622      	mov	r2, r4
 800dfae:	462b      	mov	r3, r5
 800dfb0:	f7f2 fb42 	bl	8000638 <__aeabi_dmul>
 800dfb4:	a378      	add	r3, pc, #480	; (adr r3, 800e198 <__ieee754_pow+0x718>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f7f2 f987 	bl	80002cc <__adddf3>
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	462b      	mov	r3, r5
 800dfc2:	f7f2 fb39 	bl	8000638 <__aeabi_dmul>
 800dfc6:	a376      	add	r3, pc, #472	; (adr r3, 800e1a0 <__ieee754_pow+0x720>)
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	f7f2 f97e 	bl	80002cc <__adddf3>
 800dfd0:	4622      	mov	r2, r4
 800dfd2:	462b      	mov	r3, r5
 800dfd4:	f7f2 fb30 	bl	8000638 <__aeabi_dmul>
 800dfd8:	a373      	add	r3, pc, #460	; (adr r3, 800e1a8 <__ieee754_pow+0x728>)
 800dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfde:	f7f2 f975 	bl	80002cc <__adddf3>
 800dfe2:	4622      	mov	r2, r4
 800dfe4:	462b      	mov	r3, r5
 800dfe6:	f7f2 fb27 	bl	8000638 <__aeabi_dmul>
 800dfea:	a371      	add	r3, pc, #452	; (adr r3, 800e1b0 <__ieee754_pow+0x730>)
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f7f2 f96c 	bl	80002cc <__adddf3>
 800dff4:	4622      	mov	r2, r4
 800dff6:	4606      	mov	r6, r0
 800dff8:	460f      	mov	r7, r1
 800dffa:	462b      	mov	r3, r5
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 fb1a 	bl	8000638 <__aeabi_dmul>
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	4630      	mov	r0, r6
 800e00a:	4639      	mov	r1, r7
 800e00c:	f7f2 fb14 	bl	8000638 <__aeabi_dmul>
 800e010:	4642      	mov	r2, r8
 800e012:	4604      	mov	r4, r0
 800e014:	460d      	mov	r5, r1
 800e016:	464b      	mov	r3, r9
 800e018:	ec51 0b18 	vmov	r0, r1, d8
 800e01c:	f7f2 f956 	bl	80002cc <__adddf3>
 800e020:	ec53 2b19 	vmov	r2, r3, d9
 800e024:	f7f2 fb08 	bl	8000638 <__aeabi_dmul>
 800e028:	4622      	mov	r2, r4
 800e02a:	462b      	mov	r3, r5
 800e02c:	f7f2 f94e 	bl	80002cc <__adddf3>
 800e030:	4642      	mov	r2, r8
 800e032:	4682      	mov	sl, r0
 800e034:	468b      	mov	fp, r1
 800e036:	464b      	mov	r3, r9
 800e038:	4640      	mov	r0, r8
 800e03a:	4649      	mov	r1, r9
 800e03c:	f7f2 fafc 	bl	8000638 <__aeabi_dmul>
 800e040:	4b6b      	ldr	r3, [pc, #428]	; (800e1f0 <__ieee754_pow+0x770>)
 800e042:	2200      	movs	r2, #0
 800e044:	4606      	mov	r6, r0
 800e046:	460f      	mov	r7, r1
 800e048:	f7f2 f940 	bl	80002cc <__adddf3>
 800e04c:	4652      	mov	r2, sl
 800e04e:	465b      	mov	r3, fp
 800e050:	f7f2 f93c 	bl	80002cc <__adddf3>
 800e054:	2000      	movs	r0, #0
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	4640      	mov	r0, r8
 800e060:	4649      	mov	r1, r9
 800e062:	f7f2 fae9 	bl	8000638 <__aeabi_dmul>
 800e066:	4b62      	ldr	r3, [pc, #392]	; (800e1f0 <__ieee754_pow+0x770>)
 800e068:	4680      	mov	r8, r0
 800e06a:	4689      	mov	r9, r1
 800e06c:	2200      	movs	r2, #0
 800e06e:	4620      	mov	r0, r4
 800e070:	4629      	mov	r1, r5
 800e072:	f7f2 f929 	bl	80002c8 <__aeabi_dsub>
 800e076:	4632      	mov	r2, r6
 800e078:	463b      	mov	r3, r7
 800e07a:	f7f2 f925 	bl	80002c8 <__aeabi_dsub>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4650      	mov	r0, sl
 800e084:	4659      	mov	r1, fp
 800e086:	f7f2 f91f 	bl	80002c8 <__aeabi_dsub>
 800e08a:	ec53 2b18 	vmov	r2, r3, d8
 800e08e:	f7f2 fad3 	bl	8000638 <__aeabi_dmul>
 800e092:	4622      	mov	r2, r4
 800e094:	4606      	mov	r6, r0
 800e096:	460f      	mov	r7, r1
 800e098:	462b      	mov	r3, r5
 800e09a:	ec51 0b19 	vmov	r0, r1, d9
 800e09e:	f7f2 facb 	bl	8000638 <__aeabi_dmul>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	f7f2 f90f 	bl	80002cc <__adddf3>
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	460f      	mov	r7, r1
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4640      	mov	r0, r8
 800e0b8:	4649      	mov	r1, r9
 800e0ba:	f7f2 f907 	bl	80002cc <__adddf3>
 800e0be:	a33e      	add	r3, pc, #248	; (adr r3, 800e1b8 <__ieee754_pow+0x738>)
 800e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	460d      	mov	r5, r1
 800e0ca:	f7f2 fab5 	bl	8000638 <__aeabi_dmul>
 800e0ce:	4642      	mov	r2, r8
 800e0d0:	ec41 0b18 	vmov	d8, r0, r1
 800e0d4:	464b      	mov	r3, r9
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	4629      	mov	r1, r5
 800e0da:	f7f2 f8f5 	bl	80002c8 <__aeabi_dsub>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	f7f2 f8ef 	bl	80002c8 <__aeabi_dsub>
 800e0ea:	a335      	add	r3, pc, #212	; (adr r3, 800e1c0 <__ieee754_pow+0x740>)
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f7f2 faa2 	bl	8000638 <__aeabi_dmul>
 800e0f4:	a334      	add	r3, pc, #208	; (adr r3, 800e1c8 <__ieee754_pow+0x748>)
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	460f      	mov	r7, r1
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 fa99 	bl	8000638 <__aeabi_dmul>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	f7f2 f8dd 	bl	80002cc <__adddf3>
 800e112:	9a07      	ldr	r2, [sp, #28]
 800e114:	4b37      	ldr	r3, [pc, #220]	; (800e1f4 <__ieee754_pow+0x774>)
 800e116:	4413      	add	r3, r2
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	f7f2 f8d6 	bl	80002cc <__adddf3>
 800e120:	4682      	mov	sl, r0
 800e122:	9805      	ldr	r0, [sp, #20]
 800e124:	468b      	mov	fp, r1
 800e126:	f7f2 fa1d 	bl	8000564 <__aeabi_i2d>
 800e12a:	9a07      	ldr	r2, [sp, #28]
 800e12c:	4b32      	ldr	r3, [pc, #200]	; (800e1f8 <__ieee754_pow+0x778>)
 800e12e:	4413      	add	r3, r2
 800e130:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e134:	4606      	mov	r6, r0
 800e136:	460f      	mov	r7, r1
 800e138:	4652      	mov	r2, sl
 800e13a:	465b      	mov	r3, fp
 800e13c:	ec51 0b18 	vmov	r0, r1, d8
 800e140:	f7f2 f8c4 	bl	80002cc <__adddf3>
 800e144:	4642      	mov	r2, r8
 800e146:	464b      	mov	r3, r9
 800e148:	f7f2 f8c0 	bl	80002cc <__adddf3>
 800e14c:	4632      	mov	r2, r6
 800e14e:	463b      	mov	r3, r7
 800e150:	f7f2 f8bc 	bl	80002cc <__adddf3>
 800e154:	2000      	movs	r0, #0
 800e156:	4632      	mov	r2, r6
 800e158:	463b      	mov	r3, r7
 800e15a:	4604      	mov	r4, r0
 800e15c:	460d      	mov	r5, r1
 800e15e:	f7f2 f8b3 	bl	80002c8 <__aeabi_dsub>
 800e162:	4642      	mov	r2, r8
 800e164:	464b      	mov	r3, r9
 800e166:	f7f2 f8af 	bl	80002c8 <__aeabi_dsub>
 800e16a:	ec53 2b18 	vmov	r2, r3, d8
 800e16e:	f7f2 f8ab 	bl	80002c8 <__aeabi_dsub>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4650      	mov	r0, sl
 800e178:	4659      	mov	r1, fp
 800e17a:	e610      	b.n	800dd9e <__ieee754_pow+0x31e>
 800e17c:	2401      	movs	r4, #1
 800e17e:	e6a1      	b.n	800dec4 <__ieee754_pow+0x444>
 800e180:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e1d0 <__ieee754_pow+0x750>
 800e184:	e617      	b.n	800ddb6 <__ieee754_pow+0x336>
 800e186:	bf00      	nop
 800e188:	4a454eef 	.word	0x4a454eef
 800e18c:	3fca7e28 	.word	0x3fca7e28
 800e190:	93c9db65 	.word	0x93c9db65
 800e194:	3fcd864a 	.word	0x3fcd864a
 800e198:	a91d4101 	.word	0xa91d4101
 800e19c:	3fd17460 	.word	0x3fd17460
 800e1a0:	518f264d 	.word	0x518f264d
 800e1a4:	3fd55555 	.word	0x3fd55555
 800e1a8:	db6fabff 	.word	0xdb6fabff
 800e1ac:	3fdb6db6 	.word	0x3fdb6db6
 800e1b0:	33333303 	.word	0x33333303
 800e1b4:	3fe33333 	.word	0x3fe33333
 800e1b8:	e0000000 	.word	0xe0000000
 800e1bc:	3feec709 	.word	0x3feec709
 800e1c0:	dc3a03fd 	.word	0xdc3a03fd
 800e1c4:	3feec709 	.word	0x3feec709
 800e1c8:	145b01f5 	.word	0x145b01f5
 800e1cc:	be3e2fe0 	.word	0xbe3e2fe0
 800e1d0:	00000000 	.word	0x00000000
 800e1d4:	3ff00000 	.word	0x3ff00000
 800e1d8:	7ff00000 	.word	0x7ff00000
 800e1dc:	43400000 	.word	0x43400000
 800e1e0:	0003988e 	.word	0x0003988e
 800e1e4:	000bb679 	.word	0x000bb679
 800e1e8:	0800eae8 	.word	0x0800eae8
 800e1ec:	3ff00000 	.word	0x3ff00000
 800e1f0:	40080000 	.word	0x40080000
 800e1f4:	0800eb08 	.word	0x0800eb08
 800e1f8:	0800eaf8 	.word	0x0800eaf8
 800e1fc:	a3b3      	add	r3, pc, #716	; (adr r3, 800e4cc <__ieee754_pow+0xa4c>)
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	4640      	mov	r0, r8
 800e204:	4649      	mov	r1, r9
 800e206:	f7f2 f861 	bl	80002cc <__adddf3>
 800e20a:	4622      	mov	r2, r4
 800e20c:	ec41 0b1a 	vmov	d10, r0, r1
 800e210:	462b      	mov	r3, r5
 800e212:	4630      	mov	r0, r6
 800e214:	4639      	mov	r1, r7
 800e216:	f7f2 f857 	bl	80002c8 <__aeabi_dsub>
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	ec51 0b1a 	vmov	r0, r1, d10
 800e222:	f7f2 fc99 	bl	8000b58 <__aeabi_dcmpgt>
 800e226:	2800      	cmp	r0, #0
 800e228:	f47f ae04 	bne.w	800de34 <__ieee754_pow+0x3b4>
 800e22c:	4aa2      	ldr	r2, [pc, #648]	; (800e4b8 <__ieee754_pow+0xa38>)
 800e22e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e232:	4293      	cmp	r3, r2
 800e234:	f340 8107 	ble.w	800e446 <__ieee754_pow+0x9c6>
 800e238:	151b      	asrs	r3, r3, #20
 800e23a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e23e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e242:	fa4a fa03 	asr.w	sl, sl, r3
 800e246:	44da      	add	sl, fp
 800e248:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e24c:	489b      	ldr	r0, [pc, #620]	; (800e4bc <__ieee754_pow+0xa3c>)
 800e24e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e252:	4108      	asrs	r0, r1
 800e254:	ea00 030a 	and.w	r3, r0, sl
 800e258:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e25c:	f1c1 0114 	rsb	r1, r1, #20
 800e260:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e264:	fa4a fa01 	asr.w	sl, sl, r1
 800e268:	f1bb 0f00 	cmp.w	fp, #0
 800e26c:	f04f 0200 	mov.w	r2, #0
 800e270:	4620      	mov	r0, r4
 800e272:	4629      	mov	r1, r5
 800e274:	bfb8      	it	lt
 800e276:	f1ca 0a00 	rsblt	sl, sl, #0
 800e27a:	f7f2 f825 	bl	80002c8 <__aeabi_dsub>
 800e27e:	ec41 0b19 	vmov	d9, r0, r1
 800e282:	4642      	mov	r2, r8
 800e284:	464b      	mov	r3, r9
 800e286:	ec51 0b19 	vmov	r0, r1, d9
 800e28a:	f7f2 f81f 	bl	80002cc <__adddf3>
 800e28e:	a37a      	add	r3, pc, #488	; (adr r3, 800e478 <__ieee754_pow+0x9f8>)
 800e290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e294:	2000      	movs	r0, #0
 800e296:	4604      	mov	r4, r0
 800e298:	460d      	mov	r5, r1
 800e29a:	f7f2 f9cd 	bl	8000638 <__aeabi_dmul>
 800e29e:	ec53 2b19 	vmov	r2, r3, d9
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	460f      	mov	r7, r1
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	f7f2 f80d 	bl	80002c8 <__aeabi_dsub>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	f7f2 f807 	bl	80002c8 <__aeabi_dsub>
 800e2ba:	a371      	add	r3, pc, #452	; (adr r3, 800e480 <__ieee754_pow+0xa00>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	f7f2 f9ba 	bl	8000638 <__aeabi_dmul>
 800e2c4:	a370      	add	r3, pc, #448	; (adr r3, 800e488 <__ieee754_pow+0xa08>)
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	4680      	mov	r8, r0
 800e2cc:	4689      	mov	r9, r1
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	f7f2 f9b1 	bl	8000638 <__aeabi_dmul>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	4640      	mov	r0, r8
 800e2dc:	4649      	mov	r1, r9
 800e2de:	f7f1 fff5 	bl	80002cc <__adddf3>
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	460d      	mov	r5, r1
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	4639      	mov	r1, r7
 800e2ee:	f7f1 ffed 	bl	80002cc <__adddf3>
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	463b      	mov	r3, r7
 800e2f6:	4680      	mov	r8, r0
 800e2f8:	4689      	mov	r9, r1
 800e2fa:	f7f1 ffe5 	bl	80002c8 <__aeabi_dsub>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ffdf 	bl	80002c8 <__aeabi_dsub>
 800e30a:	4642      	mov	r2, r8
 800e30c:	4606      	mov	r6, r0
 800e30e:	460f      	mov	r7, r1
 800e310:	464b      	mov	r3, r9
 800e312:	4640      	mov	r0, r8
 800e314:	4649      	mov	r1, r9
 800e316:	f7f2 f98f 	bl	8000638 <__aeabi_dmul>
 800e31a:	a35d      	add	r3, pc, #372	; (adr r3, 800e490 <__ieee754_pow+0xa10>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	4604      	mov	r4, r0
 800e322:	460d      	mov	r5, r1
 800e324:	f7f2 f988 	bl	8000638 <__aeabi_dmul>
 800e328:	a35b      	add	r3, pc, #364	; (adr r3, 800e498 <__ieee754_pow+0xa18>)
 800e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32e:	f7f1 ffcb 	bl	80002c8 <__aeabi_dsub>
 800e332:	4622      	mov	r2, r4
 800e334:	462b      	mov	r3, r5
 800e336:	f7f2 f97f 	bl	8000638 <__aeabi_dmul>
 800e33a:	a359      	add	r3, pc, #356	; (adr r3, 800e4a0 <__ieee754_pow+0xa20>)
 800e33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e340:	f7f1 ffc4 	bl	80002cc <__adddf3>
 800e344:	4622      	mov	r2, r4
 800e346:	462b      	mov	r3, r5
 800e348:	f7f2 f976 	bl	8000638 <__aeabi_dmul>
 800e34c:	a356      	add	r3, pc, #344	; (adr r3, 800e4a8 <__ieee754_pow+0xa28>)
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	f7f1 ffb9 	bl	80002c8 <__aeabi_dsub>
 800e356:	4622      	mov	r2, r4
 800e358:	462b      	mov	r3, r5
 800e35a:	f7f2 f96d 	bl	8000638 <__aeabi_dmul>
 800e35e:	a354      	add	r3, pc, #336	; (adr r3, 800e4b0 <__ieee754_pow+0xa30>)
 800e360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e364:	f7f1 ffb2 	bl	80002cc <__adddf3>
 800e368:	4622      	mov	r2, r4
 800e36a:	462b      	mov	r3, r5
 800e36c:	f7f2 f964 	bl	8000638 <__aeabi_dmul>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4640      	mov	r0, r8
 800e376:	4649      	mov	r1, r9
 800e378:	f7f1 ffa6 	bl	80002c8 <__aeabi_dsub>
 800e37c:	4604      	mov	r4, r0
 800e37e:	460d      	mov	r5, r1
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4640      	mov	r0, r8
 800e386:	4649      	mov	r1, r9
 800e388:	f7f2 f956 	bl	8000638 <__aeabi_dmul>
 800e38c:	2200      	movs	r2, #0
 800e38e:	ec41 0b19 	vmov	d9, r0, r1
 800e392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	f7f1 ff95 	bl	80002c8 <__aeabi_dsub>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	ec51 0b19 	vmov	r0, r1, d9
 800e3a6:	f7f2 fa71 	bl	800088c <__aeabi_ddiv>
 800e3aa:	4632      	mov	r2, r6
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	463b      	mov	r3, r7
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	f7f2 f93f 	bl	8000638 <__aeabi_dmul>
 800e3ba:	4632      	mov	r2, r6
 800e3bc:	463b      	mov	r3, r7
 800e3be:	f7f1 ff85 	bl	80002cc <__adddf3>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f1 ff7d 	bl	80002c8 <__aeabi_dsub>
 800e3ce:	4642      	mov	r2, r8
 800e3d0:	464b      	mov	r3, r9
 800e3d2:	f7f1 ff79 	bl	80002c8 <__aeabi_dsub>
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	4602      	mov	r2, r0
 800e3da:	4939      	ldr	r1, [pc, #228]	; (800e4c0 <__ieee754_pow+0xa40>)
 800e3dc:	2000      	movs	r0, #0
 800e3de:	f7f1 ff73 	bl	80002c8 <__aeabi_dsub>
 800e3e2:	ec41 0b10 	vmov	d0, r0, r1
 800e3e6:	ee10 3a90 	vmov	r3, s1
 800e3ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e3ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3f2:	da2b      	bge.n	800e44c <__ieee754_pow+0x9cc>
 800e3f4:	4650      	mov	r0, sl
 800e3f6:	f000 f877 	bl	800e4e8 <scalbn>
 800e3fa:	ec51 0b10 	vmov	r0, r1, d0
 800e3fe:	ec53 2b18 	vmov	r2, r3, d8
 800e402:	f7ff bbee 	b.w	800dbe2 <__ieee754_pow+0x162>
 800e406:	4b2f      	ldr	r3, [pc, #188]	; (800e4c4 <__ieee754_pow+0xa44>)
 800e408:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e40c:	429e      	cmp	r6, r3
 800e40e:	f77f af0d 	ble.w	800e22c <__ieee754_pow+0x7ac>
 800e412:	4b2d      	ldr	r3, [pc, #180]	; (800e4c8 <__ieee754_pow+0xa48>)
 800e414:	440b      	add	r3, r1
 800e416:	4303      	orrs	r3, r0
 800e418:	d009      	beq.n	800e42e <__ieee754_pow+0x9ae>
 800e41a:	ec51 0b18 	vmov	r0, r1, d8
 800e41e:	2200      	movs	r2, #0
 800e420:	2300      	movs	r3, #0
 800e422:	f7f2 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 800e426:	3800      	subs	r0, #0
 800e428:	bf18      	it	ne
 800e42a:	2001      	movne	r0, #1
 800e42c:	e448      	b.n	800dcc0 <__ieee754_pow+0x240>
 800e42e:	4622      	mov	r2, r4
 800e430:	462b      	mov	r3, r5
 800e432:	f7f1 ff49 	bl	80002c8 <__aeabi_dsub>
 800e436:	4642      	mov	r2, r8
 800e438:	464b      	mov	r3, r9
 800e43a:	f7f2 fb83 	bl	8000b44 <__aeabi_dcmpge>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f43f aef4 	beq.w	800e22c <__ieee754_pow+0x7ac>
 800e444:	e7e9      	b.n	800e41a <__ieee754_pow+0x99a>
 800e446:	f04f 0a00 	mov.w	sl, #0
 800e44a:	e71a      	b.n	800e282 <__ieee754_pow+0x802>
 800e44c:	ec51 0b10 	vmov	r0, r1, d0
 800e450:	4619      	mov	r1, r3
 800e452:	e7d4      	b.n	800e3fe <__ieee754_pow+0x97e>
 800e454:	491a      	ldr	r1, [pc, #104]	; (800e4c0 <__ieee754_pow+0xa40>)
 800e456:	2000      	movs	r0, #0
 800e458:	f7ff bb31 	b.w	800dabe <__ieee754_pow+0x3e>
 800e45c:	2000      	movs	r0, #0
 800e45e:	2100      	movs	r1, #0
 800e460:	f7ff bb2d 	b.w	800dabe <__ieee754_pow+0x3e>
 800e464:	4630      	mov	r0, r6
 800e466:	4639      	mov	r1, r7
 800e468:	f7ff bb29 	b.w	800dabe <__ieee754_pow+0x3e>
 800e46c:	9204      	str	r2, [sp, #16]
 800e46e:	f7ff bb7b 	b.w	800db68 <__ieee754_pow+0xe8>
 800e472:	2300      	movs	r3, #0
 800e474:	f7ff bb65 	b.w	800db42 <__ieee754_pow+0xc2>
 800e478:	00000000 	.word	0x00000000
 800e47c:	3fe62e43 	.word	0x3fe62e43
 800e480:	fefa39ef 	.word	0xfefa39ef
 800e484:	3fe62e42 	.word	0x3fe62e42
 800e488:	0ca86c39 	.word	0x0ca86c39
 800e48c:	be205c61 	.word	0xbe205c61
 800e490:	72bea4d0 	.word	0x72bea4d0
 800e494:	3e663769 	.word	0x3e663769
 800e498:	c5d26bf1 	.word	0xc5d26bf1
 800e49c:	3ebbbd41 	.word	0x3ebbbd41
 800e4a0:	af25de2c 	.word	0xaf25de2c
 800e4a4:	3f11566a 	.word	0x3f11566a
 800e4a8:	16bebd93 	.word	0x16bebd93
 800e4ac:	3f66c16c 	.word	0x3f66c16c
 800e4b0:	5555553e 	.word	0x5555553e
 800e4b4:	3fc55555 	.word	0x3fc55555
 800e4b8:	3fe00000 	.word	0x3fe00000
 800e4bc:	fff00000 	.word	0xfff00000
 800e4c0:	3ff00000 	.word	0x3ff00000
 800e4c4:	4090cbff 	.word	0x4090cbff
 800e4c8:	3f6f3400 	.word	0x3f6f3400
 800e4cc:	652b82fe 	.word	0x652b82fe
 800e4d0:	3c971547 	.word	0x3c971547

0800e4d4 <fabs>:
 800e4d4:	ec51 0b10 	vmov	r0, r1, d0
 800e4d8:	ee10 2a10 	vmov	r2, s0
 800e4dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4e0:	ec43 2b10 	vmov	d0, r2, r3
 800e4e4:	4770      	bx	lr
	...

0800e4e8 <scalbn>:
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	ec55 4b10 	vmov	r4, r5, d0
 800e4ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	462b      	mov	r3, r5
 800e4f6:	b999      	cbnz	r1, 800e520 <scalbn+0x38>
 800e4f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4fc:	4323      	orrs	r3, r4
 800e4fe:	d03f      	beq.n	800e580 <scalbn+0x98>
 800e500:	4b35      	ldr	r3, [pc, #212]	; (800e5d8 <scalbn+0xf0>)
 800e502:	4629      	mov	r1, r5
 800e504:	ee10 0a10 	vmov	r0, s0
 800e508:	2200      	movs	r2, #0
 800e50a:	f7f2 f895 	bl	8000638 <__aeabi_dmul>
 800e50e:	4b33      	ldr	r3, [pc, #204]	; (800e5dc <scalbn+0xf4>)
 800e510:	429e      	cmp	r6, r3
 800e512:	4604      	mov	r4, r0
 800e514:	460d      	mov	r5, r1
 800e516:	da10      	bge.n	800e53a <scalbn+0x52>
 800e518:	a327      	add	r3, pc, #156	; (adr r3, 800e5b8 <scalbn+0xd0>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	e01f      	b.n	800e560 <scalbn+0x78>
 800e520:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e524:	4291      	cmp	r1, r2
 800e526:	d10c      	bne.n	800e542 <scalbn+0x5a>
 800e528:	ee10 2a10 	vmov	r2, s0
 800e52c:	4620      	mov	r0, r4
 800e52e:	4629      	mov	r1, r5
 800e530:	f7f1 fecc 	bl	80002cc <__adddf3>
 800e534:	4604      	mov	r4, r0
 800e536:	460d      	mov	r5, r1
 800e538:	e022      	b.n	800e580 <scalbn+0x98>
 800e53a:	460b      	mov	r3, r1
 800e53c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e540:	3936      	subs	r1, #54	; 0x36
 800e542:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e546:	4296      	cmp	r6, r2
 800e548:	dd0d      	ble.n	800e566 <scalbn+0x7e>
 800e54a:	2d00      	cmp	r5, #0
 800e54c:	a11c      	add	r1, pc, #112	; (adr r1, 800e5c0 <scalbn+0xd8>)
 800e54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e552:	da02      	bge.n	800e55a <scalbn+0x72>
 800e554:	a11c      	add	r1, pc, #112	; (adr r1, 800e5c8 <scalbn+0xe0>)
 800e556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e55a:	a319      	add	r3, pc, #100	; (adr r3, 800e5c0 <scalbn+0xd8>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f7f2 f86a 	bl	8000638 <__aeabi_dmul>
 800e564:	e7e6      	b.n	800e534 <scalbn+0x4c>
 800e566:	1872      	adds	r2, r6, r1
 800e568:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e56c:	428a      	cmp	r2, r1
 800e56e:	dcec      	bgt.n	800e54a <scalbn+0x62>
 800e570:	2a00      	cmp	r2, #0
 800e572:	dd08      	ble.n	800e586 <scalbn+0x9e>
 800e574:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e57c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e580:	ec45 4b10 	vmov	d0, r4, r5
 800e584:	bd70      	pop	{r4, r5, r6, pc}
 800e586:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e58a:	da08      	bge.n	800e59e <scalbn+0xb6>
 800e58c:	2d00      	cmp	r5, #0
 800e58e:	a10a      	add	r1, pc, #40	; (adr r1, 800e5b8 <scalbn+0xd0>)
 800e590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e594:	dac0      	bge.n	800e518 <scalbn+0x30>
 800e596:	a10e      	add	r1, pc, #56	; (adr r1, 800e5d0 <scalbn+0xe8>)
 800e598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e59c:	e7bc      	b.n	800e518 <scalbn+0x30>
 800e59e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5a2:	3236      	adds	r2, #54	; 0x36
 800e5a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	4b0c      	ldr	r3, [pc, #48]	; (800e5e0 <scalbn+0xf8>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	e7d5      	b.n	800e560 <scalbn+0x78>
 800e5b4:	f3af 8000 	nop.w
 800e5b8:	c2f8f359 	.word	0xc2f8f359
 800e5bc:	01a56e1f 	.word	0x01a56e1f
 800e5c0:	8800759c 	.word	0x8800759c
 800e5c4:	7e37e43c 	.word	0x7e37e43c
 800e5c8:	8800759c 	.word	0x8800759c
 800e5cc:	fe37e43c 	.word	0xfe37e43c
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	81a56e1f 	.word	0x81a56e1f
 800e5d8:	43500000 	.word	0x43500000
 800e5dc:	ffff3cb0 	.word	0xffff3cb0
 800e5e0:	3c900000 	.word	0x3c900000

0800e5e4 <with_errno>:
 800e5e4:	b570      	push	{r4, r5, r6, lr}
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	460d      	mov	r5, r1
 800e5ea:	4616      	mov	r6, r2
 800e5ec:	f7fc fffe 	bl	800b5ec <__errno>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	6006      	str	r6, [r0, #0]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}

0800e5f8 <xflow>:
 800e5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5fa:	4614      	mov	r4, r2
 800e5fc:	461d      	mov	r5, r3
 800e5fe:	b108      	cbz	r0, 800e604 <xflow+0xc>
 800e600:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e604:	e9cd 2300 	strd	r2, r3, [sp]
 800e608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e60c:	4620      	mov	r0, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	f7f2 f812 	bl	8000638 <__aeabi_dmul>
 800e614:	2222      	movs	r2, #34	; 0x22
 800e616:	b003      	add	sp, #12
 800e618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e61c:	f7ff bfe2 	b.w	800e5e4 <with_errno>

0800e620 <__math_uflow>:
 800e620:	b508      	push	{r3, lr}
 800e622:	2200      	movs	r2, #0
 800e624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e628:	f7ff ffe6 	bl	800e5f8 <xflow>
 800e62c:	ec41 0b10 	vmov	d0, r0, r1
 800e630:	bd08      	pop	{r3, pc}

0800e632 <__math_oflow>:
 800e632:	b508      	push	{r3, lr}
 800e634:	2200      	movs	r2, #0
 800e636:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e63a:	f7ff ffdd 	bl	800e5f8 <xflow>
 800e63e:	ec41 0b10 	vmov	d0, r0, r1
 800e642:	bd08      	pop	{r3, pc}

0800e644 <_init>:
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	bf00      	nop
 800e648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e64a:	bc08      	pop	{r3}
 800e64c:	469e      	mov	lr, r3
 800e64e:	4770      	bx	lr

0800e650 <_fini>:
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	bf00      	nop
 800e654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e656:	bc08      	pop	{r3}
 800e658:	469e      	mov	lr, r3
 800e65a:	4770      	bx	lr
